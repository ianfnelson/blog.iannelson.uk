<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Entity Framework Week on Ian Nelson</title>
    <link>https://blog.iannelson.uk/series/entity-framework-week/</link>
    <description>Recent content in Entity Framework Week on Ian Nelson</description>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Apr 2025 21:18:19 +0100</lastBuildDate>
    <atom:link href="https://blog.iannelson.uk/series/entity-framework-week/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Entity Framework Week Part 5: Concluding Thoughts</title>
      <link>https://blog.iannelson.uk/entity-framework-week-part-5-concluding-thoughts/</link>
      <pubDate>Fri, 11 Mar 2011 09:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/entity-framework-week-part-5-concluding-thoughts/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the fifth in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. &lt;a href=&#34;https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/&#34;&gt;The introductory post in the series is here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I am lucky to have had the opportunity to spend a time-boxed period playing with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb399572.aspx&#34;&gt;Entity Framework&lt;/a&gt; Code-First in a real-world scenario, and to get paid for the privilege! I now have a clearer understanding of how it has progressed during the last few years, what its strong points are, and where it still has shortcomings compared to the much more mature &lt;a href=&#34;http://www.nhforge.org&#34;&gt;NHibernate&lt;/a&gt; framework.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>This is the fifth in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. <a href="https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/">The introductory post in the series is here</a>.</em></p>
<p>I am lucky to have had the opportunity to spend a time-boxed period playing with <a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a> Code-First in a real-world scenario, and to get paid for the privilege! I now have a clearer understanding of how it has progressed during the last few years, what its strong points are, and where it still has shortcomings compared to the much more mature <a href="http://www.nhforge.org">NHibernate</a> framework.</p>
<h3 id="the-positives">The Positives</h3>
<p>I have to say that after a week of getting through the pain barrier and the initial denial of working with an unfamiliar ORM, I have reached a level of understanding and acceptance with Entity Framework. It really isn’t all that bad (at least the Code-First flavour), and if you don’t stray too far from its rigid way of thinking it will help you to get a solution up and running quickly and reliably. It’s certainly a far preferable option than mucking about with ADO.NET and stored bloody procedures, that’s for sure.</p>
<p>The whole process of configuration and initialization is straightforward and pain-free, with the derived DbContext providing a out-of-the-box implementation of Unit of Work already to be referenced from your consuming code. Easy.</p>
<p>Querying the model is 99% unadulterated LINQ, with the occasional call to Include to perform some eager fetching – what could be simpler?</p>
<p>I’m also unashamedly impressed with how easily EF can be used to power <a href="http://www.asp.net/dynamicdata">ASP.NET Dynamic Data</a> sites, and RESTful WCF Data Services. Nice.</p>
<h3 id="the-negatives">The Negatives</h3>
<p>I found that the real pain of working with Entity Framework only surfaces when you wish to start tuning its behaviour in any way – you find that it’s a big black box with few extensibility points. It performs cunning tricks effortlessly, but wields its power in a largely indiscriminate manner. By comparison, NHibernate can achieve even greater things, but requires you to explicitly invoke these powers.</p>
<p>I am reminded of <a href="http://ayende.com/Blog/archive/2009/04/27/nhibernate-futures.aspx#30714">a response Ayende gave</a> when asked why NH Futures was not the default behaviour – “NHibernate tries hard not to make too much magic”. I thought it sounded glib at the time, but having lived with EF for a while, I now understand why this is preferable.</p>
<p>Most of the NHibernate features that are missing from Entity Framework are related to performance – such as the ability to configure query batching, write batching, bulk operations, extra-lazy properties, and second-level caching. These are the features you’ll miss the most when you’re some way into a project, perhaps not until it’s in production and scalability issues arise.</p>
<p>I also feel the CTP5 of EF code-first is a little way off offering true support for persistence ignorance and POCO, having experienced a number of issues that required me to change my domain model, database schema, and application code.</p>
<h3 id="additional-resources">Additional Resources</h3>
<p>Here are a few of the resources that I found particularly useful during my EF week:</p>
<ul>
<li><a href="http://amzn.to/1ffRzv4">Programming Entity Framework, Second Edition</a></li>
<li><a href="http://dotnetslackers.com/articles/ado_net/A-Feature-driven-Comparison-of-Entity-Framework-and-NHibernate-Multiple-Databases.aspx">Dino Esposito – A Feature-Driven Comparison of EF and NH</a></li>
<li><a href="http://blogs.msdn.com/b/adonet/">ADO.NET Team Blog</a></li>
<li><a href="http://blogs.msdn.com/b/adonet/archive/2011/01/27/using-dbcontext-in-ef-feature-ctp5-part-1-introduction-and-model.aspx">Using DbContext in EF Feature CTP5 – a series of 12 blog posts</a></li>
<li><a href="http://blog.davidebbo.com/2011/01/using-dynamic-data-with-ef-code-first.html">David Ebbo – Using Dynamic Data With EF Code First and NuGet</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Entity Framework Week Part 4: Features and Further Investigations</title>
      <link>https://blog.iannelson.uk/entity-framework-week-part-4-features-and-further-investigations/</link>
      <pubDate>Thu, 10 Mar 2011 09:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/entity-framework-week-part-4-features-and-further-investigations/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the fourth in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. &lt;a href=&#34;https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/&#34;&gt;The introductory post in the series is here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I didn’t want this series of posts to descend into a point-scoring &lt;a href=&#34;http://www.nhforge.org&#34;&gt;NHibernate&lt;/a&gt;-versus-&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb399572.aspx&#34;&gt;Entity Framework&lt;/a&gt; comparison, but…&lt;/p&gt;
&lt;p&gt;I now have a basic proof-of-concept up and running, with my client’s nascent application now being powered by Entity Framework Code-First CTP5 rather than a hand-rolled DAL. So, I had some time to consider future functional and non-functional requirements that the team would be asked to develop and support, and investigate how EF would meet the challenge.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>This is the fourth in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. <a href="https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/">The introductory post in the series is here</a>.</em></p>
<p>I didn’t want this series of posts to descend into a point-scoring <a href="http://www.nhforge.org">NHibernate</a>-versus-<a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a> comparison, but…</p>
<p>I now have a basic proof-of-concept up and running, with my client’s nascent application now being powered by Entity Framework Code-First CTP5 rather than a hand-rolled DAL. So, I had some time to consider future functional and non-functional requirements that the team would be asked to develop and support, and investigate how EF would meet the challenge.</p>
<h3 id="caching">Caching</h3>
<p>I was genuinely surprised to learn that Entity Framework still doesn’t include any out-of-the-box support for integrating second-level caching, for example to cache reference data. It seems there is a body of opinion stating that caching should not be the responsibility of the data access layer. I disagree, and I think this is one of the major benefits NHibernate still has over Entity Framework, with its multiple flexible and configurable second-level cache providers.</p>
<h3 id="targeting-alternative-providers-sqlite-">Targeting Alternative Providers (SQLite)</h3>
<p>When working with NHibernate, I often target <a href="http://www.sqlite.org">SQLite</a> for fast integration tests against an in-memory database, rather than maintaining a testing version of the MSSQL/Oracle databases that my applications usually use for their bitbucket. I was pleased to see the discussions on the System.Data.SQLite page suggesting that this approach is possible with Entity Framework too, but I didn’t spend any time attempting to get this working.</p>
<h3 id="auditing-functionality">Auditing Functionality</h3>
<p>Entity Framework does not appear to support the rich events and listeners model that is offered by NHibernate and frequently used to develop application auditing functionality. The recommended solution to achieve this scenario is to override the virtual SaveChanges method on DbContext and add validation and auditing logic there. For more details, see <a href="http://my.safaribooksonline.com/book/software-engineering-and-development/9780596807276/working-with-object-services/261">page 261 of Programming Entity Framework</a>.</p>
<h3 id="bulk-operations">Bulk Operations</h3>
<p>I have not yet encountered any Entity Framework support for bulk update/delete operations akin to NHibernate’s <a href="http://ayende.com/blog/archive/2009/05/28/nhibernate-ndash-executable-dml.aspx">Executable DML</a> functionality. Such requirements are usually relatively rare, but it’s a shame to have to fall back to writing stored procedures for relatively simple operations which can be described in terms of the domain model.</p>
<h3 id="query-batching">Query Batching</h3>
<p>There does not appear to be any way to do query batching in Entity Framework, as per <a href="http://ayende.com/blog/archive/2009/04/27/nhibernate-futures.aspx">NHibernate Futures</a>. Multiple queries result in multiple network trips to the database, sadly. Similarly, there’s no support for write batching and batched collection loads.</p>
<h3 id="concurrency-and-versioning">Concurrency and Versioning</h3>
<p>Entity framework supports optimistic concurrency. <a href="http://my.safaribooksonline.com/book/software-engineering-and-development/9780596807276/planning-for-concurrency-problems/659">Chapter 23 of Programming Entity Framework</a> explains in detail how this can be configured and utilised by your application. Entity Framework also supports rowversion fields for concurrency checks.</p>
<h3 id="extra-lazy-properties">Extra-Lazy Properties</h3>
<p>Unlike NHibernate, Entity Framework currently has no notion of “extra-lazy” properties. Requesting the Count of a child collection (e.g. Order.Lines.Count) will therefore trigger the loading of all entities (Lines) in the child collection. Not nice. Yes, we can work around this by making the appropriate count query at a higher level but it’s much nicer to be able to traverse the domain model relationships and let persistence ignorance work it’s magic.</p>
<h3 id="integration-with-the-wider-net-stack">Integration with the Wider .NET Stack</h3>
<p>To my mind, one of the key selling points of Entity Framework over NHibernate is its out-of-the-box integration with other areas of the .NET stack – notably the ability to power <a href="http://www.asp.net/dynamicdata">ASP.NET Dynamic Data</a> sites (which are great for simple pages to maintain reference data) and <a href="http://msdn.microsoft.com/en-us/data/bb931106">WCF Data Services</a>.</p>
<h3 id="query-techniques">Query Techniques</h3>
<p>NHibernate offers a world of choice when it comes to methods for querying the model: HQL, Criteria, QueryOver, LINQ, Named Queries, etc. These each offer a plethora of possible options and tweaks including query caching, batching and futures. By comparison, Entity Framework offers a comprehensive LINQ provider (with decent extensions to specify eager-loading of child entities), or Entity SQL. And that’s your lot.</p>
<p>By the end of my fourth day, I had a working proof-of-concept using Entity Framework Code First to power my client’s application, and I had a good idea of how suitable it was to meet future requirements lurking in the product backlog.</p>
<p>In the <a href="https://blog.iannelson.uk/entity-framework-week-part-5-concluding-thoughts/">fifth and final part of this series of posts</a>, I’ll write some concluding thoughts on my overall experiences spending a week with Entity Framework.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Entity Framework Week Part 3: Runtime Issues Encountered</title>
      <link>https://blog.iannelson.uk/entity-framework-week-part-3-runtime-issues-encountered/</link>
      <pubDate>Wed, 09 Mar 2011 09:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/entity-framework-week-part-3-runtime-issues-encountered/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the third in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. &lt;a href=&#34;https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/&#34;&gt;The introductory post in the series is here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Having configured and initialized &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb399572.aspx&#34;&gt;Entity Framework&lt;/a&gt;, and tweaked the mappings, by Day 3 I was all set to start consuming my shiny new DbContext implementation from the application code, and actually get some CRUD work done. Not unexpectedly, I hit a few issues along the way…&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>This is the third in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. <a href="https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/">The introductory post in the series is here</a>.</em></p>
<p>Having configured and initialized <a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a>, and tweaked the mappings, by Day 3 I was all set to start consuming my shiny new DbContext implementation from the application code, and actually get some CRUD work done. Not unexpectedly, I hit a few issues along the way…</p>
<h3 id="proxy-generation">Proxy Generation</h3>
<p>As a long-term <a href="http://www.nhforge.org">NHibernate</a> user, I habitually mark all members on my domain classes as virtual, since this is a requirement for entities to be replace at runtime by proxies. Remember that NHibernate is a port from the Java world, where all instance methods are virtual by default.</p>
<p>Now, this habit led to some unexpected behaviour when I attempted to use Entity Framework to persist the same domain objects, namely exception messages such as:</p>
<blockquote>
<p>The property ‘Foo’ on type ‘Bar_B6089AE40D178593955F1328A70EAA3D8F0F01DDE9F9FBD615F60A34F9178B94’ cannot be set because the collection is already set to an EntityCollection.</p></blockquote>
<p>Clear as mud, eh? A little Googling eventually unearthed the following posts from other people experiencing this issue:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/4069563/why-is-my-entity-framework-code-first-proxy-collection-null-and-why-cant-i-set-i">Why is my Entity Framework Code First proxy collection null and why can’t I set it?</a></li>
<li><a href="http://stackoverflow.com/questions/3858922/code-first-adding-to-collections-how-to-use-code-first-with-repositories-advice">Code First adding to collections? How to use Code First with repositories? Advice me please</a></li>
<li><a href="http://social.msdn.microsoft.com/Forums/en/adonetefx/thread/99d8d4a1-5ab1-42dc-b9db-5087be02162d">Code First EF4 with N-Tier.. I’m really stuck on this one issue</a></li>
</ul>
<p>This latter post on the MSDN forums includes the following explanation from one of the guys on the Entity Framework team:</p>
<blockquote>
<p>“If you make all your properties virtual then EF will generate proxy classes at runtime that derives from your POCO classed, these proxies allow EF to find out about changes in real-time rather than having to capture the original values of your object and then scan for changes when you save (this is obviously has performance and memory usage benefits but the difference will be negligible unless you have a large number of entities loaded into memory). These are known as ‘change tracking proxies’, if you make your navigation properties virtual then a proxy is still generated but it is much simpler and just includes some logic to perform lazy loading when you access a navigation property.</p></blockquote>
<blockquote>
<p>Because your original code was generating change tracking proxies, EF was replacing your collection property with a special collection type to help it find out about changes. Because you try and set the collection back to a simple list in the constructor you are getting the exception.</p></blockquote>
<blockquote>
<p>Unless you are seeing performance issues I would follow Terrence’s suggestion and just remove ‘virtual’ from your non-navigation properties.”</p></blockquote>
<p>This feels a little bit strange, and I’m not convinced that we are really getting persistence ignorance if we experience differing behaviour depending on whether or not we have chosen to make all our members virtual. I haven’t invested much time looking into the benefits of these “Change-Tracking Proxies”, or how it is possible to utilise these without causing the “collection is already set to an EntityCollection” exception. I just did what the man said and removed the virtual keyword from most non-navigation properties.</p>
<h3 id="a-runtime-exception-when-lazy-loading">A Runtime Exception When Lazy-Loading</h3>
<p>At one point I experienced an exception message along the lines of:</p>
<blockquote>
<p>“Entities in ‘CodeFirstContainer_Sessions’ participate in the ‘Session_Season’ relationship. 0 related ‘Session_Season_Target’ were found. 1 ‘Session_Season_Target’ is expected.”</p></blockquote>
<p>This was caused by my navigation property (Session.Season) not having been set as virtual, so no proxy was being created.</p>
<p>Incidentally, it is worth highlighting that lazy-loading must occur within the scope of an open DbContext (i.e. within the Unit of Work). It is not reasonable to expect to transparently load the navigation property after the database connection has been closed (this is analogous to attempting to lazy-load in NHibernate after closing the Session).</p>
<h3 id="cascades">Cascades</h3>
<p>In NHibernate, cascading saves/updates/deletes have to be specified manually on all foreign key relationships – the default behaviour is not to cascade any changes when committing changes, which often leads to newcomers experiencing an error message “not-null property references a null or transient value”.</p>
<p>Entity Framework takes a more convention-based approach and assumes that all saves and updates should cascade. So, if you save a shiny new Order with an associated Address and a handful of Lines, Entity Framework will determine that it should first insert the Address row, then the Order row, and then each Line row. Sweet. Updates similarly cascade. Assuming you are happy with this behaviour (which seems sensible), then all should be well.</p>
<p>Deletes, on the other hand, are a bit strange. Entity Framework will not take responsibility for cascading a delete in the database – it expects that you will achieve this by setting a cascading delete on the foreign key relationship in the RDBMS.</p>
<p>Having said this, if you delete a parent entity in Entity Framework, it <em>will</em> attempt to issue delete statements for any child entities which have been loaded into the current DbContext, but it will not initialize any child entities which have not yet been loaded. This may lead to the RDBMS throwing foreign key constraint violation exceptions if a cascading delete has not been specified. For more details about how cascade delete “works” in Entity Framework, <a href="http://blogs.msdn.com/b/alexj/archive/2009/08/19/tip-33-how-cascade-delete-really-works-in-ef.aspx">see this blog post</a>.</p>
<p>Personally, I think this behaviour is pretty shoddy, but there you have it! Forewarned is forearmed.</p>
<p>In light of this behaviour I had to make modifications to the database schema to set cascading deletes on all the appropriate foreign key relationships. For many line-of-business applications, deletes are actually pretty rare events, and in the short term I suspect this issue is more likely to be encountered when clearing down data in integration tests than in actual application use.</p>
<h3 id="initializing-child-objects-on-domain-entities">Initializing Child Objects on Domain Entities</h3>
<p>I habitually add code to the constructors of domain entities to initialise child entities to sensible defaults – I find it helps to ensure that objects are always in a valid state, and reduces the likelihood of encountering an unhandled NullReferenceException. So, for example, I would usually have something like this:</p>
<p>Unfortunately, when using this approach with Entity Framework, I found that when loading an existing Order which has an associated Address, the Order.Address object was always reset to its default.</p>
<p>Now, I realise that making calls to virtual members in a constructor is not really a good idea (heaven knows Resharper and Coderush have both nagged me about it often enough), but NHibernate never had a problem with<br>
this approach. Nevertheless, I tried to do things properly and replaced the automatic properties with backing fields….</p>
<p>But still no dice. I then tried putting initialization logic in the property’s getter….</p>
<p>But nothing worked. Every time I loaded an Order, the Order.Address object was reset back to its default instead of containing the data loaded from the database.</p>
<p>This is quite frustrating and as yet I haven’t been able to find a workaround, other than to abandon my plans to perform object initialization in the domain model and instead handle it in the service layer, with all the resultant null-checking code that will ensue.</p>
<p>While trying to find a solution, I did stumble across this comment from Rowan Miller that “More flexibility in how we interact with classes is a common ask for EF and our team is looking at how we can support this at the moment.”   Are we asking for flexibility? I thought we were just asking for the persistence ignorance that had long been promised.</p>
<p>Despite these issues, in three short days I had gone from knowing next to nothing about Entity Framework 4 Code first, to using it to perform almost all of the data access required by a small application. In the <a href="https://blog.iannelson.uk/entity-framework-week-part-4-features-and-further-investigations/">fourth part of this series</a> I’ll consider some of the additional features and application requirements that I would expect an ORM to handle, and see how EF meets the challenge.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Entity Framework Week Part 2: Conventions and Fluent Mappings</title>
      <link>https://blog.iannelson.uk/entity-framework-week-part-2-conventions-and-fluent-mappings/</link>
      <pubDate>Tue, 08 Mar 2011 09:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/entity-framework-week-part-2-conventions-and-fluent-mappings/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the second in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. &lt;a href=&#34;https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/&#34;&gt;The introductory post in the series is here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As mentioned in yesterday’s post, I was attempting to use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb399572.aspx&#34;&gt;Entity Framework&lt;/a&gt; Code-First CTP5 to map an existing domain model to an existing database schema. Fortunately the project was in its infancy and there was a high degree of cohesion between the two models. I therefore didn’t anticipate too many difficulties ahead – the occasional naming discrepancy to resolve, and table-per-hierarchy mappings that would need their discriminators specifying – nothing too complicated really. I hoped to make as few changes as possible to either the database schema or domain model.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>This is the second in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. <a href="https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/">The introductory post in the series is here</a>.</em></p>
<p>As mentioned in yesterday’s post, I was attempting to use <a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a> Code-First CTP5 to map an existing domain model to an existing database schema. Fortunately the project was in its infancy and there was a high degree of cohesion between the two models. I therefore didn’t anticipate too many difficulties ahead – the occasional naming discrepancy to resolve, and table-per-hierarchy mappings that would need their discriminators specifying – nothing too complicated really. I hoped to make as few changes as possible to either the database schema or domain model.</p>
<p>Entity Framework Code-First uses a set of conventions to “discover” the mappings from domain objects to database. This is broadly analogous to James Gregory’s Fluent NHibernate <a href="http://wiki.fluentnhibernate.org/Auto_Mapping">AutoMapping</a> functionality.</p>
<p>As with Fluent NHibernate, it is possible to add custom conventions, and to manually override mappings for specific properties which deviate from the conventions. It is also possible to remove existing conventions.</p>
<p>All of these modifications to the model mappings are affected by overriding the virtual OnModelCreating method in our concrete implementation of DbContext. I was initially worried about the sheer volume of code that might be included in this method, and was relieved to discover that mapping overrides related to particular entities can be separated out into the constructor of generic implementations of EntityTypeConfiguration, not unlike the generic ClassMap in Fluent NHibernate.</p>
<h3 id="custom-conventions">Custom Conventions</h3>
<p>In the domain model I was working with, all entities were derived from an abstract base Entity class which defined an integer Id property. By contrast, the primary keys on the database tables were all prefixed with the name of the table/entity. Neither of these situations are ideal, but nor are they all that unusual, and I sought a way of “teaching” this convention to our custom EF context.</p>
<p>It took me some time to discover that custom conventions are even possible in CTP5, and I had initially resigned myself to manually overriding the names of each and every primary key property. It was only through stumbling upon <a href="http://blogs.msdn.com/b/adonet/archive/2011/01/10/ef-feature-ctp5-pluggable-conventions.aspx">this post on the ADO.NET team blog</a> that I found what I was looking for. Note that this post does include the caveat “There are a number of rough edges and the API surface is likely to change”.</p>
<p>My first impression is that custom Entity Framework conventions could turn out to be far more powerful than those offered by Fluent NHibernate, but they are also trickier to develop, requiring an understanding of the valid options for the two generic parameters that IConfigurationConvention can take, and what actions should be taken by the custom convention.</p>
<p>Still, after a little trial and error I was able to write the custom primary key convention that I required:</p>
<p>I was disappointed that I had to insert a guard clause to ignore this convention for the concrete subclasses of hierarchies that are mapped using table-per-hierarchy (i.e. ProductFeature and ProductInsert). Given time I would hope to find a generic way of achieving this convention that doesn’t require hardcoded references to specific Domain objects from within the convention definition.</p>
<p>Compare and contrast with the equivalent code for Fluent NHibernate:</p>
<p><strong>Updated:</strong></p>
<p>Since I wrote the section above, the ADO.NET team have <a href="http://blogs.msdn.com/b/adonet/archive/2011/03/02/ef-4-1-is-coming-dbcontext-api-amp-code-first-rtw.aspx">announced details of the forthcoming Entity Framework 4.1 Release Candidate</a>, which removes this ability add conventions:</p>
<blockquote>
<p>“This was a very painful decision but we have decided to remove the ability to add custom conventions for our first RC/RTW. It has become apparent we need to do some work to improve the usability of this feature and unfortunately we couldn’t find time in the schedule to do this and get quality up the required level. You will still be able to remove our default conventions in RC/RTW.”</p></blockquote>
<p>For what it’s worth, I think this was the right decision to make. A lack of “pluggable” conventions is slightly disappointing, but it can easily be worked around by making the appropriate overrides with the fluent mappings. Better to hold off an nail an API that’s both powerful and usable than go too soon with something that’s liable to confuse and confound.</p>
<h3 id="removal-of-default-conventions">Removal of Default Conventions</h3>
<p>Another nice feature described in the <a href="http://blogs.msdn.com/b/adonet/archive/2011/01/10/ef-feature-ctp5-pluggable-conventions.aspx">Pluggable Conventions blog post</a> is the ability to remove some of the default conventions, which I immediately put to good use by disabling the default PluralizingTableNameConvention:</p>
<p><em>(I mean, for goodness sake, who in their right mind pluralizes table names anyway? Yes, it’s very impressive that this library knows that the plural of “goose” is “geese”, but it would be more beneficial if that were an extension method on System.String in the BCL rather than being buried in the bowels of System.Data.Entity.Design. Then perhaps the ADO.NET team could be left to get on with developing something more useful, like second-level caching? Sorry, rant over…)</em></p>
<h3 id="fluent-mapping-api">Fluent Mapping API</h3>
<p>Most manual tweaks to the model are fairly straightforward to perform, and there are a good set of examples in <a href="http://blogs.msdn.com/b/adonet/archive/2010/12/14/ef-feature-ctp5-fluent-api-samples.aspx">this post on the ADO.NET team blog</a>.</p>
<p>I did encounter some difficulty with the mapping of one-to-many relationships, which felt quite cumbersome to perform in comparison to the brevity of Fluent NHibernate’s API. Here’s how you’d rename a foreign key on a unidirectional one-to-many relationship in Fluent NHibernate:</p>
<p>Whilst in Entity Framework code-first, the equivalent is:</p>
<p>To be fair, I think part of this clumsiness arises because Entity Framework is allowing us to define both ends of a bidirectional relationship in a single place, whereas <a href="http://www.nhforge.org">NHibernate</a> requires us to define each end separately. It’s just unfortunate that in unidirectional situations like this example we end up with the WithMany().IsIndependent() noise in the middle of the syntax.</p>
<p>Having learned the odd syntax required to rename these one-to-many foreign keys, I then wasted an inordinate amount of time trying to make this actually work. Many of my waking hours were blighted by an InvalidOperationException (“Sequence contains more than one matching element”) originating from deep within the framework. A quick ferret aro<br>
und on Stack Overflow revealed that I was not the only person currently banging his or her head on this particular brick wall:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/5008479/ef-code-first-ctp5-using-the-name-of-the-property-as-column-name-for-foreign-ke">EF Code First CTP5 – Using the name of the property as column name for foreign key</a></li>
<li><a href="http://stackoverflow.com/questions/4981228/entity-framework-4-ctp-5-self-referencing-many-to-many">Entity Framework 4 CTP 5 Self Referencing Many-to-Many</a></li>
<li><a href="http://stackoverflow.com/questions/4660908/entity-framework-ctp5-fluent-api-rename-column-of-navigation-property">Entity framework (CTP5, Fluent API). Rename column of navigation property</a></li>
</ul>
<p>Eventually <a href="http://stackoverflow.com/questions/5008479/ef-code-first-ctp5-using-the-name-of-the-property-as-column-name-for-foreign-ke/5090600#5090600">Diego Mijelshon figured out what was amiss</a>. It seems the mapping failure was due to the Id property being defined in a base class rather than on the concrete class being mapped. Whether this is intentional behaviour or a bug in the CTP5, I’m not sure, but I worked around this issue by modifying the domain model and ditching the hierarchy of base classes altogether, leaving the Id and other common properties defined only on interfaces. <a href="http://ayende.com/blog/archive/2011/02/21/code-review-guidelines-avoid-inheritance-for-properties.aspx">Ayende would be pleased</a>.</p>
<p>Two days into my adventure, and my database and domain model were happily mapped. In <a href="https://blog.iannelson.uk/entity-framework-week-part-3-runtime-issues-encountered/">part three</a> I’ll look at some of the issues I encountered at runtime, which necessitated further tweaks to the domain model and database.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Entity Framework Week Part 1: Introduction, Configuration and Initialization</title>
      <link>https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/</link>
      <pubDate>Mon, 07 Mar 2011 09:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/</guid>
      <description>&lt;p&gt;In February 2011 I found myself doing some contract development work in a team that was still doing data access using raw ADO.NET and stored procedures. Being the &lt;a href=&#34;http://www.nhforge.org&#34;&gt;NHibernate&lt;/a&gt; fanboy that I am, I naturally attempted to persuade them of the benefits of moving over to NH, even going so far as to develop (in my own time) an NH-powered version of their application.&lt;/p&gt;
&lt;p&gt;My efforts were &lt;em&gt;partially&lt;/em&gt; successful. The team were sold on the idea of using an ORM, but wanted me to develop a second proof of concept using Microsoft ADO.NET &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb399572.aspx&#34;&gt;Entity Framework&lt;/a&gt; rather than NHibernate. This prompted much mirth amongst my FaceBook friends.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In February 2011 I found myself doing some contract development work in a team that was still doing data access using raw ADO.NET and stored procedures. Being the <a href="http://www.nhforge.org">NHibernate</a> fanboy that I am, I naturally attempted to persuade them of the benefits of moving over to NH, even going so far as to develop (in my own time) an NH-powered version of their application.</p>
<p>My efforts were <em>partially</em> successful. The team were sold on the idea of using an ORM, but wanted me to develop a second proof of concept using Microsoft ADO.NET <a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a> rather than NHibernate. This prompted much mirth amongst my FaceBook friends.<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --> <!-- raw HTML omitted --></p>
<p>I decided to throw myself into the task, and use this opportunity to spend some time getting to grips with Entity Framework in a real-life scenario for a couple of weeks. I figured that in the best-case scenario, I would learn to love EF even more than NH, and bolster my CV. Worst case, I’d hate it but would be moving on to a new contract shortly anyway, so wouldn’t have to live with it for too long. And of course I was getting paid for the experience either way, so what’s not to like?!</p>
<p>A couple of friends rightly suggested that I ought to blog about my experiences, so here we go.</p>
<p>This series of five blog posts details the thoughts and experiences I encountered during my week-long adventure with Entity Framework. It isn’t an EF walkthrough, nor is it a comprehensive EF-vs-NH feature comparison (the web is littered with those).</p>
<ol>
<li><a href="https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/">Introduction, Configuration and Initialization</a></li>
<li><a href="https://blog.iannelson.uk/entity-framework-week-part-2-conventions-and-fluent-mappings/">Conventions and Fluent Mappings</a></li>
<li><a href="https://blog.iannelson.uk/entity-framework-week-part-3-runtime-issues-encountered/">Runtime Issues Encountered</a></li>
<li><a href="https://blog.iannelson.uk/entity-framework-week-part-4-features-and-further-investigations/">Features and Further Investigations</a></li>
<li><a href="https://blog.iannelson.uk/entity-framework-week-part-5-concluding-thoughts/">Concluding Thoughts</a></li>
</ol>
<h3 id="choosing-code-first">Choosing Code-First</h3>
<p>When last I had a quick play with Entity Framework in the summer of 2008, it was very IDE and database-driven – the development process entailed dragging tables onto a designer surface which generated partial classes to represent objects, etc. Yuk! The lack of support for a domain-driven, persistence-ignorant approach was a real turn-off for me, prompting me to add my name to the list of signatories on the infamous <a href="http://efvote.wufoo.com/forms/ado-net-entity-framework-vote-of-no-confidence/">ADO.NET Entity Framework Vote of No Confidence</a>.</p>
<p>It was therefore a relief to discover that Entity Framework now supports a “Code-First” development paradigm, whereby EF can be used like a traditional ORM to fluently map an existing domain model to an existing database. At the time, this was still available only as a Community Technology Preview (<a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=35adb688-f8a7-4d28-86b1-b6235385389d">CTP5</a>), but given my remit was to introduce EF to an existing solution, it was a no-brainer to choose this option for the proof of concept, even though this would potentially leave me exposed to bugs and breaking API changes.</p>
<h3 id="configuration">Configuration</h3>
<p>Configuring Entity Framework seemed a lot easier than the equivalent procedure with NHibernate, filled as it is with esoteric options which can often be somewhat perplexing to NH newbies. With EF, the walkthroughs told me that essentially, all I needed to do was create a subclass of DbContext and Bob would be my mother’s brother. They were right. If anything, it was all too easy, and I wondered how and where I would get the option to configure details such as the second-level cache provider and ADO batch size.</p>
<p>I made use of a constructor overload on DbContext which takes a string parameter called nameOrConnectionString. Initially I attempted to pass into this parameter a connection string obtained from the app.config file using System.Configuration.ConfigurationManager, but this led to error messages along the lines of</p>
<blockquote>
<p>“Unable to determine the provider name for connection of type ‘System.Data.SqlClient.SqlConnection’”</p></blockquote>
<p>It seems that the connection strings used by Entity Framework are not the common or garden connection strings that we know and love, but instead special EF connection strings. Fortunately, a simple remedy to this issue was to instead just pass the connection string <em>name</em> into the exact same parameter. <a href="http://social.msdn.microsoft.com/Forums/eu/adonetefx/thread/8d18825d-7e44-4c7f-9e7d-1e73479fe0e7">See this forum post for more details</a>.</p>
<h3 id="database-initializer-strategies">Database Initializer Strategies</h3>
<p><a href="http://efprof.com">Entity Profiler</a> revealed that Entity Framework was unsuccessfully attempting to access a nonexistent database table called dbo.EdmMetadata. A little light Googling revealed that this is used by Entity Framework to store (perhaps unsurprisingly) metadata about the Entity Data Model. Why does it do this? Presumably so that it can decide at application start up whether code changes to the model require it to automagically make associated changes to the database schema. Some Summer 2010 blog posts from Scotts <a href="http://weblogs.asp.net/scottgu/archive/2010/07/16/code-first-development-with-entity-framework-4.aspx">Guthrie</a> and <a href="http://www.hanselman.com/blog/SimpleCodeFirstWithEntityFramework4MagicUnicornFeatureCTP4.aspx">Hanselman</a> show off the ability of Entity Framework to automatically create and update databases in response to model changes.</p>
<p>Now, this is all very clever and might be fine for hobbyist websites, integration tests and those quintessential “Look – no code!” TechEd presentations, but in an enterprise scenario it’s liable to cause acute apoplexy in DBAs.</p>
<p>Fortunately we can opt to suppress this crazy behaviour altogether by passing a null strategy into DbDatabase.SetInitializer, thus:</p>
<p>That was day one over – I was officially up and running in the brave new (to me) world of Entity Framework. In <a href="https://blog.iannelson.uk/entity-framework-week-part-2-conventions-and-fluent-mappings/">part two of this series</a> I’ll take a look at the mapping tweaks I had to make to successfully map our existing domain model to our existing database.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>

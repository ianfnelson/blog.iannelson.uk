<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>.NET on Ian Nelson</title>
    <link>https://blog.iannelson.uk/tags/.net/</link>
    <description>Recent content in .NET on Ian Nelson</description>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 May 2025 20:46:51 +0100</lastBuildDate>
    <atom:link href="https://blog.iannelson.uk/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Star Of The Week</title>
      <link>https://blog.iannelson.uk/star-of-the-week/</link>
      <pubDate>Thu, 08 May 2014 20:30:11 +0000</pubDate>
      <guid>https://blog.iannelson.uk/star-of-the-week/</guid>
      <description>&lt;p&gt;As a lowly &lt;em&gt;sellsword&lt;/em&gt; amongst the ensemble cast that make up the incestuous York/Leeds IT scene, I am not usually one to be influenced by the promise of titles and honours.&lt;/p&gt;
&lt;p&gt;Time was, long ago, in my first graduate job, that I yearned for a promotion from “Solution Developer” to “Development Specialist”. Now I give little consideration to what I’m called, and sell my services on the basis of what I can &lt;em&gt;do&lt;/em&gt;, and the value I can bring to a project and an organisation.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>As a lowly <em>sellsword</em> amongst the ensemble cast that make up the incestuous York/Leeds IT scene, I am not usually one to be influenced by the promise of titles and honours.</p>
<p>Time was, long ago, in my first graduate job, that I yearned for a promotion from “Solution Developer” to “Development Specialist”. Now I give little consideration to what I’m called, and sell my services on the basis of what I can <em>do</em>, and the value I can bring to a project and an organisation.</p>
<p>So, imagine my surprise when I recently returned to my desk at a client site to find the certificate below resting on my keyboard. It seems my highborn masters had seen fit to dub me (with tongue firmly in cheek, I presume), as their “Star of the Week”!</p>
<p><img alt="Star Of The Week Certificate" loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/StarOfTheWeek.jpg"></p>
<p>What had I done to deserve this honour?</p>
<p>The client had an existing solution to generate an XML feed summarising the information held within a database. Unfortunately this process was slow – it took around 45 seconds – and even though the output was aggressively cached, this was still causing a problem.</p>
<p>I actually enjoy occasionally tackling problems like this, where there is an existing solution that meets all functional requirements and my task is simply to improve some nonfunctional requirement – make it faster, make it more maintainable, make it scalable, update the technology stack, etc. The goal is much clearer when you have a reference solution to mimic than when starting with a blank page and having to tease out acceptance criteria from fickle humans!</p>
<p>Unsurprisingly, some baseline profiling revealed that the problems lay in the data access layer, and with the help of Hibernating Rhino’s <a href="http://www.hibernatingrhinos.com/products/efprof">Entity Framework Profiler</a>, I was able to determine that over 35,000 separate database calls were being issued to create a file of a few megabytes.</p>
<p>This was possible because the data access was performed through a series of helper classes that wrapped the EF context and exposed mapped models. While this simplified the data access for most use cases, and helped to encapsulate low-level validation, it was a hindrance for any kind of aggregation or reporting requirement. Essentially the problem boiled down to the <em>SELECT N+1</em> problem on steroids, with a large portion of the object graph steadily loaded into memory.</p>
<p>Wrapping isn’t always a helpful approach…</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/iStock_000033567536Small.jpg"></p>
<p>The answer, having first defined some automated integration tests based on the existing solution, was to avoid using the helpful wrapper/mapper classes and instead write some bespoke EF queries against the underlying data context. I tried to strike a balance between making as few queries as possible without becoming unmaintainable or requiring too many joins. And each query, rather than returning the entire entity, instead projected only the required properties into some anonymous types. A little in-memory post-processing then turned these projections into the desired output format.</p>
<p>The end result? A process that originally made over 35,000 database queries and took 45 seconds was reduced to one that required just 7 queries and completed in around 0.45 seconds. Nice.</p>
]]></content:encoded>
    </item>
    <item>
      <title>One Reason Why NCrunch Is Worth The Cost</title>
      <link>https://blog.iannelson.uk/one-reason-why-ncrunch-is-worth-the-cost/</link>
      <pubDate>Tue, 22 Apr 2014 21:25:50 +0000</pubDate>
      <guid>https://blog.iannelson.uk/one-reason-why-ncrunch-is-worth-the-cost/</guid>
      <description>&lt;p&gt;I have been merrilly using &lt;a href=&#34;http://www.ncrunch.net/&#34;&gt;NCrunch&lt;/a&gt; – an “automated concurrent testing tool for Visual Studio” – for almost three years now. I ponied up for a paid license when it made the transition from beta to RTM, and I recently shelled out again for an upgrade to version 2.&lt;/p&gt;
&lt;p&gt;Why?! Why do this when plenty of test runners are free, or bundled with software I already own such as ReSharper and Visual Studio itself?&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I have been merrilly using <a href="http://www.ncrunch.net/">NCrunch</a> – an “automated concurrent testing tool for Visual Studio” – for almost three years now. I ponied up for a paid license when it made the transition from beta to RTM, and I recently shelled out again for an upgrade to version 2.</p>
<p>Why?! Why do this when plenty of test runners are free, or bundled with software I already own such as ReSharper and Visual Studio itself?</p>
<p>To answer that question I sorely wanted to write another “list post” as a follow-up to <em><a href="https://blog.iannelson.uk/12-reasons-why-i-love-unit-tests/">12 Reasons Why I Love Unit Tests</a></em> but as my draft progressed and my thoughts crystallised in front of me on the screen, I realised that all of the points I was trying to convey ultimately boil down to the same one reason:</p>
<h2 id="ncrunch-saves-me-time">NCrunch Saves Me Time</h2>
<p>I missed out on the age of the punchcard, thank goodness. I don’t think I could have coped with the torpid feedback cycles that software developers of that era had to endure. Bob Martin describes the multi-day process entertainingly in his excellent book <a href="http://amzn.to/1lQjkZT"><em>The Clean Coder</em></a> – programs written on coding forms with a #2 pencil, typed up by key-punchers, desk-checked, loaded by the computer operators, and ultimately returned wrapped in a rubber band with a printout showing a compile error. It must have been utterly soul-destroying.</p>
<p>Despite having started my own software development career a couple of decades after the use of punchcards died out, I have still been witness to several advancements that have reduced feedback cycle time, enabling complex yet high-quality systems to be developed and enhanced in a fraction of the time that was once possible. I’m thinking of techniques such as <a href="https://blog.iannelson.uk/ndepend/">static code analysis</a>, continuous integration, continuous delivery and of course the widespread adoption of automated testing.</p>
<h2 id="ncrunch-facilitates-the-tdd-discipline">NCrunch Facilitates the TDD Discipline</h2>
<p>Done well, Test-Driven Development is a powerful, professional, technique that allows us to develop and maintain solid, clean code in a short time. But without the right tooling to support this process, TDD can feel painful, too much stop-start while we wait on the compiler or test runner, especially if we are deliberately using baby-step techniques such as “Fake It Till You Make It” or “Stair-Step Tests”. Consider the steps we might typically intend to take:</p>
<ol>
<li>Write a test that doesn’t compile.</li>
<li>Try to compile the code.</li>
<li>Write a stub member to make the test compile.</li>
<li>Compile</li>
<li>Run the tests and watch them fail.</li>
<li>Fake the result.</li>
<li>Compile</li>
<li>Run the tests and watch them pass.</li>
<li>Add a second test to force the code to fail again.</li>
<li>Compile</li>
<li>Run the tests and watch them fail.</li>
<li>Add a more general implementation of the code.</li>
<li>Compile</li>
<li>Run the tests and watch them pass.</li>
<li>Refactor</li>
<li>Compile</li>
<li>Run the tests and watch them pass.</li>
</ol>
<p>Is it any wonder that we are tempted to cut corners when it comes to TDD?!</p>
<p>But consider what this process is like when the tooling does all the grunt work and context-switching for you in the background:</p>
<ol>
<li>Write a test that doesn’t compile.</li>
<li>Write a stub member to make the test compile.</li>
<li>Fake the result.</li>
<li>Add a slightly more specific test to force the code to fail again.</li>
<li>Add a more general implementation of the code.</li>
<li>Refactor</li>
</ol>
<p>We are left with just the “interesting” steps, and the TDD process now flows naturally and instinctively. The IDE takes responsibility for constantly compiling and testing the code, and corners are less likely to be cut.</p>
<p>I love this process. I like to make use of the big inexpensive monitors that the twenty-first century has blessed us with. I open up a window for the tests, another for the system under test, and one each for the NCrunch Tests and NCrunch Processing Queue windows – and then I have all I need on a single screen to code tight, well-tested, code at a quick pace:</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunch.png"></p>
<p>For me it is this – the facilitation of TDD and the instant feedback – that is the killer benefit of NCrunch. The remaining features that I mention below are merely the icing on the cake, but they do all serve to save me time.</p>
<h2 id="ncrunch-puts-real-time-code-coverage-data-in-my-face">NCrunch Puts Real-Time Code-Coverage Data In My Face</h2>
<p>Time was, we would gather test coverage metrics using tools like NCover or dotCover, perhaps running as part of a CI build on the server. Once in a while someone might even deem it worthwhile having a look at the output!</p>
<p>With NCrunch, the code coverage is displayed right there in the IDE on a line-by-line basis as you code, with any uncovered lines sticking out like a sore thumb.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/Uncovered.png"></p>
<p>If you really want to see overall metrics for the solutions, NCrunch also provides a separate Metrics window.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchMetrics.png"></p>
<h2 id="ncrunch-doesnt-make-me-hunt-for-error-messages">NCrunch Doesn’t Make Me Hunt For Error Messages</h2>
<p>When my code fails a test assertion, or even when it fails to compile, the reasons, just like the code-coverage data, are right there in my face, almost immediately. I don’t have to go hunting for the problem, I can access the compiler errors or stack traces for failed assertions without leaving the window in which I’m coding.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchExceptions.pn"></p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchAssertions.png"></p>
<h2 id="ncrunch-highlights-slow-running-lines-of-code">NCrunch Highlights Slow-Running Lines of Code</h2>
<p>Powerful, expensive performance profiling tools such as Redgate Ants Performance Profiler and JetBrains dotTrace are often used to find bottlenecks in code that has already been developed and is often in production.</p>
<p>NCrunch, as a somewhat unsung benefit, almost absent-mindedly gathers performance metrics as it continuously executes my tests, and highlights slow lines of code with a different coloured marker.</p>
<p>Given the existence of appropriate tests, this means that my attention is drawn to potential problems before the code is even committed to the source control repository.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchSlow.png"></p>
<h2 id="ncrunch-is-super-configurable">NCrunch is Super-Configurable</h2>
<p>Constant background compiling and test running obviously requires some significant computing resources. Fortunately, NCrunch is super-configurable in this regard. It’s easy to specify such things as the number of CPU cores that should be assigned to NCrunch, and the maximum number of processing threads. Not <em>all</em> the tests have to be run continuously – tests irrelevant to the work being undertaken can be ignored, or NCrunch can intelligently execute only those tests it determines are affected by changes.</p>
<p>Today I was working on a small corner of a large .NET solution (60+ projects), so I deliberately told NCrunch to ignore most of those compo<br>
nents entirely, leaving it free to devote all its attention on the few assemblies I was currently enhancing. This resulted in faster feedback, saving me time!</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchModes.png">
<img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchConfig1.png">
<img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchConfig2.png"></p>
<h2 id="ncrunch-lets-me-utilise-other-computers-resources">NCrunch Lets Me Utilise Other Computers’ Resources</h2>
<p>The latest version of NCrunch even lets me utilise the resources of any other computers or VMs that I may have at my disposal, enslaving them into my army of code compilers and test runners – buwahahahaha!</p>
<p>In the screenshots below you can see that I’ve sneakily added my kids’ laptop as another node in my NCrunch cluster, to offload some of the work from my development machine.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchDistributed.png"></p>
<h2 id="what-more-can-i-say">What More Can I Say?</h2>
<p>NCrunch rocks. It has spoiled me for IDEs that don’t offer continuous compilation and testing functionality. The effortless manner in which it gives me feedback on the code and tests that I write every day is one of the things that keeps me interested in improving my .NET development skills after well over a decade at the code face.</p>
<p><em>Disclaimer: Ian Nelson has not received any incentive or inducement to publish the commentary above. I have no material connection with Remco Mulder or Remco Software, other than as a paying customer of the NCrunch product. Some of the links in this post contain my Amazon Associates ID, and I may receive commission if you make a purchase through them.</em></p>
]]></content:encoded>
    </item>
    <item>
      <title>Schoolboy Error Of The Day</title>
      <link>https://blog.iannelson.uk/schoolboy-error-of-the-day/</link>
      <pubDate>Wed, 17 Aug 2011 08:08:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/schoolboy-error-of-the-day/</guid>
      <description>&lt;p&gt;This dumb mistake just cost me an hour spelunking around in the debugger:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var status = source.Substring(source.LastIndexOf(&amp;quot;/&amp;quot; + 1));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(where source is e.g. “&lt;a href=&#34;http://foo.com/status/all-is-good&#34;&gt;http://foo.com/status/all-is-good&lt;/a&gt;“)&lt;/p&gt;
&lt;p&gt;Fortunately the ramifications were picked up in the acceptance tests, but the root cause wasn’t at all obvious from such a high level.&lt;/p&gt;
&lt;p&gt;Lesson for the day – code is never too trivial to warrant unit testing.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This dumb mistake just cost me an hour spelunking around in the debugger:</p>
<p><code>var status = source.Substring(source.LastIndexOf(&quot;/&quot; + 1));</code></p>
<p>(where source is e.g. “<a href="http://foo.com/status/all-is-good">http://foo.com/status/all-is-good</a>“)</p>
<p>Fortunately the ramifications were picked up in the acceptance tests, but the root cause wasn’t at all obvious from such a high level.</p>
<p>Lesson for the day – code is never too trivial to warrant unit testing.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Entity Framework Week Part 5: Concluding Thoughts</title>
      <link>https://blog.iannelson.uk/entity-framework-week-part-5-concluding-thoughts/</link>
      <pubDate>Fri, 11 Mar 2011 09:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/entity-framework-week-part-5-concluding-thoughts/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the fifth in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. &lt;a href=&#34;https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/&#34;&gt;The introductory post in the series is here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I am lucky to have had the opportunity to spend a time-boxed period playing with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb399572.aspx&#34;&gt;Entity Framework&lt;/a&gt; Code-First in a real-world scenario, and to get paid for the privilege! I now have a clearer understanding of how it has progressed during the last few years, what its strong points are, and where it still has shortcomings compared to the much more mature &lt;a href=&#34;http://www.nhforge.org&#34;&gt;NHibernate&lt;/a&gt; framework.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>This is the fifth in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. <a href="https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/">The introductory post in the series is here</a>.</em></p>
<p>I am lucky to have had the opportunity to spend a time-boxed period playing with <a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a> Code-First in a real-world scenario, and to get paid for the privilege! I now have a clearer understanding of how it has progressed during the last few years, what its strong points are, and where it still has shortcomings compared to the much more mature <a href="http://www.nhforge.org">NHibernate</a> framework.</p>
<h2 id="the-positives">The Positives</h2>
<p>I have to say that after a week of getting through the pain barrier and the initial denial of working with an unfamiliar ORM, I have reached a level of understanding and acceptance with Entity Framework. It really isn’t all that bad (at least the Code-First flavour), and if you don’t stray too far from its rigid way of thinking it will help you to get a solution up and running quickly and reliably. It’s certainly a far preferable option than mucking about with ADO.NET and stored bloody procedures, that’s for sure.</p>
<p>The whole process of configuration and initialization is straightforward and pain-free, with the derived DbContext providing a out-of-the-box implementation of Unit of Work already to be referenced from your consuming code. Easy.</p>
<p>Querying the model is 99% unadulterated LINQ, with the occasional call to Include to perform some eager fetching – what could be simpler?</p>
<p>I’m also unashamedly impressed with how easily EF can be used to power <a href="http://www.asp.net/dynamicdata">ASP.NET Dynamic Data</a> sites, and RESTful WCF Data Services. Nice.</p>
<h2 id="the-negatives">The Negatives</h2>
<p>I found that the real pain of working with Entity Framework only surfaces when you wish to start tuning its behaviour in any way – you find that it’s a big black box with few extensibility points. It performs cunning tricks effortlessly, but wields its power in a largely indiscriminate manner. By comparison, NHibernate can achieve even greater things, but requires you to explicitly invoke these powers.</p>
<p>I am reminded of <a href="http://ayende.com/Blog/archive/2009/04/27/nhibernate-futures.aspx#30714">a response Ayende gave</a> when asked why NH Futures was not the default behaviour – “NHibernate tries hard not to make too much magic”. I thought it sounded glib at the time, but having lived with EF for a while, I now understand why this is preferable.</p>
<p>Most of the NHibernate features that are missing from Entity Framework are related to performance – such as the ability to configure query batching, write batching, bulk operations, extra-lazy properties, and second-level caching. These are the features you’ll miss the most when you’re some way into a project, perhaps not until it’s in production and scalability issues arise.</p>
<p>I also feel the CTP5 of EF code-first is a little way off offering true support for persistence ignorance and POCO, having experienced a number of issues that required me to change my domain model, database schema, and application code.</p>
<h2 id="additional-resources">Additional Resources</h2>
<p>Here are a few of the resources that I found particularly useful during my EF week:</p>
<ul>
<li><a href="http://amzn.to/1ffRzv4">Programming Entity Framework, Second Edition</a></li>
<li><a href="http://dotnetslackers.com/articles/ado_net/A-Feature-driven-Comparison-of-Entity-Framework-and-NHibernate-Multiple-Databases.aspx">Dino Esposito – A Feature-Driven Comparison of EF and NH</a></li>
<li><a href="http://blogs.msdn.com/b/adonet/">ADO.NET Team Blog</a></li>
<li><a href="http://blogs.msdn.com/b/adonet/archive/2011/01/27/using-dbcontext-in-ef-feature-ctp5-part-1-introduction-and-model.aspx">Using DbContext in EF Feature CTP5 – a series of 12 blog posts</a></li>
<li><a href="http://blog.davidebbo.com/2011/01/using-dynamic-data-with-ef-code-first.html">David Ebbo – Using Dynamic Data With EF Code First and NuGet</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Entity Framework Week Part 4: Features and Further Investigations</title>
      <link>https://blog.iannelson.uk/entity-framework-week-part-4-features-and-further-investigations/</link>
      <pubDate>Thu, 10 Mar 2011 09:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/entity-framework-week-part-4-features-and-further-investigations/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the fourth in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. &lt;a href=&#34;https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/&#34;&gt;The introductory post in the series is here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I didn’t want this series of posts to descend into a point-scoring &lt;a href=&#34;http://www.nhforge.org&#34;&gt;NHibernate&lt;/a&gt;-versus-&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb399572.aspx&#34;&gt;Entity Framework&lt;/a&gt; comparison, but…&lt;/p&gt;
&lt;p&gt;I now have a basic proof-of-concept up and running, with my client’s nascent application now being powered by Entity Framework Code-First CTP5 rather than a hand-rolled DAL. So, I had some time to consider future functional and non-functional requirements that the team would be asked to develop and support, and investigate how EF would meet the challenge.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>This is the fourth in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. <a href="https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/">The introductory post in the series is here</a>.</em></p>
<p>I didn’t want this series of posts to descend into a point-scoring <a href="http://www.nhforge.org">NHibernate</a>-versus-<a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a> comparison, but…</p>
<p>I now have a basic proof-of-concept up and running, with my client’s nascent application now being powered by Entity Framework Code-First CTP5 rather than a hand-rolled DAL. So, I had some time to consider future functional and non-functional requirements that the team would be asked to develop and support, and investigate how EF would meet the challenge.</p>
<h2 id="caching">Caching</h2>
<p>I was genuinely surprised to learn that Entity Framework still doesn’t include any out-of-the-box support for integrating second-level caching, for example to cache reference data. It seems there is a body of opinion stating that caching should not be the responsibility of the data access layer. I disagree, and I think this is one of the major benefits NHibernate still has over Entity Framework, with its multiple flexible and configurable second-level cache providers.</p>
<h2 id="targeting-alternative-providers-sqlite">Targeting Alternative Providers (SQLite)</h2>
<p>When working with NHibernate, I often target <a href="http://www.sqlite.org">SQLite</a> for fast integration tests against an in-memory database, rather than maintaining a testing version of the MSSQL/Oracle databases that my applications usually use for their bitbucket. I was pleased to see the discussions on the System.Data.SQLite page suggesting that this approach is possible with Entity Framework too, but I didn’t spend any time attempting to get this working.</p>
<h2 id="auditing-functionality">Auditing Functionality</h2>
<p>Entity Framework does not appear to support the rich events and listeners model that is offered by NHibernate and frequently used to develop application auditing functionality. The recommended solution to achieve this scenario is to override the virtual SaveChanges method on DbContext and add validation and auditing logic there. For more details, see <a href="http://my.safaribooksonline.com/book/software-engineering-and-development/9780596807276/working-with-object-services/261">page 261 of Programming Entity Framework</a>.</p>
<h2 id="bulk-operations">Bulk Operations</h2>
<p>I have not yet encountered any Entity Framework support for bulk update/delete operations akin to NHibernate’s <a href="http://ayende.com/blog/archive/2009/05/28/nhibernate-ndash-executable-dml.aspx">Executable DML</a> functionality. Such requirements are usually relatively rare, but it’s a shame to have to fall back to writing stored procedures for relatively simple operations which can be described in terms of the domain model.</p>
<h2 id="query-batching">Query Batching</h2>
<p>There does not appear to be any way to do query batching in Entity Framework, as per <a href="http://ayende.com/blog/archive/2009/04/27/nhibernate-futures.aspx">NHibernate Futures</a>. Multiple queries result in multiple network trips to the database, sadly. Similarly, there’s no support for write batching and batched collection loads.</p>
<h2 id="concurrency-and-versioning">Concurrency and Versioning</h2>
<p>Entity framework supports optimistic concurrency. <a href="http://my.safaribooksonline.com/book/software-engineering-and-development/9780596807276/planning-for-concurrency-problems/659">Chapter 23 of Programming Entity Framework</a> explains in detail how this can be configured and utilised by your application. Entity Framework also supports rowversion fields for concurrency checks.</p>
<h2 id="extra-lazy-properties">Extra-Lazy Properties</h2>
<p>Unlike NHibernate, Entity Framework currently has no notion of “extra-lazy” properties. Requesting the Count of a child collection (e.g. Order.Lines.Count) will therefore trigger the loading of all entities (Lines) in the child collection. Not nice. Yes, we can work around this by making the appropriate count query at a higher level but it’s much nicer to be able to traverse the domain model relationships and let persistence ignorance work it’s magic.</p>
<h2 id="integration-with-the-wider-net-stack">Integration with the Wider .NET Stack</h2>
<p>To my mind, one of the key selling points of Entity Framework over NHibernate is its out-of-the-box integration with other areas of the .NET stack – notably the ability to power <a href="http://www.asp.net/dynamicdata">ASP.NET Dynamic Data</a> sites (which are great for simple pages to maintain reference data) and <a href="http://msdn.microsoft.com/en-us/data/bb931106">WCF Data Services</a>.</p>
<h2 id="query-techniques">Query Techniques</h2>
<p>NHibernate offers a world of choice when it comes to methods for querying the model: HQL, Criteria, QueryOver, LINQ, Named Queries, etc. These each offer a plethora of possible options and tweaks including query caching, batching and futures. By comparison, Entity Framework offers a comprehensive LINQ provider (with decent extensions to specify eager-loading of child entities), or Entity SQL. And that’s your lot.</p>
<p>By the end of my fourth day, I had a working proof-of-concept using Entity Framework Code First to power my client’s application, and I had a good idea of how suitable it was to meet future requirements lurking in the product backlog.</p>
<p>In the <a href="https://blog.iannelson.uk/entity-framework-week-part-5-concluding-thoughts/">fifth and final part of this series of posts</a>, I’ll write some concluding thoughts on my overall experiences spending a week with Entity Framework.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Entity Framework Week Part 3: Runtime Issues Encountered</title>
      <link>https://blog.iannelson.uk/entity-framework-week-part-3-runtime-issues-encountered/</link>
      <pubDate>Wed, 09 Mar 2011 09:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/entity-framework-week-part-3-runtime-issues-encountered/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the third in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. &lt;a href=&#34;https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/&#34;&gt;The introductory post in the series is here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Having configured and initialized &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb399572.aspx&#34;&gt;Entity Framework&lt;/a&gt;, and tweaked the mappings, by Day 3 I was all set to start consuming my shiny new DbContext implementation from the application code, and actually get some CRUD work done. Not unexpectedly, I hit a few issues along the way…&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>This is the third in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. <a href="https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/">The introductory post in the series is here</a>.</em></p>
<p>Having configured and initialized <a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a>, and tweaked the mappings, by Day 3 I was all set to start consuming my shiny new DbContext implementation from the application code, and actually get some CRUD work done. Not unexpectedly, I hit a few issues along the way…</p>
<h2 id="proxy-generation">Proxy Generation</h2>
<p>As a long-term <a href="http://www.nhforge.org">NHibernate</a> user, I habitually mark all members on my domain classes as virtual, since this is a requirement for entities to be replace at runtime by proxies. Remember that NHibernate is a port from the Java world, where all instance methods are virtual by default.</p>
<p>Now, this habit led to some unexpected behaviour when I attempted to use Entity Framework to persist the same domain objects, namely exception messages such as:</p>
<blockquote>
<p>The property ‘Foo’ on type ‘Bar_B6089AE40D178593955F1328A70EAA3D8F0F01DDE9F9FBD615F60A34F9178B94’ cannot be set because the collection is already set to an EntityCollection.</p></blockquote>
<p>Clear as mud, eh? A little Googling eventually unearthed the following posts from other people experiencing this issue:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/4069563/why-is-my-entity-framework-code-first-proxy-collection-null-and-why-cant-i-set-i">Why is my Entity Framework Code First proxy collection null and why can’t I set it?</a></li>
<li><a href="http://stackoverflow.com/questions/3858922/code-first-adding-to-collections-how-to-use-code-first-with-repositories-advice">Code First adding to collections? How to use Code First with repositories? Advice me please</a></li>
<li><a href="http://social.msdn.microsoft.com/Forums/en/adonetefx/thread/99d8d4a1-5ab1-42dc-b9db-5087be02162d">Code First EF4 with N-Tier.. I’m really stuck on this one issue</a></li>
</ul>
<p>This latter post on the MSDN forums includes the following explanation from one of the guys on the Entity Framework team:</p>
<blockquote>
<p>“If you make all your properties virtual then EF will generate proxy classes at runtime that derives from your POCO classed, these proxies allow EF to find out about changes in real-time rather than having to capture the original values of your object and then scan for changes when you save (this is obviously has performance and memory usage benefits but the difference will be negligible unless you have a large number of entities loaded into memory). These are known as ‘change tracking proxies’, if you make your navigation properties virtual then a proxy is still generated but it is much simpler and just includes some logic to perform lazy loading when you access a navigation property.</p>
<p>Because your original code was generating change tracking proxies, EF was replacing your collection property with a special collection type to help it find out about changes. Because you try and set the collection back to a simple list in the constructor you are getting the exception.</p>
<p>Unless you are seeing performance issues I would follow Terrence’s suggestion and just remove ‘virtual’ from your non-navigation properties.”</p></blockquote>
<p>This feels a little bit strange, and I’m not convinced that we are really getting persistence ignorance if we experience differing behaviour depending on whether or not we have chosen to make all our members virtual. I haven’t invested much time looking into the benefits of these “Change-Tracking Proxies”, or how it is possible to utilise these without causing the “collection is already set to an EntityCollection” exception. I just did what the man said and removed the virtual keyword from most non-navigation properties.</p>
<h2 id="a-runtime-exception-when-lazy-loading">A Runtime Exception When Lazy-Loading</h2>
<p>At one point I experienced an exception message along the lines of:</p>
<blockquote>
<p>“Entities in ‘CodeFirstContainer_Sessions’ participate in the ‘Session_Season’ relationship. 0 related ‘Session_Season_Target’ were found. 1 ‘Session_Season_Target’ is expected.”</p></blockquote>
<p>This was caused by my navigation property (Session.Season) not having been set as virtual, so no proxy was being created.</p>
<p>Incidentally, it is worth highlighting that lazy-loading must occur within the scope of an open DbContext (i.e. within the Unit of Work). It is not reasonable to expect to transparently load the navigation property after the database connection has been closed (this is analogous to attempting to lazy-load in NHibernate after closing the Session).</p>
<h2 id="cascades">Cascades</h2>
<p>In NHibernate, cascading saves/updates/deletes have to be specified manually on all foreign key relationships – the default behaviour is not to cascade any changes when committing changes, which often leads to newcomers experiencing an error message “not-null property references a null or transient value”.</p>
<p>Entity Framework takes a more convention-based approach and assumes that all saves and updates should cascade. So, if you save a shiny new Order with an associated Address and a handful of Lines, Entity Framework will determine that it should first insert the Address row, then the Order row, and then each Line row. Sweet. Updates similarly cascade. Assuming you are happy with this behaviour (which seems sensible), then all should be well.</p>
<p>Deletes, on the other hand, are a bit strange. Entity Framework will not take responsibility for cascading a delete in the database – it expects that you will achieve this by setting a cascading delete on the foreign key relationship in the RDBMS.</p>
<p>Having said this, if you delete a parent entity in Entity Framework, it <em>will</em> attempt to issue delete statements for any child entities which have been loaded into the current DbContext, but it will not initialize any child entities which have not yet been loaded. This may lead to the RDBMS throwing foreign key constraint violation exceptions if a cascading delete has not been specified. For more details about how cascade delete “works” in Entity Framework, <a href="http://blogs.msdn.com/b/alexj/archive/2009/08/19/tip-33-how-cascade-delete-really-works-in-ef.aspx">see this blog post</a>.</p>
<p>Personally, I think this behaviour is pretty shoddy, but there you have it! Forewarned is forearmed.</p>
<p>In light of this behaviour I had to make modifications to the database schema to set cascading deletes on all the appropriate foreign key relationships. For many line-of-business applications, deletes are actually pretty rare events, and in the short term I suspect this issue is more likely to be encountered when clearing down data in integration tests than in actual application use.</p>
<h2 id="initializing-child-objects-on-domain-entities">Initializing Child Objects on Domain Entities</h2>
<p>I habitually add code to the constructors of domain entities to initialise child entities to sensible defaults – I find it helps to ensure that objects are always in a valid state, and reduces the likelihood of encountering an unhandled NullReferenceException. So, for example, I would usually have something like this:</p>



  

<script src="https://gist.github.com/ianfnelson/3de705bc2eed6a0a8cd5.js?file=EF3_1.cs"></script>
<p>Unfortunately, when using this approach with Entity Framework, I found that when loading an existing Order which has an associated Address, the Order.Address object was always reset to its default.</p>
<p>Now, I realise that making calls to virtual members in a constructor is not really a good idea (heaven knows Resharper and Coderush have both nagged me about it often enough), but NHibernate never had a problem with<br>
this approach. Nevertheless, I tried to do things properly and replaced the automatic properties with backing fields….</p>



  

<script src="https://gist.github.com/ianfnelson/3de705bc2eed6a0a8cd5.js?file=EF3_2.cs"></script>
<p>But still no dice. I then tried putting initialization logic in the property’s getter….</p>



  

<script src="https://gist.github.com/ianfnelson/3de705bc2eed6a0a8cd5.js?file=EF3_3.cs"></script>
<p>But nothing worked. Every time I loaded an Order, the Order.Address object was reset back to its default instead of containing the data loaded from the database.</p>
<p>This is quite frustrating and as yet I haven’t been able to find a workaround, other than to abandon my plans to perform object initialization in the domain model and instead handle it in the service layer, with all the resultant null-checking code that will ensue.</p>
<p>While trying to find a solution, I did stumble across this comment from Rowan Miller that “More flexibility in how we interact with classes is a common ask for EF and our team is looking at how we can support this at the moment.”   Are we asking for flexibility? I thought we were just asking for the persistence ignorance that had long been promised.</p>
<p>Despite these issues, in three short days I had gone from knowing next to nothing about Entity Framework 4 Code first, to using it to perform almost all of the data access required by a small application. In the <a href="https://blog.iannelson.uk/entity-framework-week-part-4-features-and-further-investigations/">fourth part of this series</a> I’ll consider some of the additional features and application requirements that I would expect an ORM to handle, and see how EF meets the challenge.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Entity Framework Week Part 2: Conventions and Fluent Mappings</title>
      <link>https://blog.iannelson.uk/entity-framework-week-part-2-conventions-and-fluent-mappings/</link>
      <pubDate>Tue, 08 Mar 2011 09:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/entity-framework-week-part-2-conventions-and-fluent-mappings/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the second in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. &lt;a href=&#34;https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/&#34;&gt;The introductory post in the series is here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As mentioned in yesterday’s post, I was attempting to use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb399572.aspx&#34;&gt;Entity Framework&lt;/a&gt; Code-First CTP5 to map an existing domain model to an existing database schema. Fortunately the project was in its infancy and there was a high degree of cohesion between the two models. I therefore didn’t anticipate too many difficulties ahead – the occasional naming discrepancy to resolve, and table-per-hierarchy mappings that would need their discriminators specifying – nothing too complicated really. I hoped to make as few changes as possible to either the database schema or domain model.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>This is the second in a series of five posts recounting my experiences using Entity Framework Code-First to replace ADO.NET and stored procedures in a client’s existing application. <a href="https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/">The introductory post in the series is here</a>.</em></p>
<p>As mentioned in yesterday’s post, I was attempting to use <a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a> Code-First CTP5 to map an existing domain model to an existing database schema. Fortunately the project was in its infancy and there was a high degree of cohesion between the two models. I therefore didn’t anticipate too many difficulties ahead – the occasional naming discrepancy to resolve, and table-per-hierarchy mappings that would need their discriminators specifying – nothing too complicated really. I hoped to make as few changes as possible to either the database schema or domain model.</p>
<p>Entity Framework Code-First uses a set of conventions to “discover” the mappings from domain objects to database. This is broadly analogous to James Gregory’s Fluent NHibernate <a href="http://wiki.fluentnhibernate.org/Auto_Mapping">AutoMapping</a> functionality.</p>
<p>As with Fluent NHibernate, it is possible to add custom conventions, and to manually override mappings for specific properties which deviate from the conventions. It is also possible to remove existing conventions.</p>
<p>All of these modifications to the model mappings are affected by overriding the virtual OnModelCreating method in our concrete implementation of DbContext. I was initially worried about the sheer volume of code that might be included in this method, and was relieved to discover that mapping overrides related to particular entities can be separated out into the constructor of generic implementations of EntityTypeConfiguration, not unlike the generic ClassMap in Fluent NHibernate.</p>
<h2 id="custom-conventions">Custom Conventions</h2>
<p>In the domain model I was working with, all entities were derived from an abstract base Entity class which defined an integer Id property. By contrast, the primary keys on the database tables were all prefixed with the name of the table/entity. Neither of these situations are ideal, but nor are they all that unusual, and I sought a way of “teaching” this convention to our custom EF context.</p>
<p>It took me some time to discover that custom conventions are even possible in CTP5, and I had initially resigned myself to manually overriding the names of each and every primary key property. It was only through stumbling upon <a href="http://blogs.msdn.com/b/adonet/archive/2011/01/10/ef-feature-ctp5-pluggable-conventions.aspx">this post on the ADO.NET team blog</a> that I found what I was looking for. Note that this post does include the caveat “There are a number of rough edges and the API surface is likely to change”.</p>
<p>My first impression is that custom Entity Framework conventions could turn out to be far more powerful than those offered by Fluent NHibernate, but they are also trickier to develop, requiring an understanding of the valid options for the two generic parameters that IConfigurationConvention can take, and what actions should be taken by the custom convention.</p>
<p>Still, after a little trial and error I was able to write the custom primary key convention that I required:</p>



  

<script src="https://gist.github.com/ianfnelson/7ec3a22c992425ebe555.js?file=EF2_1.cs"></script>
<p>I was disappointed that I had to insert a guard clause to ignore this convention for the concrete subclasses of hierarchies that are mapped using table-per-hierarchy (i.e. ProductFeature and ProductInsert). Given time I would hope to find a generic way of achieving this convention that doesn’t require hardcoded references to specific Domain objects from within the convention definition.</p>
<p>Compare and contrast with the equivalent code for Fluent NHibernate:</p>



  

<script src="https://gist.github.com/ianfnelson/7ec3a22c992425ebe555.js?file=EF2_2.cs"></script>
<p><strong>Updated:</strong></p>
<p>Since I wrote the section above, the ADO.NET team have <a href="http://blogs.msdn.com/b/adonet/archive/2011/03/02/ef-4-1-is-coming-dbcontext-api-amp-code-first-rtw.aspx">announced details of the forthcoming Entity Framework 4.1 Release Candidate</a>, which removes this ability add conventions:</p>
<blockquote>
<p>“This was a very painful decision but we have decided to remove the ability to add custom conventions for our first RC/RTW. It has become apparent we need to do some work to improve the usability of this feature and unfortunately we couldn’t find time in the schedule to do this and get quality up the required level. You will still be able to remove our default conventions in RC/RTW.”</p></blockquote>
<p>For what it’s worth, I think this was the right decision to make. A lack of “pluggable” conventions is slightly disappointing, but it can easily be worked around by making the appropriate overrides with the fluent mappings. Better to hold off an nail an API that’s both powerful and usable than go too soon with something that’s liable to confuse and confound.</p>
<h2 id="removal-of-default-conventions">Removal of Default Conventions</h2>
<p>Another nice feature described in the <a href="http://blogs.msdn.com/b/adonet/archive/2011/01/10/ef-feature-ctp5-pluggable-conventions.aspx">Pluggable Conventions blog post</a> is the ability to remove some of the default conventions, which I immediately put to good use by disabling the default PluralizingTableNameConvention:</p>



  

<script src="https://gist.github.com/ianfnelson/7ec3a22c992425ebe555.js?file=EF2_3.cs"></script>
<p><em>(I mean, for goodness sake, who in their right mind pluralizes table names anyway? Yes, it’s very impressive that this library knows that the plural of “goose” is “geese”, but it would be more beneficial if that were an extension method on System.String in the BCL rather than being buried in the bowels of System.Data.Entity.Design. Then perhaps the ADO.NET team could be left to get on with developing something more useful, like second-level caching? Sorry, rant over…)</em></p>
<h2 id="fluent-mapping-api">Fluent Mapping API</h2>
<p>Most manual tweaks to the model are fairly straightforward to perform, and there are a good set of examples in <a href="http://blogs.msdn.com/b/adonet/archive/2010/12/14/ef-feature-ctp5-fluent-api-samples.aspx">this post on the ADO.NET team blog</a>.</p>
<p>I did encounter some difficulty with the mapping of one-to-many relationships, which felt quite cumbersome to perform in comparison to the brevity of Fluent NHibernate’s API. Here’s how you’d rename a foreign key on a unidirectional one-to-many relationship in Fluent NHibernate:</p>



  

<script src="https://gist.github.com/ianfnelson/7ec3a22c992425ebe555.js?file=EF2_4.cs"></script>
<p>Whilst in Entity Framework code-first, the equivalent is:</p>



  

<script src="https://gist.github.com/ianfnelson/7ec3a22c992425ebe555.js?file=EF2_5.cs"></script>
<p>To be fair, I think part of this clumsiness arises because Entity Framework is allowing us to define both ends of a bidirectional relationship in a single place, whereas <a href="http://www.nhforge.org">NHibernate</a> requires us to define each end separately. It’s just unfortunate that in unidirectional situations like this example we end up with the <code>WithMany().IsIndependent()</code> noise in the middle of the syntax.</p>
<p>Having learned the odd syntax required to rename these one-to-many foreign keys, I then wasted an inordinate amount of time trying to make this actually work. Many of my waking hours were blighted by an InvalidOperationException (“Sequence contains more than one matching element”) originating from deep within the framework. A quick ferret aro<br>
und on Stack Overflow revealed that I was not the only person currently banging his or her head on this particular brick wall:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/5008479/ef-code-first-ctp5-using-the-name-of-the-property-as-column-name-for-foreign-ke">EF Code First CTP5 – Using the name of the property as column name for foreign key</a></li>
<li><a href="http://stackoverflow.com/questions/4981228/entity-framework-4-ctp-5-self-referencing-many-to-many">Entity Framework 4 CTP 5 Self Referencing Many-to-Many</a></li>
<li><a href="http://stackoverflow.com/questions/4660908/entity-framework-ctp5-fluent-api-rename-column-of-navigation-property">Entity framework (CTP5, Fluent API). Rename column of navigation property</a></li>
</ul>
<p>Eventually <a href="http://stackoverflow.com/questions/5008479/ef-code-first-ctp5-using-the-name-of-the-property-as-column-name-for-foreign-ke/5090600#5090600">Diego Mijelshon figured out what was amiss</a>. It seems the mapping failure was due to the Id property being defined in a base class rather than on the concrete class being mapped. Whether this is intentional behaviour or a bug in the CTP5, I’m not sure, but I worked around this issue by modifying the domain model and ditching the hierarchy of base classes altogether, leaving the Id and other common properties defined only on interfaces. <a href="http://ayende.com/blog/archive/2011/02/21/code-review-guidelines-avoid-inheritance-for-properties.aspx">Ayende would be pleased</a>.</p>
<p>Two days into my adventure, and my database and domain model were happily mapped. In <a href="https://blog.iannelson.uk/entity-framework-week-part-3-runtime-issues-encountered/">part three</a> I’ll look at some of the issues I encountered at runtime, which necessitated further tweaks to the domain model and database.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Entity Framework Week Part 1: Introduction, Configuration and Initialization</title>
      <link>https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/</link>
      <pubDate>Mon, 07 Mar 2011 09:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/</guid>
      <description>&lt;p&gt;In February 2011 I found myself doing some contract development work in a team that was still doing data access using raw ADO.NET and stored procedures. Being the &lt;a href=&#34;http://www.nhforge.org&#34;&gt;NHibernate&lt;/a&gt; fanboy that I am, I naturally attempted to persuade them of the benefits of moving over to NH, even going so far as to develop (in my own time) an NH-powered version of their application.&lt;/p&gt;
&lt;p&gt;My efforts were &lt;em&gt;partially&lt;/em&gt; successful. The team were sold on the idea of using an ORM, but wanted me to develop a second proof of concept using Microsoft ADO.NET &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb399572.aspx&#34;&gt;Entity Framework&lt;/a&gt; rather than NHibernate. This prompted much mirth amongst my FaceBook friends.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In February 2011 I found myself doing some contract development work in a team that was still doing data access using raw ADO.NET and stored procedures. Being the <a href="http://www.nhforge.org">NHibernate</a> fanboy that I am, I naturally attempted to persuade them of the benefits of moving over to NH, even going so far as to develop (in my own time) an NH-powered version of their application.</p>
<p>My efforts were <em>partially</em> successful. The team were sold on the idea of using an ORM, but wanted me to develop a second proof of concept using Microsoft ADO.NET <a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a> rather than NHibernate. This prompted much mirth amongst my FaceBook friends.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/FB_3.png"></p>
<p>I decided to throw myself into the task, and use this opportunity to spend some time getting to grips with Entity Framework in a real-life scenario for a couple of weeks. I figured that in the best-case scenario, I would learn to love EF even more than NH, and bolster my CV. Worst case, I’d hate it but would be moving on to a new contract shortly anyway, so wouldn’t have to live with it for too long. And of course I was getting paid for the experience either way, so what’s not to like?!</p>
<p>A couple of friends rightly suggested that I ought to blog about my experiences, so here we go.</p>
<p>This series of five blog posts details the thoughts and experiences I encountered during my week-long adventure with Entity Framework. It isn’t an EF walkthrough, nor is it a comprehensive EF-vs-NH feature comparison (the web is littered with those).</p>
<ol>
<li><a href="https://blog.iannelson.uk/entity-framework-week-part-1-introduction-configuration-and-initialization/">Introduction, Configuration and Initialization</a></li>
<li><a href="https://blog.iannelson.uk/entity-framework-week-part-2-conventions-and-fluent-mappings/">Conventions and Fluent Mappings</a></li>
<li><a href="https://blog.iannelson.uk/entity-framework-week-part-3-runtime-issues-encountered/">Runtime Issues Encountered</a></li>
<li><a href="https://blog.iannelson.uk/entity-framework-week-part-4-features-and-further-investigations/">Features and Further Investigations</a></li>
<li><a href="https://blog.iannelson.uk/entity-framework-week-part-5-concluding-thoughts/">Concluding Thoughts</a></li>
</ol>
<h2 id="choosing-code-first">Choosing Code-First</h2>
<p>When last I had a quick play with Entity Framework in the summer of 2008, it was very IDE and database-driven – the development process entailed dragging tables onto a designer surface which generated partial classes to represent objects, etc. Yuk! The lack of support for a domain-driven, persistence-ignorant approach was a real turn-off for me, prompting me to add my name to the list of signatories on the infamous <a href="http://efvote.wufoo.com/forms/ado-net-entity-framework-vote-of-no-confidence/">ADO.NET Entity Framework Vote of No Confidence</a>.</p>
<p>It was therefore a relief to discover that Entity Framework now supports a “Code-First” development paradigm, whereby EF can be used like a traditional ORM to fluently map an existing domain model to an existing database. At the time, this was still available only as a Community Technology Preview (<a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=35adb688-f8a7-4d28-86b1-b6235385389d">CTP5</a>), but given my remit was to introduce EF to an existing solution, it was a no-brainer to choose this option for the proof of concept, even though this would potentially leave me exposed to bugs and breaking API changes.</p>
<h2 id="configuration">Configuration</h2>
<p>Configuring Entity Framework seemed a lot easier than the equivalent procedure with NHibernate, filled as it is with esoteric options which can often be somewhat perplexing to NH newbies. With EF, the walkthroughs told me that essentially, all I needed to do was create a subclass of DbContext and Bob would be my mother’s brother. They were right. If anything, it was all too easy, and I wondered how and where I would get the option to configure details such as the second-level cache provider and ADO batch size.</p>
<p>I made use of a constructor overload on DbContext which takes a string parameter called nameOrConnectionString. Initially I attempted to pass into this parameter a connection string obtained from the app.config file using System.Configuration.ConfigurationManager, but this led to error messages along the lines of</p>
<blockquote>
<p>“Unable to determine the provider name for connection of type ‘System.Data.SqlClient.SqlConnection’”</p></blockquote>
<p>It seems that the connection strings used by Entity Framework are not the common or garden connection strings that we know and love, but instead special EF connection strings. Fortunately, a simple remedy to this issue was to instead just pass the connection string <em>name</em> into the exact same parameter. <a href="http://social.msdn.microsoft.com/Forums/eu/adonetefx/thread/8d18825d-7e44-4c7f-9e7d-1e73479fe0e7">See this forum post for more details</a>.</p>
<h2 id="database-initializer-strategies">Database Initializer Strategies</h2>
<p><a href="http://efprof.com">Entity Profiler</a> revealed that Entity Framework was unsuccessfully attempting to access a nonexistent database table called dbo.EdmMetadata. A little light Googling revealed that this is used by Entity Framework to store (perhaps unsurprisingly) metadata about the Entity Data Model. Why does it do this? Presumably so that it can decide at application start up whether code changes to the model require it to automagically make associated changes to the database schema. Some Summer 2010 blog posts from Scotts <a href="http://weblogs.asp.net/scottgu/archive/2010/07/16/code-first-development-with-entity-framework-4.aspx">Guthrie</a> and <a href="http://www.hanselman.com/blog/SimpleCodeFirstWithEntityFramework4MagicUnicornFeatureCTP4.aspx">Hanselman</a> show off the ability of Entity Framework to automatically create and update databases in response to model changes.</p>
<p>Now, this is all very clever and might be fine for hobbyist websites, integration tests and those quintessential “Look – no code!” TechEd presentations, but in an enterprise scenario it’s liable to cause acute apoplexy in DBAs.</p>
<p>Fortunately we can opt to suppress this crazy behaviour altogether by passing a null strategy into DbDatabase.SetInitializer, thus:</p>
<p><code>DbDatabase.SetInitializer&lt;MyAppContext&gt;(null);</code></p>
<p>That was day one over – I was officially up and running in the brave new (to me) world of Entity Framework. In <a href="https://blog.iannelson.uk/entity-framework-week-part-2-conventions-and-fluent-mappings/">part two of this series</a> I’ll take a look at the mapping tweaks I had to make to successfully map our existing domain model to our existing database.</p>
]]></content:encoded>
    </item>
    <item>
      <title>NHibernate and Mapping Aggregates</title>
      <link>https://blog.iannelson.uk/nhibernate-and-mapping-aggregates/</link>
      <pubDate>Thu, 25 Nov 2010 08:11:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/nhibernate-and-mapping-aggregates/</guid>
      <description>&lt;p&gt;A few days ago a friend emailed me the following question regarding NHibernate mappings for a solution he’s currently developing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I have an idea entity that has a collection of comment entities and I need to get the comment count for each idea. I made a massive mistake at the beginning by calling idea.Comments.Count (even worse, I did it in the view!), which due to the collection being lazy-loaded caused about 10 database calls so performance was sluggish even with second level cache. I was therefore wondering how you would do it – would you use HQL and use Comments.size or would you do something differently?”&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>A few days ago a friend emailed me the following question regarding NHibernate mappings for a solution he’s currently developing:</p>
<blockquote>
<p>“I have an idea entity that has a collection of comment entities and I need to get the comment count for each idea. I made a massive mistake at the beginning by calling idea.Comments.Count (even worse, I did it in the view!), which due to the collection being lazy-loaded caused about 10 database calls so performance was sluggish even with second level cache. I was therefore wondering how you would do it – would you use HQL and use Comments.size or would you do something differently?”</p></blockquote>
<p>Now, I’ve been pretty busy recently, so before I had opportunity to respond properly, he sent this follow-up:</p>
<blockquote>
<p>&ldquo;After looking for a solution for getting a Comment count back for each Idea, I found using the Nhibernate Formula method does the job – just wanting to make sure I was on the right track in terms of performance etc. My mapping class is as follows:&rdquo;</p></blockquote>
<p>I considered this for a while, and sent the following suggestions:</p>
<blockquote>
<p>“I’m glad to hear you resolved your SELECT N+1 problem but to be honest, I’m not a big fan of using formulas in NH mappings if at all possible, for the following reasons:</p>
<ol>
<li>I try to minimize my use of strings (and especially SQL) so as to make refactorings easier, and lessen the potential for runtime exceptions.</li>
<li>The default NH behaviour will be to evaluate that formula every time an Idea entity is loaded, which might not be desirable and could negatively impact on performance when loading your idea entities. I’m not sure if the recently-added <a href="http://ayende.com/Blog/archive/2010/01/27/nhibernate-new-feature-lazy-properties.aspx">Lazy Properties feature</a> of NH can be applied to these derived properties; if so then that could be used to negate this argument.</li>
<li>I try to avoid putting logic (however simple) in the OR mapping layer, as future developers are unlikely to expect to find it there! I like to reduce the element of surprise in my solutions, and put such logic in the domain layer. I think logic in the OR layer limits options going forward – for example if you subsequently decide all comments have to be moderated, does the CommentCount formula have to be modified to exclude comments awaiting moderation..?</li>
</ol>
<p>So, what would I do? Here are two options, depending on how often you’re using the CommentCount property:</p>
<p>If you’re only using the CommentCount occasionally and only along with a subset of the other properties from Idea, then I would write a specific query returning a projection of the required properties, including this CommentCount aggregate.</p>
<p>I’ve done this in the past where I had a requirement to populate a drop-down list with user names and the number of open work items assigned to each user, for example. I didn’t want or need to maintain an ActiveWorkItemCount property on the user object, I just wanted to do the calculation in one place (incidentally, LINQ made this a doddle).</p>
<p>Conversely, if the CommentCount property is something you’re going to be referencing frequently, then I would denormalise the database and add a CommentCount field to the Idea table. This presumes that you’re in a position to enforce the constraint that new Comments are only added to Ideas through your application (and as you know from <a href="https://blog.iannelson.uk/enterprise-integration-anti-patterns-1-the-shared-database/">my recent blog post</a>, I am very fond of this kind of constraint!). This approach should give the best performance and flexibility, at the expense of irking normalisation fascists.</p>
<p>Typically this would be done by creating AddComment and RemoveComment helper methods on the Idea entity, which can maintain a bidirectional relationship between Idea and Comment in addition to incrementing or decrementing CommentCount accordingly.</p>
<p>This approach will give the best performance, and keeps the logic where it belongs (and where it can be easily extended and tested, as in my earlier hypothetical comment moderation example).</p>
<p>For a good example of code to maintain bidirectional one-to-many class relationships with NHibernate, see pages 39-43 of <a href="http://bit.ly/c9oPqi">NHibernate 3.0 Cookbook</a>.</p>
<p>Hope this helps. As ever, it’s just my opinion, but these two techniques have worked well for me.”</p></blockquote>
<p>What do you think? Are there any other approaches worth considering?</p>
]]></content:encoded>
    </item>
    <item>
      <title>MVC – Where To Put Business Logic?</title>
      <link>https://blog.iannelson.uk/mvc-where-to-put-business-logic/</link>
      <pubDate>Wed, 03 Nov 2010 12:11:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/mvc-where-to-put-business-logic/</guid>
      <description>&lt;p&gt;I just had an email from a friend asking where business logic should go when using MVC – the controller or the model.&lt;/p&gt;
&lt;p&gt;I thought I’d share my reply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think asking whether the business logic should go in the Model or the Controller is a false dichotomy. There are different kinds of business logic, and there’s also the possibility of putting it somewhere else entirely.&lt;/p&gt;
&lt;p&gt;Much business logic does indeed belong in the model, particularly stuff like encapsulating calculations and projections, adding meaning to raw data properties, and ensuring domain objects are maintained in a valid state. I see this as the traditional side of OO design – encapsulating logic and restricting accessibility.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I just had an email from a friend asking where business logic should go when using MVC – the controller or the model.</p>
<p>I thought I’d share my reply:</p>
<blockquote>
<p>I think asking whether the business logic should go in the Model or the Controller is a false dichotomy. There are different kinds of business logic, and there’s also the possibility of putting it somewhere else entirely.</p>
<p>Much business logic does indeed belong in the model, particularly stuff like encapsulating calculations and projections, adding meaning to raw data properties, and ensuring domain objects are maintained in a valid state. I see this as the traditional side of OO design – encapsulating logic and restricting accessibility.</p>
<p>Then at a higher level we have logic which deals with interactions between objects, which are essentially transactions and generally map to business use cases. I contend that this kind of logic belongs in a separate &ldquo;service&rdquo; layer. The interfaces in that service layer can then be referenced by the controllers, which are rendered super-skinny and free of any complex &ldquo;business logic&rdquo;. The same service layer classes can be invoked from other front ends – Web Forms, Win Forms, WCF services, console apps, etc.</p>
<p>As a further aside, I’d recommend use of a view model or DTOs wherever possible rather than exposing the domain model objects up to the views / forms / console / service contracts etc. This encapsulates the domain model and increases the maintainability of the domain model.</p></blockquote>
<p>What do you think?</p>
]]></content:encoded>
    </item>
    <item>
      <title>Testing IoC Registrations</title>
      <link>https://blog.iannelson.uk/testing-ioc-registrations/</link>
      <pubDate>Fri, 09 Apr 2010 14:04:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/testing-ioc-registrations/</guid>
      <description>&lt;p&gt;When I first started writing automated unit tests for my code, I remember getting carried away writing lots of tiny little tests, each with a single Assert. It felt good initially to see all those green ticks, but rapidly became a maintenance headache, and I am now happier having fewer less-brittle tests that do more.&lt;/p&gt;
&lt;p&gt;I think it’s great when tools like &lt;a href=&#34;http://automapper.codeplex.com/&#34;&gt;AutoMapper&lt;/a&gt; provide powerful methods like…&lt;/p&gt;



  

&lt;script src=&#34;https://gist.github.com/ianfnelson/287b94e1e565e3ee7137.js?file=IoC_1.cs&#34;&gt;&lt;/script&gt;
&lt;p&gt;…allowing me to test large swathes of the system configuration with a single, stable test.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>When I first started writing automated unit tests for my code, I remember getting carried away writing lots of tiny little tests, each with a single Assert. It felt good initially to see all those green ticks, but rapidly became a maintenance headache, and I am now happier having fewer less-brittle tests that do more.</p>
<p>I think it’s great when tools like <a href="http://automapper.codeplex.com/">AutoMapper</a> provide powerful methods like…</p>



  

<script src="https://gist.github.com/ianfnelson/287b94e1e565e3ee7137.js?file=IoC_1.cs"></script>
<p>…allowing me to test large swathes of the system configuration with a single, stable test.</p>
<p>I wanted to write a similar test to check that all the necessary system dependencies for my MVC application could be resolved by the IoC container. Here’s what I came up with:</p>



  

<script src="https://gist.github.com/ianfnelson/287b94e1e565e3ee7137.js?file=IoC_2.cs"></script>
<p>A few things to note:</p>
<ol>
<li>I’m configuring my container using the <a href="http://fabiomaulo.blogspot.com/2009/11/guywire.html">GuyWire pattern described by Fabio Maulo</a>.</li>
<li>I’m using ControllerExtensions from the <a href="http://mvccontrib.codeplex.com/Wikipage">MvcContrib project</a> to identify controllers.</li>
<li>I’m accessing the IoC container via the <a href="http://commonservicelocator.codeplex.com">Common Service Locator</a>.</li>
<li>This only tests the dependencies that are referenced by dependency injection, and won’t pick up on any missing registrations that are only referenced via service locator (you’d have to write separate itty-bitty tests to check those registrations).</li>
</ol>
<p>What do you think? How, if at all, do you test your IoC container registrations?</p>
]]></content:encoded>
    </item>
    <item>
      <title>Testing LINQ Queries</title>
      <link>https://blog.iannelson.uk/testing-linq-queries/</link>
      <pubDate>Fri, 09 Apr 2010 13:04:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/testing-linq-queries/</guid>
      <description>&lt;p&gt;I’ve been asked “How do you test LINQ queries?” a couple of times in the past few months, so I thought I’d blog my answer for the benefit of all you lovely people.&lt;/p&gt;
&lt;p&gt;Firstly I should explain how I’ve been doing most of my data access in recent months. I find that the &lt;a href=&#34;http://martinfowler.com/eaaCatalog/repository.html&#34;&gt;Repository pattern&lt;/a&gt;, and particularly the &lt;a href=&#34;http://fabiomaulo.blogspot.com/2009/09/repository-or-dao-repository.html&#34;&gt;.NET implementation described here by Fabio Maulo&lt;/a&gt; meets the vast majority of requirements I have in my applications, and I fall back on additionally using custom DAOs when required.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I’ve been asked “How do you test LINQ queries?” a couple of times in the past few months, so I thought I’d blog my answer for the benefit of all you lovely people.</p>
<p>Firstly I should explain how I’ve been doing most of my data access in recent months. I find that the <a href="http://martinfowler.com/eaaCatalog/repository.html">Repository pattern</a>, and particularly the <a href="http://fabiomaulo.blogspot.com/2009/09/repository-or-dao-repository.html">.NET implementation described here by Fabio Maulo</a> meets the vast majority of requirements I have in my applications, and I fall back on additionally using custom DAOs when required.</p>
<p>So, my service classes can ask the IoC container for instances of <code>IRepository&lt;T&gt;</code>, where <code>IRepository&lt;T&gt;</code> implements <code>IQueryable&lt;T&gt;</code>.</p>
<p>Now, in the best tradition of encapsulation, all but the most trivial of the queries I write against these repositories are defined in extension methods, for example:</p>



  

<script src="https://gist.github.com/ianfnelson/0fd94841097a75fa9d58.js?file=TL1.cs"></script>
<p>Aside from the testability aspect (which I promise I’ll get onto in a second), this approach also helps keep us on the right side of the <a href="http://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a>, as <a href="http://blog.robustsoftware.co.uk/2010/04/linq-and-law-of-demeter.html">Garry Shutler blogged about recently</a>. It also allows for method chaining, allowing us to enact multiple filters and other transformations in a single line of code:</p>



  

<script src="https://gist.github.com/ianfnelson/0fd94841097a75fa9d58.js?file=TL2.cs"></script>
<p>But I digress. I was talking about how to test these LINQ queries. It’s easy really, the trick is knowing that <code>IEnumerable&lt;T&gt;</code> offers an <a href="http://msdn.microsoft.com/en-us/library/bb908285%28v=VS.90%29.aspx"><code>AsQueryable()</code> method</a>. So, we can build up some dummy data in a <code>List&lt;T&gt;</code> before calling <code>AsQueryable()</code> to obtain an object against which the extension method can act. Dead simple. The creation of the test data can even be automated using the open source <a href="http://nbuilder.org/">NBuilder</a> tool.</p>
<p>One caveat – this is merely testing that your LINQ query does what you think it should do, it doesn’t test the behaviour of the underlying LINQ provider. If you’re using, say, the NHibernate LINQ 1.0 provider (which is great but not at all feature-complete) then you’ll also need to write some suitable integration tests, say by testing against the <a href="http://sqlite.org/">Sqlite</a> database engine.</p>
]]></content:encoded>
    </item>
    <item>
      <title>WCF – Global Exception Handling</title>
      <link>https://blog.iannelson.uk/wcf-global-exception-handling/</link>
      <pubDate>Fri, 09 Apr 2010 13:04:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/wcf-global-exception-handling/</guid>
      <description>&lt;p&gt;I’ve done a fair bit of WCF development recently (and amazingly I came out of it relatively unscathed, both psychologically and emotionally). Using Castle Windsor’s WCF Facility helped a great deal, but I still found myself writing a fair bit of infrastructure and plumbing code. I thought I’d blog some of these code snippets lest I forget, and on the offchance they might help others.&lt;/p&gt;
&lt;p&gt;One of the things I wanted to achieve was to ensure that any unhandled exceptions that propagated to the top of the stack were logged. The following custom EndpointBehavior achieves that. I’m using Castle Logging Facility here, but you could of course swap out the logging code for whatever error handling code you require.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I’ve done a fair bit of WCF development recently (and amazingly I came out of it relatively unscathed, both psychologically and emotionally). Using Castle Windsor’s WCF Facility helped a great deal, but I still found myself writing a fair bit of infrastructure and plumbing code. I thought I’d blog some of these code snippets lest I forget, and on the offchance they might help others.</p>
<p>One of the things I wanted to achieve was to ensure that any unhandled exceptions that propagated to the top of the stack were logged. The following custom EndpointBehavior achieves that. I’m using Castle Logging Facility here, but you could of course swap out the logging code for whatever error handling code you require.</p>



  

<script src="https://gist.github.com/ianfnelson/bd27d9a857396b2e1f62.js?file=WCFEH_1.cs"></script>
<p>Here’s the relevant line from my Windsor configuration:</p>



  

<script src="https://gist.github.com/ianfnelson/bd27d9a857396b2e1f62.js?file=WCFEH_2.cs"></script>
]]></content:encoded>
    </item>
    <item>
      <title>WCF – Logging Before and After Operation Invocation</title>
      <link>https://blog.iannelson.uk/wcf-logging-before-and-after-operation-invocation/</link>
      <pubDate>Fri, 09 Apr 2010 13:04:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/wcf-logging-before-and-after-operation-invocation/</guid>
      <description>&lt;p&gt;Here’s another custom WCF EndpointBehavior I found useful recently.&lt;/p&gt;
&lt;p&gt;Not content with &lt;a href=&#34;https://blog.iannelson.uk/wcf-global-exception-handling/&#34;&gt;logging all unhandled errors&lt;/a&gt;, I wanted to output a DEBUG level log message before and after every operation invocation. As before, I’m using the Castle Windsor Logging Facility to handle my logging, but you can swap that out for your logger of choice if required.&lt;/p&gt;
&lt;p&gt;Firstly, here’s the EndPointBehaviour itself. This adds a custom CallContextInitializer to every service operation:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Here’s another custom WCF EndpointBehavior I found useful recently.</p>
<p>Not content with <a href="https://blog.iannelson.uk/wcf-global-exception-handling/">logging all unhandled errors</a>, I wanted to output a DEBUG level log message before and after every operation invocation. As before, I’m using the Castle Windsor Logging Facility to handle my logging, but you can swap that out for your logger of choice if required.</p>
<p>Firstly, here’s the EndPointBehaviour itself. This adds a custom CallContextInitializer to every service operation:</p>



  

<script src="https://gist.github.com/ianfnelson/51d9f1a223bc6984b905.js?file=WCFLog_1.cs"></script>
<p>Here’s the custom CallContextInitializer:</p>



  

<script src="https://gist.github.com/ianfnelson/51d9f1a223bc6984b905.js?file=WCFLog_2.cs"></script>
<p>And the Windsor configuration is much the same as last time:</p>



  

<script src="https://gist.github.com/ianfnelson/51d9f1a223bc6984b905.js?file=WCFLog_3.cs"></script>
]]></content:encoded>
    </item>
    <item>
      <title>WCF – NHibernate Unit Of Work Endpoint Behavior</title>
      <link>https://blog.iannelson.uk/wcf-nhibernate-unit-of-work-endpoint-behavior/</link>
      <pubDate>Fri, 09 Apr 2010 13:04:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/wcf-nhibernate-unit-of-work-endpoint-behavior/</guid>
      <description>&lt;p&gt;OK, my last WCF-related code snippet of the day, I promise. This is quite similar to the last one. I required that the WCF service I was developing started a new NHibernate Session for each invocation, and closed it after invocation (i.e. session-per-request). I couldn’t rely on the ASP.NET session start and end events in global.asax as this particular WCF service was to respond to MSMQ messages rather than HTTP.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>OK, my last WCF-related code snippet of the day, I promise. This is quite similar to the last one. I required that the WCF service I was developing started a new NHibernate Session for each invocation, and closed it after invocation (i.e. session-per-request). I couldn’t rely on the ASP.NET session start and end events in global.asax as this particular WCF service was to respond to MSMQ messages rather than HTTP.</p>
<p>So, once again I found myself bashing out a custom <code>EndpointBehavior</code> to add a custom <code>CallContextInitializer</code> to every operation:</p>



  

<script src="https://gist.github.com/ianfnelson/2f0f9300f5157c320dbd.js?file=WCFNH_1.cs"></script>



  

<script src="https://gist.github.com/ianfnelson/2f0f9300f5157c320dbd.js?file=WCFNH_2.cs"></script>
<p>And the Windsor configuration is much the same as before:</p>



  

<script src="https://gist.github.com/ianfnelson/2f0f9300f5157c320dbd.js?file=WCFNH_3.cs"></script>
]]></content:encoded>
    </item>
    <item>
      <title>An MVC Gotcha and the PRG Pattern</title>
      <link>https://blog.iannelson.uk/an-mvc-gotcha-and-the-prg-pattern/</link>
      <pubDate>Fri, 09 Apr 2010 10:04:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/an-mvc-gotcha-and-the-prg-pattern/</guid>
      <description>&lt;p&gt;If you’ve recently moved across to ASP.NET MVC development following years of wrangling with the leaky abstraction that was WebForms, you may have encountered some seemingly curious behaviour when posting back to the same URL.&lt;/p&gt;
&lt;p&gt;Suppose we have the following simple, contrived and utterly imagination-free model:&lt;/p&gt;



  

&lt;script src=&#34;https://gist.github.com/ianfnelson/d0e0260464145fde2dbc.js?file=MVCG1.cs&#34;&gt;&lt;/script&gt;
&lt;p&gt;Here’s a view:&lt;/p&gt;



  

&lt;script src=&#34;https://gist.github.com/ianfnelson/d0e0260464145fde2dbc.js?file=MVCG2.cshtml&#34;&gt;&lt;/script&gt;
&lt;p&gt;And here’s the controller:&lt;/p&gt;



  

&lt;script src=&#34;https://gist.github.com/ianfnelson/d0e0260464145fde2dbc.js?file=MVCG2.cs&#34;&gt;&lt;/script&gt;
&lt;p&gt;Note that we have two separate Index actions – one for HTTP GET which instantiates and displays a new FooModel instance, and one for HTTP POST which modifies one of the properties on the posted FooModel instance before re-rendering the view.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>If you’ve recently moved across to ASP.NET MVC development following years of wrangling with the leaky abstraction that was WebForms, you may have encountered some seemingly curious behaviour when posting back to the same URL.</p>
<p>Suppose we have the following simple, contrived and utterly imagination-free model:</p>



  

<script src="https://gist.github.com/ianfnelson/d0e0260464145fde2dbc.js?file=MVCG1.cs"></script>
<p>Here’s a view:</p>



  

<script src="https://gist.github.com/ianfnelson/d0e0260464145fde2dbc.js?file=MVCG2.cshtml"></script>
<p>And here’s the controller:</p>



  

<script src="https://gist.github.com/ianfnelson/d0e0260464145fde2dbc.js?file=MVCG2.cs"></script>
<p>Note that we have two separate Index actions – one for HTTP GET which instantiates and displays a new FooModel instance, and one for HTTP POST which modifies one of the properties on the posted FooModel instance before re-rendering the view.</p>
<p>We issue a GET against the relevant URI, and the view renders as we expect (in that both the textbox and the literal show the value 1):</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/Foo1_3.png"></p>
<p>But here’s the gotcha – look what happens when we hit the increment button to post back:</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/Foo2_3.png"></p>
<p>Huh? What gives? The model has definitely been updated (as reflected in the literal which is now showing 2), but the textbox is still stubbornly displaying 1.</p>
<p>What’s happening is that the Html helpers for form fields (including hidden fields) take their values from the controller’s ModelState dictionary, which contains details of all the POSTed fields and any validation errors.</p>
<p>So how to achieve our desired behaviour? We could make a quick and dirty call to ModelState.Clear(), but that’s not such a good idea and might lead to undesirable results surrounding validation.</p>
<p>In fact, this gotcha is symptomatic of a deeper anti-pattern in evidence in this example, namely rendering views from POST actions. Consider what happens if the user refreshes their browser when viewing the POSTed view. Recognise these dialog boxes?</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/IE_3.png">
<img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/Chrome_3.png">
<img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/Firefox_4.png"></p>
<p>Pretty ugly, aren’t they? And you really don’t want to leave open the possibility of a user accidentally submitting duplicate transactions if at all possible.</p>
<p>Enter the <a href="http://en.wikipedia.org/wiki/Post/Redirect/Get">Post, Redirect, Get pattern</a>. Here, the POST action updates the model as before, but redirects to the GET action to perform the re-rendering of the view. Of course, you’ll need to persist the model somewhere in the meantime (e.g. session state). This pattern avoids the gotcha of a value from the ModelState being displayed instead of an updated figure, and ensures that your user will never see those ugly form resubmission dialog boxes, or submit duplicate transactions.</p>
<p>Here’s a quick reworking of the earlier controller to use this pattern. Note the introduction of a “New” action to handle the instantiation of a new Foo instance. This is crummy code fraught with potential uncaught NullReferenceExceptions, but you’ll get the gist, I’m sure.</p>



  

<script src="https://gist.github.com/ianfnelson/d0e0260464145fde2dbc.js?file=MVCG4.cs"></script>
<p>And now we get the desired results on postback:</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/Foo3_3.png"></p>
<p>If you’re using MVC, and returning ViewResults from POST actions, I would urge you to consider the potential side-effects of that approach, and standardise instead on a PRG pattern.</p>
]]></content:encoded>
    </item>
    <item>
      <title>A Circuit Breaker Which Trips On Frequency Of Failures</title>
      <link>https://blog.iannelson.uk/a-circuit-breaker-which-trips-on-frequency-of-failures/</link>
      <pubDate>Wed, 28 Oct 2009 11:10:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/a-circuit-breaker-which-trips-on-frequency-of-failures/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://twitter.com/jeremypearson&#34;&gt;@Jez&lt;/a&gt; &lt;a href=&#34;http://twitter.com/jeremypearson/statuses/5186129382&#34;&gt;tweeted&lt;/a&gt; last night:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@ianfnelson admit it: you use Castle Windsor primarily to highlight and lampoon Google&amp;rsquo;s poor selection of adwords?!&lt;br&gt;
— 𝚂𝚑𝚘𝚘𝚝𝚒𝚗𝚐 𝚂𝚌𝚒𝚕𝚕𝚢 (@shootingscilly)  October 26, 2009&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Funny, but not true. I am enamoured with the &lt;a href=&#34;http://www.castleproject.org/container/index.html&#34;&gt;Castle Windsor&lt;/a&gt; project because its power makes it fairly simple for me to develop loosely-coupled systems which are easily maintained and tested. The wide range of Facilities and Contrib projects also integrate nicely with the other parts of my current development stack (NHibernate, WCF, WF, log4net).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="http://twitter.com/jeremypearson">@Jez</a> <a href="http://twitter.com/jeremypearson/statuses/5186129382">tweeted</a> last night:</p>
<blockquote>
<p>@ianfnelson admit it: you use Castle Windsor primarily to highlight and lampoon Google&rsquo;s poor selection of adwords?!<br>
— 𝚂𝚑𝚘𝚘𝚝𝚒𝚗𝚐 𝚂𝚌𝚒𝚕𝚕𝚢 (@shootingscilly)  October 26, 2009</p></blockquote>
<p>Funny, but not true. I am enamoured with the <a href="http://www.castleproject.org/container/index.html">Castle Windsor</a> project because its power makes it fairly simple for me to develop loosely-coupled systems which are easily maintained and tested. The wide range of Facilities and Contrib projects also integrate nicely with the other parts of my current development stack (NHibernate, WCF, WF, log4net).</p>
<p>Whilst there is a lot of material on the web about the Dependency Injection capabilities of Windsor, the Aspect-Oriented Programming (AOP) features don’t seem to get as much exposure, so I thought I’d quickly blog about one way in which I’ve been making use of those in the system I’m currently developing.</p>
<p>Earlier this year <a href="http://davybrion.com">Davy Brion</a> posted <a href="http://davybrion.com/blog/2009/07/protecting-your-application-from-remote-problems/">an excellent C# implementation</a> of the Circuit Breaker pattern described in Michael Nygard’s equally excellent book <em><a href="http://www.amazon.co.uk/gp/product/0978739213?ie=UTF8&amp;tag=ianesbl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=0978739213">Release It! Design and Deploy Production-Ready Software</a></em>.</p>
<p>For the uninitiated, this pattern advocates protecting your system from issues affecting any remote service on which it depends by wrapping your calls to that service with a circuit breaker component. This component notes any failed service invocations, until some threshold is reached, causing the circuit to trip. Subsequent attempted service invocations then “fail fast”, throwing a custom exception rather than passing the method call on to the remote service. This benefits your system, as it prevents you from tying up valuable threads creating expensive remote service calls which may be slow to timeout. And it benefits the remote system as you avoid piling further pressure on a service which is already down or unresponsive.</p>
<p>For more details of this pattern, and some entertaining war stories of situations in which they would have proved useful, I encourage you to read <a href="http://www.amazon.co.uk/gp/product/0978739213?ie=UTF8&amp;tag=ianesbl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=0978739213">Michael Nygard’s book</a>.</p>
<p>Now, I like Davy’s implementation of this pattern a lot, particularly since it is implemented as an interceptor for Castle Windsor, which as mentioned I’m already making heavy use of in my current projects. But my only concern is that it is configured to trip after the number of failed invocations reaches a specific figure, <em>irrespective of how long it takes to reach that threshold</em>. I want an implementation which is able to sense the difference between infrequent exceptions over a prolonged period, and a sudden flurry of exceptions – the latter causing the circuit breaker to trip.</p>
<p>To achieve this I’ve tweaked Davy’s implementation slightly by adding an extra parameter to the constructor specifying the historical period over which to total the number of exceptions. That is, you can configure it such that a certain number of failures <em>within the preceding y minutes</em> causes the circuit breaker to trip.</p>
<p>My forked version can be found on GitHub at <a href="https://github.com/ianfnelson/CircuitBreaker">https://github.com/ianfnelson/CircuitBreaker</a>.</p>
<p>I look forward to seeing what adverts Google sees fit to stick at the bottom of this post… 🙂</p>
]]></content:encoded>
    </item>
    <item>
      <title>Castle Windsor Array Resolution Gotcha</title>
      <link>https://blog.iannelson.uk/castle-windsor-array-resolution-gotcha/</link>
      <pubDate>Mon, 26 Oct 2009 10:10:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/castle-windsor-array-resolution-gotcha/</guid>
      <description>&lt;p&gt;The shiny new system which I’ve recently been developing makes heavy use of the Chain of Responsibility pattern, and as such a number of service classes take an array of objects in the constructor:&lt;/p&gt;



  

&lt;script src=&#34;https://gist.github.com/ianfnelson/cfbe381862b8c7b1e084.js?file=cwarg1.cs&#34;&gt;&lt;/script&gt;
&lt;p&gt;I’m using Castle Windsor for dependency management, so I’ve been fluently registering all instances of ILeadAllocator:&lt;/p&gt;



  

&lt;script src=&#34;https://gist.github.com/ianfnelson/cfbe381862b8c7b1e084.js?file=cwarg2.cs&#34;&gt;&lt;/script&gt;
&lt;p&gt;Easy, right? And yet at runtime Windsor surprised me by throwing this exception in my face:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Castle.MicroKernel.Handlers.HandlerException: Can’t create component &amp;amp;#8216;Marshalls.Leads.ApplicationService.LeadAllocationService’ as it has dependencies to be satisfied.

Marshalls.Leads.ApplicationService.LeadAllocationService is waiting for the following dependencies:

Keys (components with specific keys)

– leadAllocators which was not registered.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Huh?! What gives? Well, a little Googling revealed &lt;a href=&#34;http://hammett.castleproject.org/?p=257&#34;&gt;this post&lt;/a&gt; from Castle founder Hamilton Verissimo explaining that by default the Castle MicroKernel expects me to define what should be included in the array. But he goes on to explain that the behaviour I desire can be achieved by registering a custom subresolver with the microkernel. That subresolver has since been included in the Castle Windsor distro, so in actual fact all I needed to do was add the following line of code when configuring my container:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>The shiny new system which I’ve recently been developing makes heavy use of the Chain of Responsibility pattern, and as such a number of service classes take an array of objects in the constructor:</p>



  

<script src="https://gist.github.com/ianfnelson/cfbe381862b8c7b1e084.js?file=cwarg1.cs"></script>
<p>I’m using Castle Windsor for dependency management, so I’ve been fluently registering all instances of ILeadAllocator:</p>



  

<script src="https://gist.github.com/ianfnelson/cfbe381862b8c7b1e084.js?file=cwarg2.cs"></script>
<p>Easy, right? And yet at runtime Windsor surprised me by throwing this exception in my face:</p>
<pre tabindex="0"><code>Castle.MicroKernel.Handlers.HandlerException: Can’t create component &amp;#8216;Marshalls.Leads.ApplicationService.LeadAllocationService’ as it has dependencies to be satisfied.

Marshalls.Leads.ApplicationService.LeadAllocationService is waiting for the following dependencies:

Keys (components with specific keys)

– leadAllocators which was not registered.
</code></pre><p>Huh?! What gives? Well, a little Googling revealed <a href="http://hammett.castleproject.org/?p=257">this post</a> from Castle founder Hamilton Verissimo explaining that by default the Castle MicroKernel expects me to define what should be included in the array. But he goes on to explain that the behaviour I desire can be achieved by registering a custom subresolver with the microkernel. That subresolver has since been included in the Castle Windsor distro, so in actual fact all I needed to do was add the following line of code when configuring my container:</p>



  

<script src="https://gist.github.com/ianfnelson/cfbe381862b8c7b1e084.js?file=cwarg3.cs"></script>
<p>So now, when new implementations of ILeadAllocator are added to the codebase, they are immediately available to the CofR pattern within the LeadAllocationService, with no additional work required by the developer. Hurrah!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Castle Windsor Lifestyle Gotcha</title>
      <link>https://blog.iannelson.uk/castle-windsor-lifestyle-gotcha/</link>
      <pubDate>Mon, 19 Oct 2009 05:10:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/castle-windsor-lifestyle-gotcha/</guid>
      <description>&lt;p&gt;I always knew my lifestyle choices would come back to bite me some day…&lt;/p&gt;
&lt;p&gt;I’ve been making heavy use of the &lt;a href=&#34;http://www.castleproject.org/container/index.html&#34;&gt;Castle Windsor&lt;/a&gt; container to handle dependency and configuration management in the shiny new system that I’m currently developing. For the most part it’s been an absolute blast, allowing me to easily create a loosely-coupled system architecture and focus my efforts on what the system should be achieving for the client, rather than worrying about how it all hangs together.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I always knew my lifestyle choices would come back to bite me some day…</p>
<p>I’ve been making heavy use of the <a href="http://www.castleproject.org/container/index.html">Castle Windsor</a> container to handle dependency and configuration management in the shiny new system that I’m currently developing. For the most part it’s been an absolute blast, allowing me to easily create a loosely-coupled system architecture and focus my efforts on what the system should be achieving for the client, rather than worrying about how it all hangs together.</p>
<p>But recently I encountered a bit of a gotcha which made me think that perhaps I should spend some more time understanding exactly what Windsor is doing in the background.</p>
<p>See, it turns out that the default lifestyle for components registered with Windsor is Singleton. So, every time I asked Windsor for an IFooRepository, it supplied me with <em>exactly the same concrete instance of FooRepository</em>. Which would have been fine if it weren’t for the fact that FooRepository happened to indirectly hold a private reference to a thread-afine NHibernate session context. Ouchy.</p>
<p>The system I’m developing is a WCF service, and I’m using a Unit of Work pattern to open an NH session before the operation is invoked, and close it afterwards. To make this work, I simply needed to make sure that FooRepository (and any Castle-fulfilled component which has an IFooRepository dependency) has a transient lifestyle. Indeed, on further reflection, for most of the systems I develop, the transient lifestyles should be my default choice, and I do wonder why the Windsor developers chose to make singleton the default.</p>
<p>Davy Brion has more info on this topic in this blog post – <a href="http://davybrion.com/blog/2008/05/windsor-and-component-instance-lifetimes/">Windsor and Component Instance Lifetimes</a>.</p>
<p>So, moral of the story – understand how your IoC container is fulfilling your requests, and be prepared to specify non-default behaviours if necessary. Convention over configuration is only a benefit if you’re happy with the conventions.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Alt.Net UK In The North</title>
      <link>https://blog.iannelson.uk/alt-net-uk-in-the-north/</link>
      <pubDate>Sun, 19 Apr 2009 20:04:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/alt-net-uk-in-the-north/</guid>
      <description>&lt;p&gt;I spent much of this weekend over in Bradford, talking shop with the good folks at the Alt.Net UK ‘in the North’ conference. I had a great time, learned much, and am grateful to &lt;a href=&#34;http://blogs.blackmarble.co.uk/blogs/rfennell/&#34;&gt;Richard Fennell&lt;/a&gt; of &lt;a href=&#34;http://www.blackmarble.co.uk/&#34;&gt;Black Marble&lt;/a&gt; and the other organisers and sponsors for making the event possible.&lt;/p&gt;
&lt;p&gt;This was the first &lt;a href=&#34;https://en.wikipedia.org/wiki/Open_Space_Technology&#34;&gt;Open Spaces&lt;/a&gt; event I’ve attended, and I was pleasantly surprised at how orderly and productive the sessions turned out to be. Unlike conventional sales-pitch conferences of the MSDN roadshow variety, this was more of an open forum, with an expectation that all of the relatively small number (25ish?) of participants would, well, &lt;em&gt;participate&lt;/em&gt;!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I spent much of this weekend over in Bradford, talking shop with the good folks at the Alt.Net UK ‘in the North’ conference. I had a great time, learned much, and am grateful to <a href="http://blogs.blackmarble.co.uk/blogs/rfennell/">Richard Fennell</a> of <a href="http://www.blackmarble.co.uk/">Black Marble</a> and the other organisers and sponsors for making the event possible.</p>
<p>This was the first <a href="https://en.wikipedia.org/wiki/Open_Space_Technology">Open Spaces</a> event I’ve attended, and I was pleasantly surprised at how orderly and productive the sessions turned out to be. Unlike conventional sales-pitch conferences of the MSDN roadshow variety, this was more of an open forum, with an expectation that all of the relatively small number (25ish?) of participants would, well, <em>participate</em>!</p>
<p>I was also surprised to find that there were more pragmatists in attendance than architecture astronauts. Maybe it’s a reflection of the current economic climate, but a common theme was on finding toolings that were <em>good enough</em> with which to deliver suitable solutions quickly and effectively, rather than striving for architectural purity and perfection.</p>
<p>It was great to hear some war stories, and learn about technologies, tools, methodologies and ideas that are currently exciting other people. It would be difficult to come away from a weekend like this one without some inspiration and a big list of several things to follow up on. Here’s mine:</p>
<ul>
<li><strong><a href="http://www.asp.net/mvc/">MVC Framework</a></strong> – like myself, a lot of the attendees have had enough of the WebForms model, and are excited about the potential of ASP.NET MVC.</li>
<li><strong><a href="http://fluentnhibernate.org/">Fluent NHibernate</a></strong> – it sounds like the project being feverishly worked on by <a href="http://blog.jagregory.com/">James Gregory</a> et al is ready for prime time. People spoke very positively of the ability to ditch XML HBM files in favour of this strongly-typed configuration.</li>
<li><strong><a href="http://www.balsamiq.com/">Balsamiq Mockups</a></strong> – loved by everyone, even despite (or should that be because of?) its use of Comic Sans MS!</li>
<li><strong>Inversion of Control</strong> – there was a wide mix of IoC containers being used. I’ve tried <a href="http://www.castleproject.org/container/index.html">Castle Windsor</a>, other people made positive murmurings about <a href="http://msdn.microsoft.com/en-us/library/cc468366.aspx">Unity</a> and <a href="http://structuremap.sourceforge.net/Default.htm">StructureMap</a>.</li>
<li><strong><a href="http://www.typemock.com">TypeMock Isolator</a></strong> – apparently capable of mocking the unmockable.</li>
<li><strong><a href="http://www.amazon.co.uk/gp/product/0123740371?ie=UTF8&amp;tag=ianesbl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=0123740371">Sketching User Experiences</a></strong> – everyone who’d heard of him spoke highly of Bill Buxton’s work.</li>
<li><strong><a href="http://www.openquarters.org">Open Quarters CMS</a></strong> – a great demonstration of a CMS built on ASP.NET MVC by <a href="http://www.anthonymain.com/">Anthony Main</a> and Andrew Magee. I look forward to taking a squizz at the source, I’m sure it will be an excellent learning aid.</li>
<li><strong><a href="http://sourceforge.net/projects/ulti-swat">SWAT</a></strong> – a web testing tool developed by some folks at Ultimate Software and released on Sourceforge as an open source project (thanks to <a href="http://mckennatribe.com/">Nick</a> for the link).</li>
<li><strong>Wild Blue Yonder</strong> – a delicious amber ale from Oregon which was on tap at the Sir Titus Salt pub, to where we decamped after the planning session on Friday night. Yum!</li>
</ul>
<p>I’m probably forgetting some things, there was a lot to take in, and I regret not having a pad of paper on hand. Hopefully my memory will be jogged by the blog postings of the other attendees.</p>
<p>Thanks again to all who made it possible, and all the attendees for quality the chat and inspiration.</p>
]]></content:encoded>
    </item>
    <item>
      <title>ASP.NET Just Became a Legacy Platform</title>
      <link>https://blog.iannelson.uk/asp-net-just-became-a-legacy-platform/</link>
      <pubDate>Sun, 22 Mar 2009 21:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/asp-net-just-became-a-legacy-platform/</guid>
      <description>&lt;p&gt;One of the least surprising but more significant announcements to come out of &lt;a href=&#34;http://live.visitmix.com/&#34;&gt;Mix ‘09&lt;/a&gt; last week was the general availability of &lt;a href=&#34;http://www.asp.net/mvc/&#34;&gt;ASP.NET MVC 1.0&lt;/a&gt;. The development process for this framework has been very transparent, with no fewer than eight previews, betas and release candidates made available over the past year or so.&lt;/p&gt;
&lt;p&gt;Microsoft are being careful to tout ASP.NET MVC as being “an alternative, not a replacement, for ASP.NET Web Forms”, but just look at their list of some of its benefits:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>One of the least surprising but more significant announcements to come out of <a href="http://live.visitmix.com/">Mix ‘09</a> last week was the general availability of <a href="http://www.asp.net/mvc/">ASP.NET MVC 1.0</a>. The development process for this framework has been very transparent, with no fewer than eight previews, betas and release candidates made available over the past year or so.</p>
<p>Microsoft are being careful to tout ASP.NET MVC as being “an alternative, not a replacement, for ASP.NET Web Forms”, but just look at their list of some of its benefits:</p>
<ul>
<li>Clear separation of concerns</li>
<li>Testability – support for Test-Driven Development</li>
<li>Fine-grained control over HTML and JavaScript</li>
<li>Intuitive URLs</li>
</ul>
<p>Which begs the question – if you were kicking off development of a new web-based application on the Microsoft platform today, why would you even consider using Web Forms? Surely the choice now boils down to Silverlight or ASP.NET MVC? I fully expect that, by the time the summer Olympics come to London, Web Forms will be considered to be a legacy platform, with job adverts referring to it as “<em>Classic ASP.NET</em>”.</p>
<p>And that’s probably no bad thing. Sure, for those of us who lived through the static web, CGI forms and classic ASP, ASP.NET was a godsend, with its cunning state management techniques, custom controls, and page lifecycle events. But, even in the hands of decent developers, it does tend to promote a magic pushbutton anti-pattern, with untestable business logic frequently dumped in the code-behind. So, as a fanboy of OOP, TDD, and Separation of Concerns, this eventual release of ASP.NET MVC comes as a source of great pleasure to me, and means that I can look forward to many more years of enjoyably developing web apps on the MS platform.</p>
<p>But hang on a cotton-picking minute – what exactly is truly new, here? Haven’t we been able to do MVC development on the MS platform for years, using <a href="http://www.castleproject.org/MonoRail/">Castle Monorail</a>? Well, yes we have – I had the pleasure of using it last summer when developing systems for <a href="http://www.cmoptions.org/">Child Maintenance Options</a>. And Monorail itself was inspired by <a href="http://api.rubyonrails.org/">Ruby on Rails</a>, and the J2EE platform has had <a href="http://struts.apache.org/">Apache Struts</a> for donkey’s years (I used it briefly in the summer of 2002 when developing systems for <a href="http://www.three.co.uk">Three</a>).</p>
<p>So, if we could do this stuff already, even on the ASP.NET platform, why does the release of ASP.NET MVC still matter so much?</p>
<p>The slightly depressing but inevitable truth is that it matters because it’s a product which has been developed by and will be fully supported by Microsoft. To many organisations, that’s reason enough to use it when they would have never in a month of Sundays considered using the likes of Monorail.</p>
<p>As a crude indicator of popularity, consider the questions posted on <a href="http://stackoverflow.com/">Stack Overflow</a> to date. 1819 of them have been tagged “ASP.NET-MVC”, whilst a mere 22 have been tagged “Monorail” or “Castle-Monorail”.</p>
<p>The same can be seen of many other modern technologies used in the development of custom applications. Take <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> for example – <a href="http://www.hibernate.org/343.html">NHibernate</a> has been around for, what, around six years or so since it was originally ported from <a href="http://www.hibernate.org/">Hibernate</a> (I seem to have <a href="https://blog.iannelson.uk/nhibernate/">first mentioned it on this blog in 2004</a>). But the traction that <a href="http://msdn.microsoft.com/en-us/library/bb386976.aspx">LINQ to SQL</a> and <a href="http://msdn.microsoft.com/en-us/library/bb399572.aspx">Entity Framework</a> have garnered in their short existence has already almost outstripped the popularity of NHibernate by some metrics.</p>
<p>Entity Framework, while not to everyone’s taste, at least has the potential to offer something quite different and distinct from NHibernate. But the same can’t be said of some other recent examples of Microsoft’s ongoing <a href="http://en.wikipedia.org/wiki/Embrace,_extend_and_extinguish">Embrace, Extend and Extinguish</a> policy – what does Visual Studio Unit Testing offer that <a href="http://www.nunit.org/index.php">NUnit</a> didn’t? Why develop the <a href="http://msdn.microsoft.com/en-us/library/cc468366.aspx">Unity Application Block</a> in a universe that already contains <a href="http://www.castleproject.org/container/index.html">Castle Windsor</a> and a plethora of other <a href="http://en.wikipedia.org/wiki/Inversion_of_Control">IoC</a> containers? How long will it be before Microsoft write their own <a href="http://en.wikipedia.org/wiki/Mock_object">mock object</a> framework? Surely they will eventually do so, to meet the demands of the large proportion of dev shops that simply won’t touch none-MS tooling.</p>
<p>Why this should be the case, I can’t really say, but as a freelance developer I’ve seen it with my own eyes – working with organisations with technical strategies that specify the use of Microsoft technologies wherever possible, and shun the adoption of open source or third-party solutions. I hear people say “we’ll wait for Entity Framework to mature, rather than trying NHibernate”, and I see the funny stares people give me when I meekly suggest that we use <a href="http://www.codeplex.com/xunit">xUnit.Net</a> or <a href="http://code.google.com/p/moq/">Moq</a> on a project.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/iStock_000004857675XSmall_3.jpg"></p>
<p>So, perhaps we can’t entirely blame Microsoft. True, their practices do sometimes feel to be anti-competitive and limiting of choice. But they are a business after all, and are merely meeting the demands of their customers.</p>
<p>And is it really in my best interests to complain about these practices? I am a freelance developer and Microsoft registered partner and have to be pragmatic about this. I am in business developing custom applications for the Microsoft platform, and in doing so I want to use 21st-century techniques such as ORM, the MVC pattern, unit testing, mocking, IoC, etc. If my clients are more likely to be receptive to those concepts if there exists a suitable Microsoft implementation, then so be it. But please, let me continue using NHibernate instead of Entity Framework…</p>
<p>ASP.NET RIP. Long live ASP.NET MVC.</p>
]]></content:encoded>
    </item>
    <item>
      <title>NDepend</title>
      <link>https://blog.iannelson.uk/ndepend/</link>
      <pubDate>Wed, 04 Feb 2009 15:02:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/ndepend/</guid>
      <description>&lt;p&gt;OK, dear readers, today I’d like to talk about tools.&lt;/p&gt;
&lt;p&gt;Software development isn’t really so different from traditional skilled crafts in that it is important to have an understanding of the tools available to help you create a quality products in the least amount of time possible.&lt;/p&gt;
&lt;p&gt;For .NET developers, the Visual Studio IDE is usually just the starting point, and most of us will come to rely on some of the tools listed in Scott Hanselman’s famous &lt;a href=&#34;http://www.hanselman.com/tools&#34;&gt;tools list&lt;/a&gt;. Personally, I can’t imagine coding without first installing &lt;a href=&#34;http://www.devexpress.com/refactor&#34;&gt;Refactor Pro&lt;/a&gt;, editing text files in anything other than &lt;a href=&#34;http://www.textpad.com&#34;&gt;TextPad&lt;/a&gt;, or working on a machine that doesn’t have Snag It installed.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>OK, dear readers, today I’d like to talk about tools.</p>
<p>Software development isn’t really so different from traditional skilled crafts in that it is important to have an understanding of the tools available to help you create a quality products in the least amount of time possible.</p>
<p>For .NET developers, the Visual Studio IDE is usually just the starting point, and most of us will come to rely on some of the tools listed in Scott Hanselman’s famous <a href="http://www.hanselman.com/tools">tools list</a>. Personally, I can’t imagine coding without first installing <a href="http://www.devexpress.com/refactor">Refactor Pro</a>, editing text files in anything other than <a href="http://www.textpad.com">TextPad</a>, or working on a machine that doesn’t have Snag It installed.</p>
<h2 id="mri-for-your-net-application">MRI For Your .NET Application</h2>
<p>Another one of the tools that I reach for frequently, and the subject of this blog post, is <strong><a href="http://www.ndepend.com">NDepend</a></strong>, which performs rapid static analysis of a set of .NET assemblies and provides a deliciously visual interface for interpreting and understanding the results. Through the use of this tool, architects and developers can quickly spot problems or potential areas for improvements in a codebase. It’s essentially an MRI Scanner for your .NET code!</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/iStock_000004593967XSmall_2.jpg"></p>
<h2 id="so-what-does-it-do">So.. What Does It Do?</h2>
<p>I’ve briefly mentioned my use of NDepend before – for example I <a href="https://blog.iannelson.uk/msb3247-dependent-assembly-conflicts/">blogged in December</a> about how I was able to use NDepend to resolve an MSB3247 compiler warning which a developer was experiencing. But there’s much more to it than just helping solve simple assembly reference problems. Some of my favourite features include:</p>
<p>An interactive <strong>Dependency Graph</strong>, giving a visual representation of the relationships between assemblies (both within your application, and any third-party and system dependencies). Here’s an example output from analysing the S#arp Architecture project:</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/DependencyGraphSnapshot.png"></p>
<p>The <strong>Dependency Matrix</strong> cross-tabulates all the references between assemblies, allowing for drilling down to member level. Remember all those dictats you issued to the dev team in your coding standards, such as “don’t reference the data layer from the front-end”? Well, this is the window you’ll use for ensuring that the team are abiding by such rules. Usefully, cyclical references between namespaces are particularly highlighted.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NDependMatrix_2.png"></p>
<p>The <strong>Metrics Window</strong> is where I tend to spend most of my time, using the inbuilt CQL (Code Query Language) to identify areas of the codebase which are ripe for refactoring. This area of the tool is like FxCop on steroids.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NDependMetrics_2.png"></p>
<p>I’m also a big fan of the <strong>Changes Explorer</strong> functionality, which highlights at a glance the changes made between any two builds of an application. Also the ability to import <strong>Code Coverage</strong> files from NCover or Visual Studio Team System, to similarly highlight the areas of a solution which are adequately covered by <a href="https://blog.iannelson.uk/12-reasons-why-i-love-unit-tests/">unit tests</a>.</p>
<h2 id="real-world-benefits">Real-World Benefits</h2>
<p>NDepend is useful when looking at your own code, but really comes into its own when you want to quickly grok a codebase developed by someone else. Here’s an example:</p>
<p>My current client have the IP rights to a bespoke .NET application which has been developed for them by a third party. They plan to bring the development of this application in house, and recently asked me to take a look through the source and feed back my thoughts on the architecture.</p>
<p>Initially, I made the mistake of doing this code review solely by looking at the code itself, through the IDE. I was impressed – the code was exceedingly clean, the solution well-structured, and everything looked very straightforward. The object model was mapped to the database using <a href="https://blog.iannelson.uk/on-the-joys-of-object-relational-mapping/">NHibernate</a>, which in turn was abstracted from the appliation code by a standard DAO pattern. So far so good, and I was about to email a thumbs-up.</p>
<p>But I smelled a rat – the code was almost too clean, and I couldn’t find the actual meat of the business logic. So, I whipped out NDepend (which I really should have done initially), ran an analysis, and realised that the cleanliness and simplicity of the middle tier was due to over two-thirds of the solution logic existing in the user interface layer! In fact 28% of the IL instructions from the entire solution were contained in the code-behind of just three web pages. It was a classic example of the <a href="http://en.wikipedia.org/wiki/Magic_pushbutton">magic pushbutton anti-pattern</a>, and I very nearly failed to spot it.</p>
<h2 id="tmi">TMI?</h2>
<p>If I had to identify a drawback to NDepend, it is the risk that much of the output information may be meaningless to the average .NET developer. Returning to my earlier medical analogies, an X-Ray or MRI Scan is useless in itself until it is viewed by a medical professional with the knowledge and experience to interpret the results.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/iStock_000005830514XSmall_2-1.jpg"></p>
<p>This potential problem is somewhat alleviated by the explanatory videos, <a href="http://codebetter.com/blogs/patricksmacchia/">Patrick’s extensive blogging</a>, and indeed the range of predefined CQL queries which serve to interpret the results and highlight potential problems. Even so, I suspect NDepend is more likely to be found in the toolkit of the architect or lead developer rather than the hobbyist – especially given the EUR 299 price tag for a professional license.</p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>To summarise, NDepend provides a short-cut to quickly understanding a .NET codebase and identifying potential improvements. If the quality of your code is important to you, or you frequently have to review code developed by other people, then I think you’ll find NDepend to be indispensable.</p>
<p><em>Disclaimer: Ian Nelson was provided with a complementary review copy of NDepend Professional version 2.0, and has subsequently paid for later editions of the software.</em></p>
]]></content:encoded>
    </item>
    <item>
      <title>.NET Coding Standards</title>
      <link>https://blog.iannelson.uk/net-coding-standards/</link>
      <pubDate>Fri, 23 Jan 2009 15:01:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/net-coding-standards/</guid>
      <description>&lt;p&gt;Sometimes, when you join a new team as a .NET developer, the team lead proudly points you in the direction of a Word document or wiki page detailing the team’s house coding standards.&lt;/p&gt;
&lt;p&gt;In my experience, these documents are invariably:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incomplete.&lt;/li&gt;
&lt;li&gt;Subjective.&lt;/li&gt;
&lt;li&gt;Not enforced.&lt;/li&gt;
&lt;li&gt;Largely copied from the interweb.&lt;/li&gt;
&lt;li&gt;Obsessed with the trivial (e.g. whitespace) while failing to mention the genuinely useful (e.g. boxing/unboxing, avoiding use of deprecated classes, Dispose pattern, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know this because I’ve been involved in creating such documents in the past 🙂&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Sometimes, when you join a new team as a .NET developer, the team lead proudly points you in the direction of a Word document or wiki page detailing the team’s house coding standards.</p>
<p>In my experience, these documents are invariably:</p>
<ul>
<li>Incomplete.</li>
<li>Subjective.</li>
<li>Not enforced.</li>
<li>Largely copied from the interweb.</li>
<li>Obsessed with the trivial (e.g. whitespace) while failing to mention the genuinely useful (e.g. boxing/unboxing, avoiding use of deprecated classes, Dispose pattern, etc).</li>
</ul>
<p>I know this because I’ve been involved in creating such documents in the past 🙂</p>
<p>Don’t get me wrong, I’m all in favour of creating clean code, and promoting standards within a team. I just find that most in-house style guides fail to achieve this, for the reasons listed above.</p>
<p>So, as I was walking through the city today, I started having a little debate with myself. “OK then, smarty-pants. What’s your alternative? What would your in-house coding standards guidelines look like?”</p>
<p>I think it can be summarised by four simple points, listed in order of importance:</p>
<h2 id="1-dont-ignore-compiler-warnings">1. Don’t Ignore Compiler Warnings</h2>
<p>You might think this would be an obvious one, but I’ve lost count of the number of times I’ve retrieved a solution from source control, compiled it, and been presented with a list of compiler warnings. Most of the time, there’s no excuse for this. If the <em>compiler</em> smells a rat in your code, then you’ve got a problem, be it variables that are used without being initialized, unused variables, unreachable code, or whatever. It’s sloppy code, and it’s easily avoided, so don’t leave it for the next guy to clean up. I am, if you hadn’t guessed, a big fan of setting the “treat compiler warnings as errors” flag in a project’s build properties.</p>
<h2 id="2-follow-the-framework-design-guidelines">2. Follow the Framework Design Guidelines</h2>
<p>The <a href="http://www.amazon.co.uk/gp/product/0321545613?ie=UTF8&amp;tag=ianesbl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=0321545613">Framework Design Guidelines</a> is another one of those books whose name doesn’t do it justice. The sagely guidance it contains is appropriate not only to Microsofties developing the FCL itself, but to anyone writing any .NET code. Don’t let your developers near a copy of Visual Studio until they’ve provided a sworn affidavit confirming that they’ve read this book! 🙂</p>
<p>All of the guidelines are concisely boiled down into Do, Consider, Avoid, and Do Not recommendations, and you would do well to adhere to these. Getting a few copies of this book for your team is a much more effective and cost-effective approach than trying to develop your own coding standards.</p>
<h2 id="3-run-fxcop">3. Run FxCop</h2>
<p>Having read and digested the Framework Design Guidelines, you need an easy way to enforce them. This is best achieved by running <a href="http://www.amazon.co.uk/gp/product/0321545613?ie=UTF8&amp;tag=ianesbl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=0321545613">FxCop</a> against your code (now integrated into some of the Visual Studio SKUs as a “Code Analysis” option).</p>
<p>Depending on the target audience for your solution, you may consider it reasonable to ignore some of the localization recommendations (i.e. when developing in-house line of business applications with limited geographical reach). But generally, if FxCop flags a warning in your code, I believe you would be well advised to correct the problem. Doing this helps to avoid a wide range of performance, security and design issues, in addition to enforcing consistent source code conventions.</p>
<h2 id="4-run-stylecop">4. Run StyleCop</h2>
<p>Finally, if you simply must achieve that uniform source code appearance that the whitespace Nazis in every team strive for, consider requiring that your devs run their code through <a href="http://code.msdn.microsoft.com/sourceanalysis">StyleCop</a> before checking in. It may initially be a bit annoying, and for sure some of the recommendations are highly subjective, but there’s no arguing that it does enforce a standard style, with a strong focus on increasing readability and reducing ambiguity.</p>
<h2 id="and-after-that">And After That…?</h2>
<p>Following the four points above should result in the low-level codebase produced by a team being readable, of high quality, in a common style, and free of many common “gotchas”. It doesn’t validate the higher-level architectural considerations, but in my opinion that is outside the scope of such a document, and could best be achieved through the use of a tool such as <a href="https://blog.iannelson.uk/ndepend/">NDepend</a>. But that’s a topic for another post…</p>
]]></content:encoded>
    </item>
    <item>
      <title>MSB3247 – Dependent Assembly Conflicts</title>
      <link>https://blog.iannelson.uk/msb3247-dependent-assembly-conflicts/</link>
      <pubDate>Thu, 04 Dec 2008 21:12:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/msb3247-dependent-assembly-conflicts/</guid>
      <description>&lt;p&gt;Earlier today a dev came over to ask me about a compiler warning he was getting when building a .NET solution:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MSB3247: Found conflicts between different versions of the same dependent assembly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is basically telling you that one project or dependency in your solution is referencing one version of an assembly, whilst another project or dependency is trying to reference a different version of the same assembly. Unhelpfully, the message and build output don’t tell you &lt;em&gt;which&lt;/em&gt; dependent assembly is causing the problem!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Earlier today a dev came over to ask me about a compiler warning he was getting when building a .NET solution:</p>
<blockquote>
<p>MSB3247: Found conflicts between different versions of the same dependent assembly.</p></blockquote>
<p>This is basically telling you that one project or dependency in your solution is referencing one version of an assembly, whilst another project or dependency is trying to reference a different version of the same assembly. Unhelpfully, the message and build output don’t tell you <em>which</em> dependent assembly is causing the problem!</p>
<p>To solve this, I reached for <a href="http://www.ndepend.com">NDepend</a> and tried to analyze the compiled assemblies. The conflicting assemblies were both excluded from the analysis and a warning message explained that this was a clash between two versions of System.Web.Extensions.dll – 3.5.0.0 was being referenced by a Telerik UI control, and an earlier version was being used by the developer’s application. This kind of dependency clash is one potential drawback of relying too heavily on third-party controls.</p>
<p>I was going to suggest bringing the application up to date and referencing the newer dll, but a quick squizz at NDepend’s dependency graph revealed that the Telerik assembly wasn’t actually being used by the application at all, and nor were several other referenced components! Deleting the unused references left a slightly leaner, faster-compiling solution with zero build warnings.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Performance of Loops on Collections</title>
      <link>https://blog.iannelson.uk/performance-of-loops-on-collections/</link>
      <pubDate>Fri, 28 Nov 2008 12:11:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/performance-of-loops-on-collections/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://codebetter.com/blogs/patricksmacchia/archive/2008/11/19/an-easy-and-efficient-way-to-improve-net-code-performances.aspx&#34;&gt;Interesting article&lt;/a&gt; from &lt;a href=&#34;http://codebetter.com/blogs/patricksmacchia&#34;&gt;Patrick Smacchia&lt;/a&gt; (the &lt;a href=&#34;http://www.ndepend.com&#34;&gt;NDepend&lt;/a&gt; guy) in which he runs some benchmarks on the cost of looping in different ways over different constructs and comes to the conclusion that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“looping on array using for is &lt;strong&gt;5 times cheaper&lt;/strong&gt; than looping on &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; using foreach (which I believe, is what we all do)”&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Well worth a read, although I suspect that in my solutions the bottlenecks will remain the out-of-process calls, i.e. database access and web service calls. Still, a 5x gain is not to be sniffed at.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="http://codebetter.com/blogs/patricksmacchia/archive/2008/11/19/an-easy-and-efficient-way-to-improve-net-code-performances.aspx">Interesting article</a> from <a href="http://codebetter.com/blogs/patricksmacchia">Patrick Smacchia</a> (the <a href="http://www.ndepend.com">NDepend</a> guy) in which he runs some benchmarks on the cost of looping in different ways over different constructs and comes to the conclusion that:</p>
<blockquote>
<p>“looping on array using for is <strong>5 times cheaper</strong> than looping on <code>List&lt;T&gt;</code> using foreach (which I believe, is what we all do)”</p></blockquote>
<p>Well worth a read, although I suspect that in my solutions the bottlenecks will remain the out-of-process calls, i.e. database access and web service calls. Still, a 5x gain is not to be sniffed at.</p>
<p><a href="http://codebetter.com/blogs/patricksmacchia/archive/2008/11/19/an-easy-and-efficient-way-to-improve-net-code-performances.aspx">Patrick Smacchia – An easy and efficient way to improve .NET code performance</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>A LINQ Gotcha – First Operator</title>
      <link>https://blog.iannelson.uk/a-linq-gotcha-first-operator/</link>
      <pubDate>Fri, 14 Dec 2007 14:12:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/a-linq-gotcha-first-operator/</guid>
      <description>&lt;p&gt;So, I was using the &lt;code&gt;First&lt;/code&gt; operator to return the first item element in a sequence matching a predicate.&lt;/p&gt;
&lt;p&gt;I expected a null to be returned if the sequence did not contain any matching elements, but found (well, Scott found) that this actually throws an InvalidOperationException.&lt;/p&gt;
&lt;p&gt;Turns out I should have been using the &lt;code&gt;FirstOrDefault&lt;/code&gt; operator instead…&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>So, I was using the <code>First</code> operator to return the first item element in a sequence matching a predicate.</p>
<p>I expected a null to be returned if the sequence did not contain any matching elements, but found (well, Scott found) that this actually throws an InvalidOperationException.</p>
<p>Turns out I should have been using the <code>FirstOrDefault</code> operator instead…</p>
]]></content:encoded>
    </item>
    <item>
      <title>MSDN Technical Roadshow 2007</title>
      <link>https://blog.iannelson.uk/msdn-technical-roadshow-2007/</link>
      <pubDate>Mon, 12 Mar 2007 22:03:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/msdn-technical-roadshow-2007/</guid>
      <description>&lt;p&gt;I’m off to the &lt;a href=&#34;http://www.microsoft.com/uk/techroadshow2007/msdn/default.mspx&#34;&gt;MSDN Technical roadshow&lt;/a&gt; in Harrogate tomorrow, and am actually really looking forward to it this time. These events are free, so always well worth attending when they’re local, but some years are certainly better than others – it mostly depends on the material being covered. I remember one year circa 2003-4, when .NET was well established, but before the Whidbey release, so the majority of the day was effectively just a sales pitch covering elementary .NET concepts, presumably for those laggards who hadn’t yet made the great leap from VB6. Another data-binding demo, anybody?  Yawn.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I’m off to the <a href="http://www.microsoft.com/uk/techroadshow2007/msdn/default.mspx">MSDN Technical roadshow</a> in Harrogate tomorrow, and am actually really looking forward to it this time. These events are free, so always well worth attending when they’re local, but some years are certainly better than others – it mostly depends on the material being covered. I remember one year circa 2003-4, when .NET was well established, but before the Whidbey release, so the majority of the day was effectively just a sales pitch covering elementary .NET concepts, presumably for those laggards who hadn’t yet made the great leap from VB6. Another data-binding demo, anybody?  Yawn.</p>
<p>By contrast, this time round there’s no shortage of exciting potential topics, and as I’ve mentioned recently, I’ve been having difficulty making time to get stuck into learning some of the new technologies that are on the horizon. So the opportunity of a day out watching some powerpoint presentations, demos, and trying to soak up an understanding of this stuff really appeals to me – is that sad?!</p>
<p>The two sessions I’m most looking forward to are <a href="http://www.danielmoth.com/Blog/">Daniel Moth</a> covering LINQ and other forthcoming language enhancements in the Orcas release, and <a href="http://blogs.msdn.com/mikeormond/default.aspx">Mike Ormond</a>&rsquo;s session on AJAX development. Should be good.</p>
<p>Oh, entertainingly, someone found my blog this week by Googling for <a href="http://www.google.com/search?q=%22msdn&#43;event%22&#43;dress&#43;code&amp;">“msdn event” dress code</a> – my advice is to go casual; stick to the usual geek staples of t-shirt with jeans or combats and you can’t go far wrong!</p>
]]></content:encoded>
    </item>
    <item>
      <title>A Serializable KeyValuePair Class</title>
      <link>https://blog.iannelson.uk/a-serializable-keyvaluepair-class/</link>
      <pubDate>Sun, 17 Sep 2006 17:09:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/a-serializable-keyvaluepair-class/</guid>
      <description>&lt;p&gt;Having accepted that &lt;a href=&#34;http://www.hanselman.com/blog/ReturningDataSetsFromWebServicesIsTheSpawnOfSatanAndRepresentsAllThatIsTrulyEvilInTheWorld.aspx&#34;&gt;Returning DataSets from WebServices is the Spawn of Satan and Represents All That Is Truly Evil in the World&lt;/a&gt; (or at least, not exactly best practice), I’ve been trying to make a conscious effort to instead use lightweight custom objects in my middle tier, to be exposed via web services for use by other applications. I felt sure that some of the new Generic classes in the .NET 2.0 FCL would help me in my quest. Specifically, as I often need to expose simple arrays of Key/Value Pair metadata, I planned to create an instance of the  &lt;code&gt;System.Collections.ObjectModel.Collection&lt;/code&gt; class, containing a bunch of &lt;code&gt;System.Collections.Generic.KeyValuePair&lt;/code&gt; objects.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Having accepted that <a href="http://www.hanselman.com/blog/ReturningDataSetsFromWebServicesIsTheSpawnOfSatanAndRepresentsAllThatIsTrulyEvilInTheWorld.aspx">Returning DataSets from WebServices is the Spawn of Satan and Represents All That Is Truly Evil in the World</a> (or at least, not exactly best practice), I’ve been trying to make a conscious effort to instead use lightweight custom objects in my middle tier, to be exposed via web services for use by other applications. I felt sure that some of the new Generic classes in the .NET 2.0 FCL would help me in my quest. Specifically, as I often need to expose simple arrays of Key/Value Pair metadata, I planned to create an instance of the  <code>System.Collections.ObjectModel.Collection</code> class, containing a bunch of <code>System.Collections.Generic.KeyValuePair</code> objects.</p>
<p>Well, this all seemed to go to plan, and worked just fine within my app. But when I exposed the method as a web service, I discovered that neither the Key nor the Value properties were serialized – I was left to consume a lovely generic collection of objects with no members – not a whole lot of use.</p>
<p>A little Googling turned up <a href="http://blogs.msdn.com/seshadripv/archive/2005/11/02/488273.aspx">this blog entry</a>, which explains that the Key and Value properties on the KeyValuePair class are both read-only, and by design the XmlSerializer will not serialize properties that don’t have a set accessor!</p>
<p>Damned if that little matter was going to stop me, I whipped out my copy of Lutz Roeder’s reflector to reverse engineer the <code>KeyValuePair</code> class (to be honest, I could have guessed most of it), and added a <em>private</em> set accessor to both properties, thus persuading the XmlSerializer to, well, do some serializing 🙂</p>
<p>Here’s the code for this new class:</p>



  

<script src="https://gist.github.com/ianfnelson/9862098.js?file=KeyValuePairThatSerializesProperly.cs"></script>
<p>Having done that, to add a little clarity when using this class in the way I anticipate and eliminate repeated code, I decided to create some specific versions of the <code>Collection</code>, <code>ReadOnlyCollection</code> and <code>KeyedCollection</code> classes:</p>



  

<script src="https://gist.github.com/ianfnelson/9862098.js?file=KeyValuePairCollection.cs"></script>



  

<script src="https://gist.github.com/ianfnelson/9862098.js?file=ReadOnlyKeyValuePairCollection.cs"></script>



  

<script src="https://gist.github.com/ianfnelson/9862098.js?file=KeyValuePairKeyedCollection.cs"></script>
]]></content:encoded>
    </item>
    <item>
      <title>Big Integer</title>
      <link>https://blog.iannelson.uk/big-integer/</link>
      <pubDate>Mon, 17 Jul 2006 08:07:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/big-integer/</guid>
      <description>&lt;p&gt;As I mentioned &lt;a href=&#34;https://blog.iannelson.uk/project-euler/&#34;&gt;last summer&lt;/a&gt;, I do enjoy whiling away a few hours attempting to solve the maths / progamming challenges set on &lt;a href=&#34;http://mathschallenge.net/index.php?section=project&#34;&gt;Project Euler&lt;/a&gt;. My language of choice for most puzzles is C#, but this hampered me on some of the questions as there is no in-built support for really big integers.&lt;/p&gt;
&lt;p&gt;However, a little bit of Googling and I came across this excellent &lt;a href=&#34;http://www.codeproject.com/csharp/biginteger.asp&#34;&gt;BigInteger class&lt;/a&gt; on Code Project which does everything I need and more – and it seems bloody fast, too. Thanks to this class, I’ve been able to knock off several more problems this weekend, and now have a rating of “11% Genius” – still some way to go, then…&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>As I mentioned <a href="https://blog.iannelson.uk/project-euler/">last summer</a>, I do enjoy whiling away a few hours attempting to solve the maths / progamming challenges set on <a href="http://mathschallenge.net/index.php?section=project">Project Euler</a>. My language of choice for most puzzles is C#, but this hampered me on some of the questions as there is no in-built support for really big integers.</p>
<p>However, a little bit of Googling and I came across this excellent <a href="http://www.codeproject.com/csharp/biginteger.asp">BigInteger class</a> on Code Project which does everything I need and more – and it seems bloody fast, too. Thanks to this class, I’ve been able to knock off several more problems this weekend, and now have a rating of “11% Genius” – still some way to go, then…</p>
]]></content:encoded>
    </item>
    <item>
      <title>Universal Comparer for .NET</title>
      <link>https://blog.iannelson.uk/universal-comparer-for-net/</link>
      <pubDate>Mon, 27 Feb 2006 22:02:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/universal-comparer-for-net/</guid>
      <description>&lt;p&gt;Back in November 2004, I had the idea of making a &amp;ldquo;&lt;a href=&#34;https://blog.iannelson.uk/a-generic-sorter-for-strongly-typed-collections/&#34;&gt;Generic Sorter for Strongly-Typed Collections&lt;/a&gt;&amp;rdquo;, by harnessing the mighty power of reflection. Well, earlier this month somebody anonymously emailed me some code that takes this to a whole different level, enabling sorting on multiple properties and to arbitrary depths within the domain model hierarchy, all by taking a single SQL-like parameter. It’s really very clever indeed, and I’m going to use this method in the future – thanks, anonymous code fairy!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Back in November 2004, I had the idea of making a &ldquo;<a href="https://blog.iannelson.uk/a-generic-sorter-for-strongly-typed-collections/">Generic Sorter for Strongly-Typed Collections</a>&rdquo;, by harnessing the mighty power of reflection. Well, earlier this month somebody anonymously emailed me some code that takes this to a whole different level, enabling sorting on multiple properties and to arbitrary depths within the domain model hierarchy, all by taking a single SQL-like parameter. It’s really very clever indeed, and I’m going to use this method in the future – thanks, anonymous code fairy!</p>
<p>Oh, while I’m at it, I decided to rename the class, as the use of &ldquo;Generic&rdquo; could be confusing now we have the generic language feature in .NET 2.0. Also, this class doesn’t actually do the sorting, it just implements IComparer to do the comparing. So, with the help of a thesaurus, I settled on &ldquo;UniversalComparer&rdquo;!</p>



<script src="https://gist.github.com/ianfnelson/9861758.js"></script>
]]></content:encoded>
    </item>
    <item>
      <title>String.IsNullOrEmpty</title>
      <link>https://blog.iannelson.uk/string-isnullorempty/</link>
      <pubDate>Sat, 25 Feb 2006 14:02:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/string-isnullorempty/</guid>
      <description>&lt;p&gt;The single most popular entry on this blog is, surprisingly enough, this &lt;a href=&#34;https://blog.iannelson.uk/is-my-string-empty-some-c-performance-metrics/&#34;&gt;quick post from Summer 2004&lt;/a&gt; where I did a quick experiment to &amp;ldquo;prove&amp;rdquo; that in .NET the quickest way of proving that a string is empty is to compare its length to zero.&lt;/p&gt;
&lt;p&gt;Well, as of .NET 2.0, we have a new static method on the System.String class – &lt;code&gt;IsNullOrEmpty&lt;/code&gt; – that allows you to easily test whether a string is, well, null or empty!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>The single most popular entry on this blog is, surprisingly enough, this <a href="https://blog.iannelson.uk/is-my-string-empty-some-c-performance-metrics/">quick post from Summer 2004</a> where I did a quick experiment to &ldquo;prove&rdquo; that in .NET the quickest way of proving that a string is empty is to compare its length to zero.</p>
<p>Well, as of .NET 2.0, we have a new static method on the System.String class – <code>IsNullOrEmpty</code> – that allows you to easily test whether a string is, well, null or empty!</p>
<p>It’s one of many convenience methods in the .NET 2.0 FCL that tend to get overlooked as developers (perhaps rightly) focus on the big new features such as nullable types, generics, partial classes, etc. I find this method particularly handy when validating parameters passed to publicly-visible methods, as in:</p>
<pre tabindex="0"><code>public void SayHello(string name)  
{    
    if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(&#34;name&#34;);    
    Console.WriteLine(string.Concat(&#34;Hello, &#34;, name));
}
</code></pre><p>It’s not brain surgery, but it does make the resulting code a little cleaner than in the .NET 1.1 days. Oh, and in case you’re wondering, here’s how the method is implemented in System.String (thanks to <a href="http://www.aisto.com/roeder/dotnet">Lutz Roeder’s Reflector</a>):</p>
<pre tabindex="0"><code>public static bool IsNullOrEmpty(string value)  
{    
    if ( value != null ) 
    { 
        return ( value.Length == 0 );
    }    
    return true;
}
</code></pre><p>More info:</p>
<ul>
<li><a href="http://msdn2.microsoft.com/en-us/library/490acw3e%28vs.80%29.aspx">MSDN documentation</a></li>
<li><a href="http://www.gotdotnet.com/team/fxcop/Docs/Rules/Performance/TestForEmptyStringsUsingStringLength.html">FxCop violation documentation</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>ASP.NET 2.0 – one month on</title>
      <link>https://blog.iannelson.uk/asp-net-2-0-one-month-on/</link>
      <pubDate>Sat, 10 Dec 2005 19:12:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/asp-net-2-0-one-month-on/</guid>
      <description>&lt;p&gt;It’s over a month now since Visual Studio 2005 officially RTM’d, and during that time I’ve been fortunate enough to have been using it for the majority of my time on most working days. One of the things we’re trying to achieve is the integration of several distinct internal corporate web applications into a bespoke portal system, with single sign-on, common authorization model, common look and feel, etc. There’s been quite a heavy R&amp;amp;D / proof-of-concept aspect to the workload so far, as we try out different ways of achieving this, and grow familiar with the new technologies available to us in ASP.NET 2.0.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>It’s over a month now since Visual Studio 2005 officially RTM’d, and during that time I’ve been fortunate enough to have been using it for the majority of my time on most working days. One of the things we’re trying to achieve is the integration of several distinct internal corporate web applications into a bespoke portal system, with single sign-on, common authorization model, common look and feel, etc. There’s been quite a heavy R&amp;D / proof-of-concept aspect to the workload so far, as we try out different ways of achieving this, and grow familiar with the new technologies available to us in ASP.NET 2.0.</p>
<p>I thought I’d share with you a few of the links that have been of most help to me over the past month or so:</p>
<ul>
<li><a href="http://weblogs.asp.net/scottgu/">Scott Guthrie’s Blog</a>. If you develop ASP.NET applications, this is the one site, above all others, to which you should subscribe. Every single one of Scott’s posts provides extremely useful tips and tricks – such as <a href="http://weblogs.asp.net/scottgu/archive/2005/11/11/430382.aspx">Tips For Nested Master Pages and Design Time</a>, <a href="http://weblogs.asp.net/scottgu/archive/2005/11/18/430943.aspx">How to Change the Default Browser</a> (not obvious, is it?). More importantly, it’s here that you’ll first learn about VS2005 add-ons such as <a href="http://weblogs.asp.net/scottgu/archive/2005/11/06/429723.aspx">Web Deployment Projects</a> and the forthcoming new <a href="http://weblogs.asp.net/scottgu/archive/2005/12/07/432630.aspx">Web Project Model</a>.</li>
<li><a href="http://pluralsight.com/blogs/craig/archive/2005/10/19/15696.aspx">Serializing a KeyedCollection</a>. It doesn’t work, but it’s not your fault – it’s a bug in the .NET Framework. Had I found this page earlier I would have saved myself multiple hours of frustration.</li>
<li>Another serialization problem that foxed me for a while – I had a custom Principal object in a locally referenced assembly. Every time I tried to set my Context.User to an instance of this, I got a SerializationException with a “Type is not resolved..” message. Huh?  More Googling threw up <a href="http://tinyurl.com/7tp97">this post</a> [Google Groups] from Nov 29 explaining the issue and giving some workarounds.</li>
<li><a href="http://weblogs.asp.net/dwahlin/archive/2005/11/16/430779.aspx">Dan Wahlin – Sharing Master Pages across IIS Applications</a>. This is *exactly* what we’ve been trying to do – Dan’s post gave us a real leg-up.</li>
<li><a href="http://blogs.msdn.com/davidebb/archive/2005/10/30/487160.aspx">David Ebbo – Turning an ascx user control into a redistributable server control</a>. Sounds like a neat trick, although I haven’t had cause to try it yet.</li>
<li><a href="http://west-wind.com/weblog/posts/3016.aspx">Rich Strahl – Understanding Page Inheritance in ASP.NET 2.0</a>. If you’ve got into the habit of dynamically loading user controls into your pages in ASP.NET 1.1, and were planning on doing the same going forward, then you should check out Rick’s article first. Things aren’t quite as straightforward as they used to be…</li>
<li><a href="http://msdn.microsoft.com/asp.net/reference/design/default.aspx?pull=/library/en-us/dnaspp/html/aspnetusstan.asp">MSDN: Building ASP.NET 2.0 Web Sites using Web Standards</a>. Don’t scoff, it’s an important topic!  I’ve been waiting for valid (X)HTML output from Visual Studio for a long time, I’m glad to see MS are finally taking standards (and Accessibility) seriously.</li>
<li><a href="http://msdn.microsoft.com/library/default.asp?url=https://blog.iannelson.uk/library/en-us/dnaspp/html/GridViewEx.asp">MSDN: GridView Examples</a>. <a href="http://www.scottonwriting.net/sowBlog/">Scott Mitchell’s</a> huge (122 page) article explaining how to do anything (well, almost) with the GridView control. Talking of which, you could do worse than also subscribe to Marcie Robillard’s new site, <a href="http://www.gridviewgirl.com/GridViewGirl/">GridViewGirl</a>.</li>
</ul>
<p>Also, two books which have really helped me get up to speed:</p>
<ul>
<li><a href="http://www.amazon.co.uk/exec/obidos/ASIN/0764559885">Professional .NET Generics</a> – a Wrox book (not a huge one, thankfully) on this useful new (to .NET) programming feature.</li>
<li><a href="http://www.amazon.co.uk/exec/obidos/ASIN/0596008120">ASP.NET 2.0 – A Developer’s Notebook</a>. One of those books from the O’Reilly “notebook” series that aims to get you up to speed quickly on new features. It works.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Stopwatch Class for .NET 1.1</title>
      <link>https://blog.iannelson.uk/stopwatch-class-for-net-1-1/</link>
      <pubDate>Tue, 05 Jul 2005 09:07:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/stopwatch-class-for-net-1-1/</guid>
      <description>&lt;p&gt;Paul Welter has backported the System.Diagnostics.Stopwatch class from .NET 2.0 to 1.1. Handy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://weblogs.asp.net/pwelter34/archive/2005/07/01/416999.aspx&#34;&gt;http://weblogs.asp.net/pwelter34/archive/2005/07/01/416999.aspx&lt;/a&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Paul Welter has backported the System.Diagnostics.Stopwatch class from .NET 2.0 to 1.1. Handy.</p>
<p><a href="http://weblogs.asp.net/pwelter34/archive/2005/07/01/416999.aspx">http://weblogs.asp.net/pwelter34/archive/2005/07/01/416999.aspx</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>New Recommendations for String Comparisons in .NET 2.0</title>
      <link>https://blog.iannelson.uk/new-recommendations-for-string-comparisons-in-net-2-0/</link>
      <pubDate>Mon, 04 Jul 2005 19:07:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/new-recommendations-for-string-comparisons-in-net-2-0/</guid>
      <description>&lt;p&gt;I know it’s a rather geeky and dry subject, but I found &lt;a href=&#34;http://msdn.microsoft.com/netframework/default.aspx?pull=/library/en-us/dndotnet/html/StringsinNET20.asp&#34;&gt;this MSDN article on new recommendations for using strings in .NET 2.0&lt;/a&gt; quite interesting. It’s going to be difficult to stop using CultureInfo.InvariantCulture habitually!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I know it’s a rather geeky and dry subject, but I found <a href="http://msdn.microsoft.com/netframework/default.aspx?pull=/library/en-us/dndotnet/html/StringsinNET20.asp">this MSDN article on new recommendations for using strings in .NET 2.0</a> quite interesting. It’s going to be difficult to stop using CultureInfo.InvariantCulture habitually!</p>
]]></content:encoded>
    </item>
    <item>
      <title>eXtreme .NET</title>
      <link>https://blog.iannelson.uk/extreme-net/</link>
      <pubDate>Sat, 18 Jun 2005 21:06:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/extreme-net/</guid>
      <description>&lt;p&gt;Up at 0500 yesterday and onto the early GNER Mallard down to that London town for the MSDN briefing on eXtreme programming with .NET. It was pleasant not to be driving for a change, and speeding through the Yorkshire countryside early on a midsummer morning was very relaxing – what a stark contrast with the hot crowded tube that I had to catch on arrival to the big smoke. Three stops down to Oxford Circus seemed to last as long as the entire preceeding train journey. How people do this every single day I do not know..&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Up at 0500 yesterday and onto the early GNER Mallard down to that London town for the MSDN briefing on eXtreme programming with .NET. It was pleasant not to be driving for a change, and speeding through the Yorkshire countryside early on a midsummer morning was very relaxing – what a stark contrast with the hot crowded tube that I had to catch on arrival to the big smoke. Three stops down to Oxford Circus seemed to last as long as the entire preceeding train journey. How people do this every single day I do not know..</p>
<p>Anyway, I digress. The tech briefing was excellent, a full day’s set of presentations on eXtreme development practices by the very erudite and engaging <a href="http://www.roodyn.com/">Dr Neil Roodyn</a>, with additional demos by some of the MSDN UK guys. During questioning, nobody in the audience was arguing against using the XP practices espoused, in fact most questioners simply wanted to know how to get project managers and business leaders bought in to the ideas. The general consensus was that suits and customers don’t want to hear about pair programming and <a href="http://www.testdriven.com/">TDD</a>, they want to see devs working on coding new functionality, which is obviously frustrating for those of us cutting the code. Hopefully sessions like the one on Friday will help to inspire a groundswell of enthusiasm for agile practices amongst developers and team leads which the business leaders will eventually be unable to ignore. Dr Neil suggested that we don’t try to immediately enforce all 12 XP principles in our workplaces, but start using those which work for us, basically those which we can sneak in under the managements noses!  Nobody can stop you from writing unit tests and adopting a TDD approach to your coding, and may only start asking questions when they see how much more productive you’re becoming, and how fewer bugs are found in your code. After all, producing quality code is your job, and nobody will stop you from doing your job well.</p>
<hr>
<p>While I remember, some of the books mentioned by Neil were:</p>
<ul>
<li><a href="http://www.amazon.co.uk/exec/obidos/ASIN/0201604566">&ldquo;Software For Your Head&rdquo; by Jim McCarthy</a></li>
<li><a href="http://www.amazon.co.uk/exec/obidos/ASIN/0349113467">&ldquo;The Tipping Point&rdquo; by Malcolm Gladwell</a></li>
<li><a href="http://www.amazon.co.uk/exec/obidos/ASIN/1587991845">&ldquo;Fooled By Randomness&rdquo; by Nassim Nicholas Taleb</a></li>
</ul>
<p>and I have noted down that I should find the time to visit:</p>
<ul>
<li><a href="http://www.microsoft.com/uk/msdn/postevents">http://www.microsoft.com/uk/msdn/postevents</a> – for a copy of the slides</li>
<li><a href="http://agilealliance.com">http://agilealliance.com</a></li>
<li><a href="http://www.xpertise.co.uk">http://www.xpertise.co.uk</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Tech Books</title>
      <link>https://blog.iannelson.uk/tech-books/</link>
      <pubDate>Sat, 18 Jun 2005 21:06:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/tech-books/</guid>
      <description>&lt;p&gt;I succumbed to temptation and bought another book at the MSDN briefing yesterday, pausing only out of concern that the guy who mans the &lt;a href=&#34;http://www.computermanuals.co.uk&#34;&gt;Computer Manuals&lt;/a&gt; stand at these events might think that I’m stalking him (or fancy him!). Having determined that I could hand over my Barclaycard whilst flashing my wedding ring, I brought my current reading list up to three:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.uk/exec/obidos/ASIN/078214361X&#34;&gt;Developer to Designer: GUI Design for the Busy Developer&lt;/a&gt; – this was a wedding present from my mother-in-law and is proving to be an interesting, easy-going read so far. My competencies lie in the middle tier and database, and although I’m technically capable of making GUIs, I prefer to leave the design up to others. It’s inevitable though that most coders end up doing some design, and this book is, er, designed (sorry) to help with that process. The early section of the book concentrates on each UI element in turn, whilst the later part of the book looks at putting it all together, and has particular focus on the web – layout design patterns and interaction patterns. It’s a good read, making a nice contrast from the heavier books, and I’m pleased to learn that I’m not alone in hating Outlook’s labyrinthine Tools-&amp;gt;Options dialog!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I succumbed to temptation and bought another book at the MSDN briefing yesterday, pausing only out of concern that the guy who mans the <a href="http://www.computermanuals.co.uk">Computer Manuals</a> stand at these events might think that I’m stalking him (or fancy him!). Having determined that I could hand over my Barclaycard whilst flashing my wedding ring, I brought my current reading list up to three:</p>
<p><a href="http://www.amazon.co.uk/exec/obidos/ASIN/078214361X">Developer to Designer: GUI Design for the Busy Developer</a> – this was a wedding present from my mother-in-law and is proving to be an interesting, easy-going read so far. My competencies lie in the middle tier and database, and although I’m technically capable of making GUIs, I prefer to leave the design up to others. It’s inevitable though that most coders end up doing some design, and this book is, er, designed (sorry) to help with that process. The early section of the book concentrates on each UI element in turn, whilst the later part of the book looks at putting it all together, and has particular focus on the web – layout design patterns and interaction patterns. It’s a good read, making a nice contrast from the heavier books, and I’m pleased to learn that I’m not alone in hating Outlook’s labyrinthine Tools-&gt;Options dialog!</p>
<p><a href="http://www.amazon.co.uk/exec/obidos/ASIN/0321245660">Effective C#: 50 Specific Ways to Improve Your C#</a> – another good read that isn’t too heavy, this is a good book of short hints and tips to dip into when waiting for the latest CTPs of VS and SQL Server to install (well, at least that’s when I’ve found myself reading it). Depending on your level of experience with C#, you may find some of these suggestions are teaching you to suck eggs, but they all come with detailed justifications that provide useful insights into .NET internals, and out of fifty points you’re bound to find something that you didn’t previously know. If you’re new to C#, get this book now and put it’s suggestions into practice from the start. If you think you’re an expert, borrow a copy and use it as a checklist of your knowledge.</p>
<p><a href="http://www.amazon.co.uk/exec/obidos/ASIN/0596007124">Head First Design Patterns</a> – this is the book I picked up yesterday (yes, partly because of the cute blonde on the cover), but it was the outstanding content that stopped me putting it down again. This doesn’t feel like a normal O’Reilly book, and it feels very far removed from the original Gang of Four’s Design Patterns book – yet it covers the same material. This is a patterns book that won’t send you to sleep, that will make you laugh, that will make those tricky concepts sink in and your misconceptions float away. It’s cool, clever, succinct and quite unlike any other tech book I’ve read. The only slight downer is that all the examples are in Java, but this really shouldn’t be an issue for any half-competent C# developer. Superb.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Framework for Persisting .NET Classes Into SQL Server Image Fields, With Locking Ability</title>
      <link>https://blog.iannelson.uk/framework-for-persisting-net-classes-into-sql-server-image-fields-with-locking-ability/</link>
      <pubDate>Tue, 18 Jan 2005 23:01:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/framework-for-persisting-net-classes-into-sql-server-image-fields-with-locking-ability/</guid>
      <description>&lt;p&gt;There seems to have been a lack of .NET-related stuff on this blog recently, so let me show you something I cobbled together for work purposes last Wednesday:&lt;/p&gt;
&lt;p&gt;A common requirement we have in our ASP.NET applications is how to reliably persist object instances for a lengthy period of time. End users shouldn’t have to concern themselves with the concept of Session expiry, and it’s unacceptable for them to return to their PC after nipping off for a coffee to be confronted with the dreaded &amp;ldquo;Object reference not set to an instance of an object&amp;rdquo; when they try to continue editing their basket / sales order / timesheet / whatever.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>There seems to have been a lack of .NET-related stuff on this blog recently, so let me show you something I cobbled together for work purposes last Wednesday:</p>
<p>A common requirement we have in our ASP.NET applications is how to reliably persist object instances for a lengthy period of time. End users shouldn’t have to concern themselves with the concept of Session expiry, and it’s unacceptable for them to return to their PC after nipping off for a coffee to be confronted with the dreaded &ldquo;Object reference not set to an instance of an object&rdquo; when they try to continue editing their basket / sales order / timesheet / whatever.</p>
<p>One pattern to solve this, detailed by <a href="http://www.martinfowler.com">Martin Fowler</a> in <a href="http://www.amazon.co.uk/exec/obidos/ASIN/0321127420">Patterns of Enterprise Application Architecture</a>, is the <strong>Serialized LOB</strong> (Large Object), which works by serializing the object in question into binary or text which is then stored in a single database field.</p>
<p>An excellent example of how to achieve this using SQL Server and .NET is given by <a href="http://www.eggheadcafe.com/articles/20020929.asp">Peter A Bromberg in this Egghead Cafe article</a>.</p>
<p>Building on this example, I’ve put together a generic assembly for persisting and retrieving serializable classes into SQL Server, referenced by a combination of two strings (a username and a key). It is essentially an alternative to storing objects in Session or ViewState. As an additional benefit, it allows you to &ldquo;lock&rdquo; objects based on the key, so that only one user can store the same object at a given point in time.</p>
<p>The zip file below includes the source and a SQL script for setting up the required database table and four stored procedures, as well as some unit tests (yes, I am sticking to my New Year’s Resolution!).</p>
<p>The DataStore class contains the various static methods necessary to add, retrieve and delete objects from the store. For example, to save an object you can simply make a call along the lines of:</p>
<p><code>DataStore.Add(&quot;joebloggs&quot;,&quot;order1234&quot;,objOrder);</code></p>
<p>Note that if an object already exists in the store for a given user/key combination, it will be overwritten.</p>
<p>If you additionally want to ensure that no other users have also stored an object with the same name into the store, pass true into the optional fourth parameter:</p>
<p><code>DataStore.Add(&quot;joebloggs&quot;,&quot;order1234&quot;,objOrder,true);</code></p>
<p>this would throw an ObjectLockedException if any user other than “joebloggs” had previously locked an object called “order1234”.</p>
<p>To retrieve an object, use the Get method. If the object is not found, this will return null. Otherwise, an instance of PersistedObject will be returned – this details information such the datetime at which the object was originally stored and last stored, as well as whether it is locked. The actual object itself is accessible through a &ldquo;StoredObject&rdquo; property.</p>
<p>So, to retrieve the sales order object above from the store, a call would be like this:</p>
<p><code>SalesOrder objOrder = DataStore.Get(&quot;joebloggs&quot;,&quot;order1234&quot;).StoredObject as SalesOrder;</code></p>
<p>That’s pretty much it. There are also methods to retrieve a collection of objects from the store (GetByUser, GetByKey), as well as methods to remove objects from the store (Remove, RemoveByKey, RemoveByUser, Clear).</p>
<p>Feel free to use and cannibalize this code as you see fit. Let me know if you find it useful or interesting, and of course if you have any suggestions for improvements. Oh, and of course it should go without saying that I make no guarantee as to the suitability of this code for any purpose and accept no responsibility for any loss of data etcetera!</p>
<hr>
<p><strong>Updated 30 October 2005:</strong></p>
<p>I’ve reworked this code for .NET 2.0, and removed the dependency on the Microsoft Data Access Application Block. Also, the NUnit tests have been replaced with VS2005 unit tests.</p>
<p><strong>Updated 17 October 2011:</strong></p>
<p>This project has been <a href="https://github.com/ianfnelson/DataStorage">migrated to GitHub</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>A Generic Sorter For Strongly-Typed Collections</title>
      <link>https://blog.iannelson.uk/a-generic-sorter-for-strongly-typed-collections/</link>
      <pubDate>Sun, 07 Nov 2004 21:11:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/a-generic-sorter-for-strongly-typed-collections/</guid>
      <description>&lt;p&gt;Late last night I was doing some development work on a website for our investment club. I had a strongly-typed collection of &amp;ldquo;Stock&amp;rdquo; objects, and wanted to be able to sort them on any parameter (StockName, SharePrice, Volume, MarketCap, etc..) in either descending or ascending order. I didn’t want to have to write a separate comparer for each property. Reflection to the rescue! Below is a GenericSorter class, the use of which allows for the development of a Sort() method on the collection taking as a parameter the name of the property on which to sort. Smart.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Late last night I was doing some development work on a website for our investment club. I had a strongly-typed collection of &ldquo;Stock&rdquo; objects, and wanted to be able to sort them on any parameter (StockName, SharePrice, Volume, MarketCap, etc..) in either descending or ascending order. I didn’t want to have to write a separate comparer for each property. Reflection to the rescue! Below is a GenericSorter class, the use of which allows for the development of a Sort() method on the collection taking as a parameter the name of the property on which to sort. Smart.</p>



<script src="https://gist.github.com/ianfnelson/9842860.js"></script>
<p>Bob’s your uncle.</p>
<p><strong>Update</strong> [2006-02-27]: The above class is no match for some <a href="https://blog.iannelson.uk/universal-comparer-for-net/">much more fully-featured code</a> that was anonymously sent to me earlier this month which allows for sorting on multiple properties to arbitrary depth within the domain object model, using a simple SQL-like syntax. <a href="https://blog.iannelson.uk/universal-comparer-for-net/">Check it out…</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>NHibernate</title>
      <link>https://blog.iannelson.uk/nhibernate/</link>
      <pubDate>Fri, 03 Sep 2004 19:09:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/nhibernate/</guid>
      <description>&lt;p&gt;There’s &lt;em&gt;so&lt;/em&gt; much good open-source .Net development going on these days – .Text, nGallery, nUnit, etc – it’s a really interesting time to be a developer. My colleague Colin just drew my attention to &lt;a href=&#34;http://sourceforge.net/projects/nhibernate&#34;&gt;nHibernate&lt;/a&gt;, an object persistence library for relational databases. &lt;a href=&#34;http://www.theserverside.net/articles/showarticle.tss?id=NHibernate&#34;&gt;TheServerSide.net&lt;/a&gt; has an excellent article summarising its use. Having just finished a long project where a large amount of time was spent writing “plumbing” code to persist objects to and from a SQL Server database, I’m finding the idea of using an O/R mapper such as this very appealing the next time round. Just as incorporating the &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=https://blog.iannelson.uk/library/en-us/dnbda/html/daab-rm.asp&#34;&gt;MS DAAB block&lt;/a&gt; into solutions has reduced the amount of data access code required, I’m hopeful that embracing frameworks such as nHibernate will leave us with more time to spend focusing on addressing the business needs and less on re-solving technical issues.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>There’s <em>so</em> much good open-source .Net development going on these days – .Text, nGallery, nUnit, etc – it’s a really interesting time to be a developer. My colleague Colin just drew my attention to <a href="http://sourceforge.net/projects/nhibernate">nHibernate</a>, an object persistence library for relational databases. <a href="http://www.theserverside.net/articles/showarticle.tss?id=NHibernate">TheServerSide.net</a> has an excellent article summarising its use. Having just finished a long project where a large amount of time was spent writing “plumbing” code to persist objects to and from a SQL Server database, I’m finding the idea of using an O/R mapper such as this very appealing the next time round. Just as incorporating the <a href="http://msdn.microsoft.com/library/default.asp?url=https://blog.iannelson.uk/library/en-us/dnbda/html/daab-rm.asp">MS DAAB block</a> into solutions has reduced the amount of data access code required, I’m hopeful that embracing frameworks such as nHibernate will leave us with more time to spend focusing on addressing the business needs and less on re-solving technical issues.</p>
<p>If anyone has had experience of using nHibernate or similar O/R mapper in an enterprise .NET project, I’d be interesting in hearing your opinions. Would you use it again? Did it genuinely help to abstract away the object persistence/retrieval mechanisms from the domain model, or is it just one more layer to worry about and keep up to date? Let me know.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Is My String Empty?  Some C# Performance Metrics</title>
      <link>https://blog.iannelson.uk/is-my-string-empty-some-c-performance-metrics/</link>
      <pubDate>Fri, 30 Jul 2004 10:07:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/is-my-string-empty-some-c-performance-metrics/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update (25/02/2006)&lt;/strong&gt; – Hey, we now have &lt;a href=&#34;https://blog.iannelson.uk/string-isnullorempty/&#34;&gt;String.IsNullOrEmpty&lt;/a&gt;, you know!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;What’s the quickest way, in C#, to test whether a string is empty? This is a question which came to my mind yesterday. I’ve always been fond of:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if (myString==String.Empty)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;but it occured to me that this necessitates the creation and destruction of a second object (the empty string with which we’re comparing), so maybe it would be quicker to write:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Update (25/02/2006)</strong> – Hey, we now have <a href="https://blog.iannelson.uk/string-isnullorempty/">String.IsNullOrEmpty</a>, you know!</p>
<hr>
<p>What’s the quickest way, in C#, to test whether a string is empty? This is a question which came to my mind yesterday. I’ve always been fond of:</p>
<p><code>if (myString==String.Empty)</code></p>
<p>but it occured to me that this necessitates the creation and destruction of a second object (the empty string with which we’re comparing), so maybe it would be quicker to write:</p>
<p><code>if (myString.Length==0)</code></p>
<p>And looking through some existing code I also found examples of:</p>
<p><code>if String.Equals(myString,String.Empty)</code></p>
<p>I decided that an experiment was in order, so wrote a quick windows application to try each method in turn. I was also interested to see if there was a difference in performance where the result was true than when it was false.</p>
<p>Here are the results, with times in milliseconds for 50 million iterations:</p>
<table>
  <thead>
      <tr>
          <th></th>
          <th>true result</th>
          <th>false result</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>myString==String.Empty</code></td>
          <td>1172</td>
          <td>2484</td>
      </tr>
      <tr>
          <td><code>myString.Length==0</code></td>
          <td>531</td>
          <td>531</td>
      </tr>
      <tr>
          <td><code>String.Equals(myString,String.Empty)</code></td>
          <td>611</td>
          <td>1893</td>
      </tr>
  </tbody>
</table>
<p>So there you have it. Experimental evidence that the fastest way to test for an empty string is to test whether it’s Length property is zero (and that this also takes exactly the same length of time irrespective of whether the result is true or false).. unless anyone knows of a quicker method? Of course, since we’re only saving ourselves around 50 nanoseconds per iteration against using the slowest method shown above, this is hardly going to result in a noticeable performance gain!!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Inheriting From BaseValidator to Make Custom Validation Controls</title>
      <link>https://blog.iannelson.uk/inheriting-from-basevalidator-to-make-custom-validation-controls/</link>
      <pubDate>Wed, 30 Jun 2004 19:06:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/inheriting-from-basevalidator-to-make-custom-validation-controls/</guid>
      <description>&lt;p&gt;For months now, I’ve been desperate for a decent excuse to make a custom ASP.NET server control, so I was secretly pleased today when a CustomValidator originally coded for use on a single page was required elsewhere.&lt;/p&gt;
&lt;p&gt;It’s surprisingly easy to do, although it took me a while to find a decent example online, which eventually came courtesy of the &lt;a href=&#34;http://www.4guysfromrolla.com/webtech/tips/t040302-1.shtml&#34;&gt;4GuysFromRolla&lt;/a&gt;. In my particular scenario, I needed to check that the text entered into a TextBox did not equal any of a selection of &amp;ldquo;banned&amp;rdquo; strings (which was available via a static property on another class).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>For months now, I’ve been desperate for a decent excuse to make a custom ASP.NET server control, so I was secretly pleased today when a CustomValidator originally coded for use on a single page was required elsewhere.</p>
<p>It’s surprisingly easy to do, although it took me a while to find a decent example online, which eventually came courtesy of the <a href="http://www.4guysfromrolla.com/webtech/tips/t040302-1.shtml">4GuysFromRolla</a>. In my particular scenario, I needed to check that the text entered into a TextBox did not equal any of a selection of &ldquo;banned&rdquo; strings (which was available via a static property on another class).</p>
<p>Having added a new custom web control, deriving from BaseValidator, my first task was therefore to ensure that the control being validated really was a TextBox – this was done by overriding the <code>ControlPropertiesValid()</code> method:</p>



  

<script src="https://gist.github.com/ianfnelson/9842442.js?file=ControlPropertiesValid.cs"></script>
<p>That done, I just had to override the <code>EvaluateIsValid()</code> method, which does the actual validation:</p>



  

<script src="https://gist.github.com/ianfnelson/9842442.js?file=EvaluateIsValid.cs"></script>
<p>&hellip;and that was it. Job done, pretty much. OK, so I spent a while making a cute icon image too. But the coding was easy and straightforward – inheriting from BaseValidator meant that most of the work was already done for me. In no time at all I was able to drop this custom control onto the required pages and user controls.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>

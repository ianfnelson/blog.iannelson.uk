<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C# on Ian Nelson</title>
    <link>https://blog.iannelson.uk/tags/c%23/</link>
    <description>Recent content in C# on Ian Nelson</description>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 May 2025 17:45:45 +0100</lastBuildDate>
    <atom:link href="https://blog.iannelson.uk/tags/c%23/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Who Reigns Supreme? Parsing Our WhatsApp Chat for Wordle Glory</title>
      <link>https://blog.iannelson.uk/who-reigns-supreme-parsing-our-whatsapp-chat-for-wordle-glory/</link>
      <pubDate>Tue, 31 Dec 2024 15:42:39 +0000</pubDate>
      <guid>https://blog.iannelson.uk/who-reigns-supreme-parsing-our-whatsapp-chat-for-wordle-glory/</guid>
      <description>&lt;p&gt;Back in 2022, in a bid to outwit my mother in our daily Wordle battles, I wrote some C# code to explore optimal starting guesses. &lt;a href=&#34;https://blog.iannelson.uk/the-best-wordle-starter-words/&#34;&gt;You can read about that experiment here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fast forward two years, and my Wordle addiction is alive and well. The daily challenge remains as compelling as ever, but it’s the family WhatsApp group – where scores are shared, victories boasted, and failures commiserated – that adds an extra layer of fun.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Back in 2022, in a bid to outwit my mother in our daily Wordle battles, I wrote some C# code to explore optimal starting guesses. <a href="https://blog.iannelson.uk/the-best-wordle-starter-words/">You can read about that experiment here</a>.</p>
<p>Fast forward two years, and my Wordle addiction is alive and well. The daily challenge remains as compelling as ever, but it’s the family WhatsApp group – where scores are shared, victories boasted, and failures commiserated – that adds an extra layer of fun.</p>
<p>As 2024 winds down, I decided to dust off my coding skills and whip up a quick C# console application. The goal? To parse an export of our WhatsApp chat, gather all the shared Wordle scores, and find out if my strategies have paid off this year. Spoiler alert: they haven’t.</p>
<p>If you’ve got a similar Wordle-centric group chat with family or friends and fancy crowning your own Wordle Champion of the Year, the source code is available on GitHub: <a href="https://github.com/ianfnelson/WordleParser">WordleParser</a>.</p>
<h2 id="how-it-works">How It Works</h2>
<p>The application takes a single argument: the path to an exported chat text file. It parses the file using a <a href="https://github.com/ianfnelson/WordleParser/blob/main/WordleParser/WordleParser.cs#L46">regular expression</a> to extract anything resembling a Wordle score. <a href="https://github.com/ianfnelson/WordleParser/blob/main/WordleParser/WordleParser.cs#L27">Duplicate scores are weeded out</a>, and the <a href="https://github.com/ianfnelson/WordleParser/blob/main/WordleParser/WordleParser.cs#L32">average family score for each calendar day is logged</a>. For those unfortunate days when a puzzle remains unsolved, the application <a href="https://github.com/ianfnelson/WordleParser/blob/main/WordleParser/WordleParser.cs#L59">assigns a ‘seven’</a> to reflect the failure.</p>
<p>The app then aggregates scores into calendar <a href="https://github.com/ianfnelson/WordleParser/blob/main/WordleParser/WordleParser.cs#L17">months</a> and <a href="https://github.com/ianfnelson/WordleParser/blob/main/WordleParser/WordleParser.cs#L11">years</a>, <a href="https://github.com/ianfnelson/WordleParser/blob/main/WordleParser/WordleParser.cs#L76">calculating each family member’s stats for the chosen date range</a>. Participants are ranked based on their mean difference from the average family score per day.</p>
<p>For example, if three family members scored a 4, but one managed a dazzling 2, the day’s average would be 3.5. The three “fours” would each have a daily difference of +0.5, while the lucky “two” would boast a difference of -1.5.</p>
<h2 id="the-results">The Results</h2>
<p>So, who triumphed in the Nelson family Wordle-off this year? Did my painstaking analysis from 2022 finally give me the edge?</p>
<p>Reader, it did not.</p>
<p>Despite my best efforts, I only just managed to sneak into second place. Predictably, my mother reigned supreme, crushing us all with an average score of <strong>4.055</strong> and a mean difference from the family average of <strong>-0.128</strong>. This consistency made her our undisputed <strong>Wordle Family Champion of 2024</strong>.</p>
<p><img alt="Nelson Family Wordle Champion 2024" loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2024/12/7DD41AB4-B664-4276-B1A1-3E9EA0F0DFB7-1.jpeg"></p>
]]></content:encoded>
    </item>
    <item>
      <title>A C# Postcode Struct with Parser</title>
      <link>https://blog.iannelson.uk/a-c-postcode-struct-with-parser/</link>
      <pubDate>Tue, 29 May 2007 12:05:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/a-c-postcode-struct-with-parser/</guid>
      <description>&lt;p&gt;As &lt;a href=&#34;https://blog.iannelson.uk/postcode-validation/&#34;&gt;discussed recently&lt;/a&gt;, I’ve been trying to knock together a class struct to represent a UK postcode, provide a means of parsing a string as &lt;em&gt;potentially&lt;/em&gt; being a valid postcode (or optionally just an outer code), and split that postcode into “outer” and “inner” code.&lt;/p&gt;
&lt;p&gt;I say &lt;em&gt;potentially&lt;/em&gt; because, as you’ll know if you’ve looked into this topic at all, it’s impossible to validate whether a string truly does represent a postcode without querying the (copyrighted and expensive-to-license) Postcode Address File. As a result, my solution is not very stringent – it is possible to persuade it to successfully parse an invalid postcode, but hopefully there should be no occasions when a valid postcode is rejected.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>As <a href="https://blog.iannelson.uk/postcode-validation/">discussed recently</a>, I’ve been trying to knock together a class struct to represent a UK postcode, provide a means of parsing a string as <em>potentially</em> being a valid postcode (or optionally just an outer code), and split that postcode into “outer” and “inner” code.</p>
<p>I say <em>potentially</em> because, as you’ll know if you’ve looked into this topic at all, it’s impossible to validate whether a string truly does represent a postcode without querying the (copyrighted and expensive-to-license) Postcode Address File. As a result, my solution is not very stringent – it is possible to persuade it to successfully parse an invalid postcode, but hopefully there should be no occasions when a valid postcode is rejected.</p>
<p>The code validates strings by checking for compliance with the standards defined in <a href="http://www.govtalk.gov.uk/gdsc/html/frames/PostCode.htm">BS7666</a>, followed by checking for BFPO postcodes, and finally for a handful of notable exceptions (e.g. Girobank). If you know of any valid postcodes that are rejected by this routine, do let me know.</p>
<p>Oh, and incidentally, this was the first time I’ve used Visual Studio Orcas in anger to develop anything meatier than a Hello World. Although I wasn’t exactly pushing the technological envelope, I found the IDE to be pretty fast and stable, considering it’s a beta 1.</p>
<p>Source available on GitHub at <a href="https://github.com/ianfnelson/Postcode">https://github.com/ianfnelson/Postcode</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Big Integer</title>
      <link>https://blog.iannelson.uk/big-integer/</link>
      <pubDate>Mon, 17 Jul 2006 08:07:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/big-integer/</guid>
      <description>&lt;p&gt;As I mentioned &lt;a href=&#34;https://blog.iannelson.uk/project-euler/&#34;&gt;last summer&lt;/a&gt;, I do enjoy whiling away a few hours attempting to solve the maths / progamming challenges set on &lt;a href=&#34;http://mathschallenge.net/index.php?section=project&#34;&gt;Project Euler&lt;/a&gt;. My language of choice for most puzzles is C#, but this hampered me on some of the questions as there is no in-built support for really big integers.&lt;/p&gt;
&lt;p&gt;However, a little bit of Googling and I came across this excellent &lt;a href=&#34;http://www.codeproject.com/csharp/biginteger.asp&#34;&gt;BigInteger class&lt;/a&gt; on Code Project which does everything I need and more – and it seems bloody fast, too. Thanks to this class, I’ve been able to knock off several more problems this weekend, and now have a rating of “11% Genius” – still some way to go, then…&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>As I mentioned <a href="https://blog.iannelson.uk/project-euler/">last summer</a>, I do enjoy whiling away a few hours attempting to solve the maths / progamming challenges set on <a href="http://mathschallenge.net/index.php?section=project">Project Euler</a>. My language of choice for most puzzles is C#, but this hampered me on some of the questions as there is no in-built support for really big integers.</p>
<p>However, a little bit of Googling and I came across this excellent <a href="http://www.codeproject.com/csharp/biginteger.asp">BigInteger class</a> on Code Project which does everything I need and more – and it seems bloody fast, too. Thanks to this class, I’ve been able to knock off several more problems this weekend, and now have a rating of “11% Genius” – still some way to go, then…</p>
]]></content:encoded>
    </item>
    <item>
      <title>Tech Books</title>
      <link>https://blog.iannelson.uk/tech-books/</link>
      <pubDate>Sat, 18 Jun 2005 21:06:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/tech-books/</guid>
      <description>&lt;p&gt;I succumbed to temptation and bought another book at the MSDN briefing yesterday, pausing only out of concern that the guy who mans the &lt;a href=&#34;http://www.computermanuals.co.uk&#34;&gt;Computer Manuals&lt;/a&gt; stand at these events might think that I’m stalking him (or fancy him!). Having determined that I could hand over my Barclaycard whilst flashing my wedding ring, I brought my current reading list up to three:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.uk/exec/obidos/ASIN/078214361X&#34;&gt;Developer to Designer: GUI Design for the Busy Developer&lt;/a&gt; – this was a wedding present from my mother-in-law and is proving to be an interesting, easy-going read so far. My competencies lie in the middle tier and database, and although I’m technically capable of making GUIs, I prefer to leave the design up to others. It’s inevitable though that most coders end up doing some design, and this book is, er, designed (sorry) to help with that process. The early section of the book concentrates on each UI element in turn, whilst the later part of the book looks at putting it all together, and has particular focus on the web – layout design patterns and interaction patterns. It’s a good read, making a nice contrast from the heavier books, and I’m pleased to learn that I’m not alone in hating Outlook’s labyrinthine Tools-&amp;gt;Options dialog!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I succumbed to temptation and bought another book at the MSDN briefing yesterday, pausing only out of concern that the guy who mans the <a href="http://www.computermanuals.co.uk">Computer Manuals</a> stand at these events might think that I’m stalking him (or fancy him!). Having determined that I could hand over my Barclaycard whilst flashing my wedding ring, I brought my current reading list up to three:</p>
<p><a href="http://www.amazon.co.uk/exec/obidos/ASIN/078214361X">Developer to Designer: GUI Design for the Busy Developer</a> – this was a wedding present from my mother-in-law and is proving to be an interesting, easy-going read so far. My competencies lie in the middle tier and database, and although I’m technically capable of making GUIs, I prefer to leave the design up to others. It’s inevitable though that most coders end up doing some design, and this book is, er, designed (sorry) to help with that process. The early section of the book concentrates on each UI element in turn, whilst the later part of the book looks at putting it all together, and has particular focus on the web – layout design patterns and interaction patterns. It’s a good read, making a nice contrast from the heavier books, and I’m pleased to learn that I’m not alone in hating Outlook’s labyrinthine Tools-&gt;Options dialog!</p>
<p><a href="http://www.amazon.co.uk/exec/obidos/ASIN/0321245660">Effective C#: 50 Specific Ways to Improve Your C#</a> – another good read that isn’t too heavy, this is a good book of short hints and tips to dip into when waiting for the latest CTPs of VS and SQL Server to install (well, at least that’s when I’ve found myself reading it). Depending on your level of experience with C#, you may find some of these suggestions are teaching you to suck eggs, but they all come with detailed justifications that provide useful insights into .NET internals, and out of fifty points you’re bound to find something that you didn’t previously know. If you’re new to C#, get this book now and put it’s suggestions into practice from the start. If you think you’re an expert, borrow a copy and use it as a checklist of your knowledge.</p>
<p><a href="http://www.amazon.co.uk/exec/obidos/ASIN/0596007124">Head First Design Patterns</a> – this is the book I picked up yesterday (yes, partly because of the cute blonde on the cover), but it was the outstanding content that stopped me putting it down again. This doesn’t feel like a normal O’Reilly book, and it feels very far removed from the original Gang of Four’s Design Patterns book – yet it covers the same material. This is a patterns book that won’t send you to sleep, that will make you laugh, that will make those tricky concepts sink in and your misconceptions float away. It’s cool, clever, succinct and quite unlike any other tech book I’ve read. The only slight downer is that all the examples are in Java, but this really shouldn’t be an issue for any half-competent C# developer. Superb.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Property Access Modifiers in Whidbey</title>
      <link>https://blog.iannelson.uk/property-access-modifiers-in-whidbey/</link>
      <pubDate>Mon, 15 Nov 2004 19:11:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/property-access-modifiers-in-whidbey/</guid>
      <description>&lt;p&gt;Ooh, this is great news:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://nxopinion.robertsoninstitute.org/blogs/rcecil/archive/2004/11/11/167.aspx&#34;&gt;http://nxopinion.robertsoninstitute.org/blogs/rcecil/archive/2004/11/11/167.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s a little thing, to be sure, but I often find myself wanting to make a setter internal or private while leaving the getter public. So, I’m happy. It doesn’t take much 🙂&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Ooh, this is great news:</p>
<p><a href="http://nxopinion.robertsoninstitute.org/blogs/rcecil/archive/2004/11/11/167.aspx">http://nxopinion.robertsoninstitute.org/blogs/rcecil/archive/2004/11/11/167.aspx</a></p>
<p>It’s a little thing, to be sure, but I often find myself wanting to make a setter internal or private while leaving the getter public. So, I’m happy. It doesn’t take much 🙂</p>
]]></content:encoded>
    </item>
  </channel>
</rss>

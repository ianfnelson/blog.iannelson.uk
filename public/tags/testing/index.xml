<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Testing on Ian Nelson</title>
    <link>https://blog.iannelson.uk/tags/testing/</link>
    <description>Recent content in Testing on Ian Nelson</description>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 May 2025 20:51:16 +0100</lastBuildDate>
    <atom:link href="https://blog.iannelson.uk/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>One Reason Why NCrunch Is Worth The Cost</title>
      <link>https://blog.iannelson.uk/one-reason-why-ncrunch-is-worth-the-cost/</link>
      <pubDate>Tue, 22 Apr 2014 21:25:50 +0000</pubDate>
      <guid>https://blog.iannelson.uk/one-reason-why-ncrunch-is-worth-the-cost/</guid>
      <description>&lt;p&gt;I have been merrilly using &lt;a href=&#34;http://www.ncrunch.net/&#34;&gt;NCrunch&lt;/a&gt; – an “automated concurrent testing tool for Visual Studio” – for almost three years now. I ponied up for a paid license when it made the transition from beta to RTM, and I recently shelled out again for an upgrade to version 2.&lt;/p&gt;
&lt;p&gt;Why?! Why do this when plenty of test runners are free, or bundled with software I already own such as ReSharper and Visual Studio itself?&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I have been merrilly using <a href="http://www.ncrunch.net/">NCrunch</a> – an “automated concurrent testing tool for Visual Studio” – for almost three years now. I ponied up for a paid license when it made the transition from beta to RTM, and I recently shelled out again for an upgrade to version 2.</p>
<p>Why?! Why do this when plenty of test runners are free, or bundled with software I already own such as ReSharper and Visual Studio itself?</p>
<p>To answer that question I sorely wanted to write another “list post” as a follow-up to <em><a href="https://blog.iannelson.uk/12-reasons-why-i-love-unit-tests/">12 Reasons Why I Love Unit Tests</a></em> but as my draft progressed and my thoughts crystallised in front of me on the screen, I realised that all of the points I was trying to convey ultimately boil down to the same one reason:</p>
<h2 id="ncrunch-saves-me-time">NCrunch Saves Me Time</h2>
<p>I missed out on the age of the punchcard, thank goodness. I don’t think I could have coped with the torpid feedback cycles that software developers of that era had to endure. Bob Martin describes the multi-day process entertainingly in his excellent book <a href="http://amzn.to/1lQjkZT"><em>The Clean Coder</em></a> – programs written on coding forms with a #2 pencil, typed up by key-punchers, desk-checked, loaded by the computer operators, and ultimately returned wrapped in a rubber band with a printout showing a compile error. It must have been utterly soul-destroying.</p>
<p>Despite having started my own software development career a couple of decades after the use of punchcards died out, I have still been witness to several advancements that have reduced feedback cycle time, enabling complex yet high-quality systems to be developed and enhanced in a fraction of the time that was once possible. I’m thinking of techniques such as <a href="https://blog.iannelson.uk/ndepend/">static code analysis</a>, continuous integration, continuous delivery and of course the widespread adoption of automated testing.</p>
<h2 id="ncrunch-facilitates-the-tdd-discipline">NCrunch Facilitates the TDD Discipline</h2>
<p>Done well, Test-Driven Development is a powerful, professional, technique that allows us to develop and maintain solid, clean code in a short time. But without the right tooling to support this process, TDD can feel painful, too much stop-start while we wait on the compiler or test runner, especially if we are deliberately using baby-step techniques such as “Fake It Till You Make It” or “Stair-Step Tests”. Consider the steps we might typically intend to take:</p>
<ol>
<li>Write a test that doesn’t compile.</li>
<li>Try to compile the code.</li>
<li>Write a stub member to make the test compile.</li>
<li>Compile</li>
<li>Run the tests and watch them fail.</li>
<li>Fake the result.</li>
<li>Compile</li>
<li>Run the tests and watch them pass.</li>
<li>Add a second test to force the code to fail again.</li>
<li>Compile</li>
<li>Run the tests and watch them fail.</li>
<li>Add a more general implementation of the code.</li>
<li>Compile</li>
<li>Run the tests and watch them pass.</li>
<li>Refactor</li>
<li>Compile</li>
<li>Run the tests and watch them pass.</li>
</ol>
<p>Is it any wonder that we are tempted to cut corners when it comes to TDD?!</p>
<p>But consider what this process is like when the tooling does all the grunt work and context-switching for you in the background:</p>
<ol>
<li>Write a test that doesn’t compile.</li>
<li>Write a stub member to make the test compile.</li>
<li>Fake the result.</li>
<li>Add a slightly more specific test to force the code to fail again.</li>
<li>Add a more general implementation of the code.</li>
<li>Refactor</li>
</ol>
<p>We are left with just the “interesting” steps, and the TDD process now flows naturally and instinctively. The IDE takes responsibility for constantly compiling and testing the code, and corners are less likely to be cut.</p>
<p>I love this process. I like to make use of the big inexpensive monitors that the twenty-first century has blessed us with. I open up a window for the tests, another for the system under test, and one each for the NCrunch Tests and NCrunch Processing Queue windows – and then I have all I need on a single screen to code tight, well-tested, code at a quick pace:</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunch.png"></p>
<p>For me it is this – the facilitation of TDD and the instant feedback – that is the killer benefit of NCrunch. The remaining features that I mention below are merely the icing on the cake, but they do all serve to save me time.</p>
<h2 id="ncrunch-puts-real-time-code-coverage-data-in-my-face">NCrunch Puts Real-Time Code-Coverage Data In My Face</h2>
<p>Time was, we would gather test coverage metrics using tools like NCover or dotCover, perhaps running as part of a CI build on the server. Once in a while someone might even deem it worthwhile having a look at the output!</p>
<p>With NCrunch, the code coverage is displayed right there in the IDE on a line-by-line basis as you code, with any uncovered lines sticking out like a sore thumb.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/Uncovered.png"></p>
<p>If you really want to see overall metrics for the solutions, NCrunch also provides a separate Metrics window.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchMetrics.png"></p>
<h2 id="ncrunch-doesnt-make-me-hunt-for-error-messages">NCrunch Doesn’t Make Me Hunt For Error Messages</h2>
<p>When my code fails a test assertion, or even when it fails to compile, the reasons, just like the code-coverage data, are right there in my face, almost immediately. I don’t have to go hunting for the problem, I can access the compiler errors or stack traces for failed assertions without leaving the window in which I’m coding.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchExceptions.png"></p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchAssertions.png"></p>
<h2 id="ncrunch-highlights-slow-running-lines-of-code">NCrunch Highlights Slow-Running Lines of Code</h2>
<p>Powerful, expensive performance profiling tools such as Redgate Ants Performance Profiler and JetBrains dotTrace are often used to find bottlenecks in code that has already been developed and is often in production.</p>
<p>NCrunch, as a somewhat unsung benefit, almost absent-mindedly gathers performance metrics as it continuously executes my tests, and highlights slow lines of code with a different coloured marker.</p>
<p>Given the existence of appropriate tests, this means that my attention is drawn to potential problems before the code is even committed to the source control repository.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchSlow.png"></p>
<h2 id="ncrunch-is-super-configurable">NCrunch is Super-Configurable</h2>
<p>Constant background compiling and test running obviously requires some significant computing resources. Fortunately, NCrunch is super-configurable in this regard. It’s easy to specify such things as the number of CPU cores that should be assigned to NCrunch, and the maximum number of processing threads. Not <em>all</em> the tests have to be run continuously – tests irrelevant to the work being undertaken can be ignored, or NCrunch can intelligently execute only those tests it determines are affected by changes.</p>
<p>Today I was working on a small corner of a large .NET solution (60+ projects), so I deliberately told NCrunch to ignore most of those compo<br>
nents entirely, leaving it free to devote all its attention on the few assemblies I was currently enhancing. This resulted in faster feedback, saving me time!</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchModes.png">
<img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchConfig1.png">
<img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchConfig2.png"></p>
<h2 id="ncrunch-lets-me-utilise-other-computers-resources">NCrunch Lets Me Utilise Other Computers’ Resources</h2>
<p>The latest version of NCrunch even lets me utilise the resources of any other computers or VMs that I may have at my disposal, enslaving them into my army of code compilers and test runners – buwahahahaha!</p>
<p>In the screenshots below you can see that I’ve sneakily added my kids’ laptop as another node in my NCrunch cluster, to offload some of the work from my development machine.</p>
<p><img loading="lazy" src="https://blogstouks01.z33.web.core.windows.net/2023/08/NCrunchDistributed.png"></p>
<h2 id="what-more-can-i-say">What More Can I Say?</h2>
<p>NCrunch rocks. It has spoiled me for IDEs that don’t offer continuous compilation and testing functionality. The effortless manner in which it gives me feedback on the code and tests that I write every day is one of the things that keeps me interested in improving my .NET development skills after well over a decade at the code face.</p>
<p><em>Disclaimer: Ian Nelson has not received any incentive or inducement to publish the commentary above. I have no material connection with Remco Mulder or Remco Software, other than as a paying customer of the NCrunch product. Some of the links in this post contain my Amazon Associates ID, and I may receive commission if you make a purchase through them.</em></p>
]]></content:encoded>
    </item>
    <item>
      <title>Schoolboy Error Of The Day</title>
      <link>https://blog.iannelson.uk/schoolboy-error-of-the-day/</link>
      <pubDate>Wed, 17 Aug 2011 08:08:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/schoolboy-error-of-the-day/</guid>
      <description>&lt;p&gt;This dumb mistake just cost me an hour spelunking around in the debugger:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var status = source.Substring(source.LastIndexOf(&amp;quot;/&amp;quot; + 1));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(where source is e.g. “&lt;a href=&#34;http://foo.com/status/all-is-good&#34;&gt;http://foo.com/status/all-is-good&lt;/a&gt;“)&lt;/p&gt;
&lt;p&gt;Fortunately the ramifications were picked up in the acceptance tests, but the root cause wasn’t at all obvious from such a high level.&lt;/p&gt;
&lt;p&gt;Lesson for the day – code is never too trivial to warrant unit testing.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This dumb mistake just cost me an hour spelunking around in the debugger:</p>
<p><code>var status = source.Substring(source.LastIndexOf(&quot;/&quot; + 1));</code></p>
<p>(where source is e.g. “<a href="http://foo.com/status/all-is-good">http://foo.com/status/all-is-good</a>“)</p>
<p>Fortunately the ramifications were picked up in the acceptance tests, but the root cause wasn’t at all obvious from such a high level.</p>
<p>Lesson for the day – code is never too trivial to warrant unit testing.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Testing IoC Registrations</title>
      <link>https://blog.iannelson.uk/testing-ioc-registrations/</link>
      <pubDate>Fri, 09 Apr 2010 14:04:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/testing-ioc-registrations/</guid>
      <description>&lt;p&gt;When I first started writing automated unit tests for my code, I remember getting carried away writing lots of tiny little tests, each with a single Assert. It felt good initially to see all those green ticks, but rapidly became a maintenance headache, and I am now happier having fewer less-brittle tests that do more.&lt;/p&gt;
&lt;p&gt;I think it’s great when tools like &lt;a href=&#34;http://automapper.codeplex.com/&#34;&gt;AutoMapper&lt;/a&gt; provide powerful methods like…&lt;/p&gt;



  

&lt;script src=&#34;https://gist.github.com/ianfnelson/287b94e1e565e3ee7137.js?file=IoC_1.cs&#34;&gt;&lt;/script&gt;
&lt;p&gt;…allowing me to test large swathes of the system configuration with a single, stable test.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>When I first started writing automated unit tests for my code, I remember getting carried away writing lots of tiny little tests, each with a single Assert. It felt good initially to see all those green ticks, but rapidly became a maintenance headache, and I am now happier having fewer less-brittle tests that do more.</p>
<p>I think it’s great when tools like <a href="http://automapper.codeplex.com/">AutoMapper</a> provide powerful methods like…</p>



  

<script src="https://gist.github.com/ianfnelson/287b94e1e565e3ee7137.js?file=IoC_1.cs"></script>
<p>…allowing me to test large swathes of the system configuration with a single, stable test.</p>
<p>I wanted to write a similar test to check that all the necessary system dependencies for my MVC application could be resolved by the IoC container. Here’s what I came up with:</p>



  

<script src="https://gist.github.com/ianfnelson/287b94e1e565e3ee7137.js?file=IoC_2.cs"></script>
<p>A few things to note:</p>
<ol>
<li>I’m configuring my container using the <a href="http://fabiomaulo.blogspot.com/2009/11/guywire.html">GuyWire pattern described by Fabio Maulo</a>.</li>
<li>I’m using ControllerExtensions from the <a href="http://mvccontrib.codeplex.com/Wikipage">MvcContrib project</a> to identify controllers.</li>
<li>I’m accessing the IoC container via the <a href="http://commonservicelocator.codeplex.com">Common Service Locator</a>.</li>
<li>This only tests the dependencies that are referenced by dependency injection, and won’t pick up on any missing registrations that are only referenced via service locator (you’d have to write separate itty-bitty tests to check those registrations).</li>
</ol>
<p>What do you think? How, if at all, do you test your IoC container registrations?</p>
]]></content:encoded>
    </item>
    <item>
      <title>Testing LINQ Queries</title>
      <link>https://blog.iannelson.uk/testing-linq-queries/</link>
      <pubDate>Fri, 09 Apr 2010 13:04:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/testing-linq-queries/</guid>
      <description>&lt;p&gt;I’ve been asked “How do you test LINQ queries?” a couple of times in the past few months, so I thought I’d blog my answer for the benefit of all you lovely people.&lt;/p&gt;
&lt;p&gt;Firstly I should explain how I’ve been doing most of my data access in recent months. I find that the &lt;a href=&#34;http://martinfowler.com/eaaCatalog/repository.html&#34;&gt;Repository pattern&lt;/a&gt;, and particularly the &lt;a href=&#34;http://fabiomaulo.blogspot.com/2009/09/repository-or-dao-repository.html&#34;&gt;.NET implementation described here by Fabio Maulo&lt;/a&gt; meets the vast majority of requirements I have in my applications, and I fall back on additionally using custom DAOs when required.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I’ve been asked “How do you test LINQ queries?” a couple of times in the past few months, so I thought I’d blog my answer for the benefit of all you lovely people.</p>
<p>Firstly I should explain how I’ve been doing most of my data access in recent months. I find that the <a href="http://martinfowler.com/eaaCatalog/repository.html">Repository pattern</a>, and particularly the <a href="http://fabiomaulo.blogspot.com/2009/09/repository-or-dao-repository.html">.NET implementation described here by Fabio Maulo</a> meets the vast majority of requirements I have in my applications, and I fall back on additionally using custom DAOs when required.</p>
<p>So, my service classes can ask the IoC container for instances of <code>IRepository&lt;T&gt;</code>, where <code>IRepository&lt;T&gt;</code> implements <code>IQueryable&lt;T&gt;</code>.</p>
<p>Now, in the best tradition of encapsulation, all but the most trivial of the queries I write against these repositories are defined in extension methods, for example:</p>



  

<script src="https://gist.github.com/ianfnelson/0fd94841097a75fa9d58.js?file=TL1.cs"></script>
<p>Aside from the testability aspect (which I promise I’ll get onto in a second), this approach also helps keep us on the right side of the <a href="http://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a>, as <a href="http://blog.robustsoftware.co.uk/2010/04/linq-and-law-of-demeter.html">Garry Shutler blogged about recently</a>. It also allows for method chaining, allowing us to enact multiple filters and other transformations in a single line of code:</p>



  

<script src="https://gist.github.com/ianfnelson/0fd94841097a75fa9d58.js?file=TL2.cs"></script>
<p>But I digress. I was talking about how to test these LINQ queries. It’s easy really, the trick is knowing that <code>IEnumerable&lt;T&gt;</code> offers an <a href="http://msdn.microsoft.com/en-us/library/bb908285%28v=VS.90%29.aspx"><code>AsQueryable()</code> method</a>. So, we can build up some dummy data in a <code>List&lt;T&gt;</code> before calling <code>AsQueryable()</code> to obtain an object against which the extension method can act. Dead simple. The creation of the test data can even be automated using the open source <a href="http://nbuilder.org/">NBuilder</a> tool.</p>
<p>One caveat – this is merely testing that your LINQ query does what you think it should do, it doesn’t test the behaviour of the underlying LINQ provider. If you’re using, say, the NHibernate LINQ 1.0 provider (which is great but not at all feature-complete) then you’ll also need to write some suitable integration tests, say by testing against the <a href="http://sqlite.org/">Sqlite</a> database engine.</p>
]]></content:encoded>
    </item>
    <item>
      <title>12 Reasons Why I Love Unit Tests</title>
      <link>https://blog.iannelson.uk/12-reasons-why-i-love-unit-tests/</link>
      <pubDate>Tue, 11 Nov 2008 22:11:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/12-reasons-why-i-love-unit-tests/</guid>
      <description>&lt;p&gt;On my continuing journey through this thrilling world of professional software development, I frequently encounter teams who hold no truck with this crazy new-fangled concept of unit testing. Heck, truth be told, I sometimes come across teams who don’t use &lt;em&gt;source control&lt;/em&gt;, but that’s by the bye.&lt;/p&gt;
&lt;p&gt;In these situations, I try my best to lead by example, continuing to practise TDD on any new code that I cut, and insisting on covering with unit tests any pre-existing code which I have to modify. Sooner or later, this prompts someone to ask why I am doing this (often insinuating that I am wasting my time, and by implication the client’s money). At that point, flustered, I invariably struggle to remember or adequately articulate the many and various ways in which unit testing makes me a better developer. So, consider this blog post a personal aide-mémoire to help me the next time this occurs (as well as being a homage to &lt;a href=&#34;http://uk.youtube.com/watch?v=DW1AHrTNBao&#34;&gt;Jake Shillingford’s second-best song&lt;/a&gt;).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>On my continuing journey through this thrilling world of professional software development, I frequently encounter teams who hold no truck with this crazy new-fangled concept of unit testing. Heck, truth be told, I sometimes come across teams who don’t use <em>source control</em>, but that’s by the bye.</p>
<p>In these situations, I try my best to lead by example, continuing to practise TDD on any new code that I cut, and insisting on covering with unit tests any pre-existing code which I have to modify. Sooner or later, this prompts someone to ask why I am doing this (often insinuating that I am wasting my time, and by implication the client’s money). At that point, flustered, I invariably struggle to remember or adequately articulate the many and various ways in which unit testing makes me a better developer. So, consider this blog post a personal aide-mémoire to help me the next time this occurs (as well as being a homage to <a href="http://uk.youtube.com/watch?v=DW1AHrTNBao">Jake Shillingford’s second-best song</a>).</p>
<h2 id="1-i-know-that-my-code-works">1. I know that my code works</h2>
<p>Let’s get the obvious one out of the way first. If I take the time to write unit tests for my code, then I know that the code “works” (i.e. that it behaves as I intended, or hopefully as the specification requested). Any time I want to check that my code works, I can do so with a few clicks. The confidence and feeling of well-being that this brings can’t be underestimated. If you don’t have unit tests, how do you know that your code works?</p>
<h2 id="2-i-know-when-im-finished">2. I know when I’m finished</h2>
<p>As you’ll know if you’ve read my <a href="https://blog.iannelson.uk/remember-the-milk/">post professing my undying love for Remember The Milk</a>, I’m fond of organising my life through to-do lists. When I’m developing software, the unit tests that I create before developing the code act as my to-do list, help me focus on what it is that I’m trying to achieve, without getting distracted making unrelated changes to the codebase. When all the tests go green, I know I’m done and can move on to the next task.</p>
<h2 id="3-i-can-develop-cleaner-apis">3. I can develop cleaner APIs</h2>
<p>I’m not much of a UI developer; I spend much more of my time working in the middle tier, making class libraries, object models, WCF services and the like. When practicing TDD, I write tests to consume my code before I write the code itself. This forces me to think about things like method signatures and member visibility. Should that method really be public? Do I really need that “out” parameter? Will all those overloads get used? If I didn’t write tests for the middle tier in this way, I wouldn’t consider these questions in quite so much detail, and these issues wouldn’t come to light until I (or worse, someone else), began consuming my code for real.</p>
<h2 id="4-testable-code-is-well-designed-code">4. Testable code is well-designed code</h2>
<p>This one came as an unexpected surprise to me after I had been writing unit tests for a while and forced myself to make the effort to test code which I initially felt was difficult to test.</p>
<p>It turns out that many of the techniques which can be used to make code more testable are the exact same techniques which make code better designed, understandable, flexible and maintainable.</p>
<p>Be honest, when you’re cutting code, how often do you consider things like Low Coupling, High Cohesion, and adhering to the Single Responsibility Principle? Probably not often, I’ll bet. I know I didn’t. But since I started asking myself “How can I make this code testable?” I’ve been delighted to realise that my code magically acquired these properties as a pleasant side effect. Similarly, using techniques like Dependency Injection and Inversion of Control along with Mocking Frameworks for the purposes of testability also serves to make the solution more open to change, and reduces dependencies during the development process (no longer do you hear “Gee boss, I’d love to get started writing the Foo class, but it depends on the Bar class, and Dave hasn’t finished writing that, what with the accident with the bus and all…”).</p>
<h2 id="5-i-can-refactor-mercilessly-and-fearlessly">5. I can refactor mercilessly and fearlessly</h2>
<blockquote>
<p>“Nel-son!!”</p></blockquote>
<p>I like refactoring. No, wait, scrub that – I <em>love</em> refactoring. Some people get their kicks from gardening, well, I could spend many happy hours weeding a big tangled codebase. Now, in the past, this has gotten me into trouble, when the “improvements” I’ve rashly made have inadvertently caused bugs (sorry John, Sion, Scott and Colin!). Since adopting TDD however, I’ve been confident that my code is sufficiently covered by unit tests that I may refactor mercilessly, safe in the knowledge that the test suite will highlight any unintended side effects. This results in a winning combination of clean code and co-workers who don’t have an urge to throttle me.</p>
<h2 id="6-i-release-fewer-stupid-mistakes">6. I Release Fewer Stupid Mistakes</h2>
<blockquote>
<p>“Ah, yeah, silly me, I just copied-and-pasted a line in the DAL, and now all your customers are displaying as having the same forename and surname! Smith Smith, Brown Brown, ha ha!”</p></blockquote>
<p>Perversely, some coders seem to wear their really dumb mistakes as a “badge of honour”, proof of their fallibility, a sign that they are human. It’s as if they are suggesting to their boss/client not to worry, that they <em>only</em> make dumb mistakes on the easy code, but concentrate much harder when coding the tough algorithms. Honest, guv’.</p>
<p>I don’t buy this crap. Stupid mistakes are stupid mistakes, period. I think that dumb mistakes, uncaught at an early stage, waste the time of the test team, result in rework, and ultimately waste the client’s money. That’s nothing to laugh about. Covering even the simple, easy code with unit tests reduces the likelihood of these knucklehead bugs getting through, increasing my likelihood of a “right-first-time” reputation. And <em>that’s</em> something to be proud of.</p>
<h2 id="7-bugs-dont-come-back">7. Bugs don’t come back</h2>
<blockquote>
<p>“But I’m <em>sure</em> we fixed that bug months ago!”</p></blockquote>
<p>Before I fix a bug, I write a failing test. That test then becomes a permanent fixture in the test suite, and therefore I can be confident that no “undead bug” will ever come back to haunt me. It’s a very simple concept, but it works. Bug reactivations imply loose development practices, and that’s not an implication I want to be made about my work. Kill the bug once, and keep it dead.</p>
<h2 id="8-its-the-fastest-way-to-test-my-changes">8. It’s the fastest way to test my changes</h2>
<p>Testing my changes through artificial unit tests is invariably quicker than testing the functionality by calling it through “real life” use of the overall system.</p>
<p>Suppose that I’m working on amended postage charge logic for an online retailer – I could test this by either:</p>
<p>a) Repeatedly manually walking through the application, adding a product to my basket, attempting to “check out”, and calculating whether the displayed postage charge is as I expect, or</p>
<p>b) Writing a unit test once to automate the testing of the new logic.</p>
<p>Gee, let me think about that for a while…</p>
<h2 id="9-i-spend-more-time-coding-less-time-in-the-debugger">9. I spend more time coding, less time in the debugger</h2>
<p>Stop me if this conversation sound<br>
s at all familiar:</p>
<blockquote>
<p>“How was your day today, darling?”</p>
<p>“Ugh, don’t ask. I spent, like, <em>seven hours</em> trying to track down a bug. I pulled out Reflector, and even started debugging into the .NET framework class library – I was convinced for a while there it was a problem in System.String. But it turned out I just had some Boolean logic the wrong way round.”</p>
<p>“That’s nice, dear. More mange tout?”</p></blockquote>
<p>Visual Studio has excellent debugging tools, but still, I’d rather be spending my time cutting new code, thanks all the same. I’m sure the clients who pay my invoices feel much the same. Catching the bugs early, through effective unit testing, means that I spend far less time in the debugger.</p>
<h2 id="10-writing-documentation-and-sample-code-is-boring">10. Writing documentation and sample code is boring</h2>
<p>Visiting the dentist. Cleaning the bathroom. Writing documentation. All things which I’d rather put off until tomorrow, thank you very much.</p>
<p>If, on any given day, I have the choice between firing up Word and documenting my class library, or firing up Visual Studio and adding shiny new functionality to the same library, well, it’s no contest.</p>
<p>But here’s the neat thing – having taken the time to create a comprehensive suite of unit tests for my own, selfish purposes, it turns out that potential consumers of my library can benefit from them as a de facto set of usage examples and documentation. Yay!</p>
<h2 id="11-i-can-hand-the-code-over-to-other-people">11. I can hand the code over to other people</h2>
<blockquote>
<p>“Dave’s the only person who understands that code.”</p></blockquote>
<p>Oh really? What happens when Dave is on holiday? Or quits to get a better-paid job? Or gets hit by a bus? That’s a bit of a risk for your project, surely.</p>
<p>Maybe you’re a Dave, and your unique knowledge of a particular system means that you only ever get to work on that one application. Shiny new projects come along, and get handed to your colleagues, because you’re too busy supporting the Legacy App From Hell, until you quit to get that better paid job, or walk in front of a bus in desperation.</p>
<p>If, on the other hand, you’ve covered the code in unit tests, then you have effectively documented the codebase, provided example usages, and made it near-impossible for any future developers to break existing functionality due to their ignorance of the system. They can try making a change, run the unit tests, and instantly find out whether their change works. This helps to make possible <a href="http://www.extremeprogramming.org/rules/collective.html">Collective Code Ownership</a>, a variety of work for all members of the team, and no risky dependencies on Dave and his jaywalking habits.</p>
<h2 id="12-im-a-professional">12. I’m A Professional</h2>
<p>I’ll return to what I said in the opening sentence of this article – this is <em>professional</em> software development. This isn’t just my hobby, or my day job. It’s my career, my business, my passion and the livelihood of myself and my family. I strive to improve and hopefully excel at it. All the research and my own experience suggests that practicing TDD results in fewer defects, saves time in the medium and long term, and is generally the approach to be expected of a professional. If you’re looking for a quick-fix from a cowboy contractor, go elsewhere and save yourself some money… in the short term 🙂</p>
]]></content:encoded>
    </item>
    <item>
      <title>eXtreme .NET</title>
      <link>https://blog.iannelson.uk/extreme-net/</link>
      <pubDate>Sat, 18 Jun 2005 21:06:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/extreme-net/</guid>
      <description>&lt;p&gt;Up at 0500 yesterday and onto the early GNER Mallard down to that London town for the MSDN briefing on eXtreme programming with .NET. It was pleasant not to be driving for a change, and speeding through the Yorkshire countryside early on a midsummer morning was very relaxing – what a stark contrast with the hot crowded tube that I had to catch on arrival to the big smoke. Three stops down to Oxford Circus seemed to last as long as the entire preceeding train journey. How people do this every single day I do not know..&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Up at 0500 yesterday and onto the early GNER Mallard down to that London town for the MSDN briefing on eXtreme programming with .NET. It was pleasant not to be driving for a change, and speeding through the Yorkshire countryside early on a midsummer morning was very relaxing – what a stark contrast with the hot crowded tube that I had to catch on arrival to the big smoke. Three stops down to Oxford Circus seemed to last as long as the entire preceeding train journey. How people do this every single day I do not know..</p>
<p>Anyway, I digress. The tech briefing was excellent, a full day’s set of presentations on eXtreme development practices by the very erudite and engaging <a href="http://www.roodyn.com/">Dr Neil Roodyn</a>, with additional demos by some of the MSDN UK guys. During questioning, nobody in the audience was arguing against using the XP practices espoused, in fact most questioners simply wanted to know how to get project managers and business leaders bought in to the ideas. The general consensus was that suits and customers don’t want to hear about pair programming and <a href="http://www.testdriven.com/">TDD</a>, they want to see devs working on coding new functionality, which is obviously frustrating for those of us cutting the code. Hopefully sessions like the one on Friday will help to inspire a groundswell of enthusiasm for agile practices amongst developers and team leads which the business leaders will eventually be unable to ignore. Dr Neil suggested that we don’t try to immediately enforce all 12 XP principles in our workplaces, but start using those which work for us, basically those which we can sneak in under the managements noses!  Nobody can stop you from writing unit tests and adopting a TDD approach to your coding, and may only start asking questions when they see how much more productive you’re becoming, and how fewer bugs are found in your code. After all, producing quality code is your job, and nobody will stop you from doing your job well.</p>
<hr>
<p>While I remember, some of the books mentioned by Neil were:</p>
<ul>
<li><a href="http://www.amazon.co.uk/exec/obidos/ASIN/0201604566">&ldquo;Software For Your Head&rdquo; by Jim McCarthy</a></li>
<li><a href="http://www.amazon.co.uk/exec/obidos/ASIN/0349113467">&ldquo;The Tipping Point&rdquo; by Malcolm Gladwell</a></li>
<li><a href="http://www.amazon.co.uk/exec/obidos/ASIN/1587991845">&ldquo;Fooled By Randomness&rdquo; by Nassim Nicholas Taleb</a></li>
</ul>
<p>and I have noted down that I should find the time to visit:</p>
<ul>
<li><a href="http://www.microsoft.com/uk/msdn/postevents">http://www.microsoft.com/uk/msdn/postevents</a> – for a copy of the slides</li>
<li><a href="http://agilealliance.com">http://agilealliance.com</a></li>
<li><a href="http://www.xpertise.co.uk">http://www.xpertise.co.uk</a></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>

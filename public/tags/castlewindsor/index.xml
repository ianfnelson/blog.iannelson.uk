<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CastleWindsor on Ian Nelson</title>
    <link>https://blog.iannelson.uk/tags/castlewindsor/</link>
    <description>Recent content in CastleWindsor on Ian Nelson</description>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 May 2025 20:51:16 +0100</lastBuildDate>
    <atom:link href="https://blog.iannelson.uk/tags/castlewindsor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Circuit Breaker Which Trips On Frequency Of Failures</title>
      <link>https://blog.iannelson.uk/a-circuit-breaker-which-trips-on-frequency-of-failures/</link>
      <pubDate>Wed, 28 Oct 2009 11:10:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/a-circuit-breaker-which-trips-on-frequency-of-failures/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://twitter.com/jeremypearson&#34;&gt;@Jez&lt;/a&gt; &lt;a href=&#34;http://twitter.com/jeremypearson/statuses/5186129382&#34;&gt;tweeted&lt;/a&gt; last night:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@ianfnelson admit it: you use Castle Windsor primarily to highlight and lampoon Google&amp;rsquo;s poor selection of adwords?!&lt;br&gt;
— 𝚂𝚑𝚘𝚘𝚝𝚒𝚗𝚐 𝚂𝚌𝚒𝚕𝚕𝚢 (@shootingscilly)  October 26, 2009&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Funny, but not true. I am enamoured with the &lt;a href=&#34;http://www.castleproject.org/container/index.html&#34;&gt;Castle Windsor&lt;/a&gt; project because its power makes it fairly simple for me to develop loosely-coupled systems which are easily maintained and tested. The wide range of Facilities and Contrib projects also integrate nicely with the other parts of my current development stack (NHibernate, WCF, WF, log4net).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="http://twitter.com/jeremypearson">@Jez</a> <a href="http://twitter.com/jeremypearson/statuses/5186129382">tweeted</a> last night:</p>
<blockquote>
<p>@ianfnelson admit it: you use Castle Windsor primarily to highlight and lampoon Google&rsquo;s poor selection of adwords?!<br>
— 𝚂𝚑𝚘𝚘𝚝𝚒𝚗𝚐 𝚂𝚌𝚒𝚕𝚕𝚢 (@shootingscilly)  October 26, 2009</p></blockquote>
<p>Funny, but not true. I am enamoured with the <a href="http://www.castleproject.org/container/index.html">Castle Windsor</a> project because its power makes it fairly simple for me to develop loosely-coupled systems which are easily maintained and tested. The wide range of Facilities and Contrib projects also integrate nicely with the other parts of my current development stack (NHibernate, WCF, WF, log4net).</p>
<p>Whilst there is a lot of material on the web about the Dependency Injection capabilities of Windsor, the Aspect-Oriented Programming (AOP) features don’t seem to get as much exposure, so I thought I’d quickly blog about one way in which I’ve been making use of those in the system I’m currently developing.</p>
<p>Earlier this year <a href="http://davybrion.com">Davy Brion</a> posted <a href="http://davybrion.com/blog/2009/07/protecting-your-application-from-remote-problems/">an excellent C# implementation</a> of the Circuit Breaker pattern described in Michael Nygard’s equally excellent book <em><a href="http://www.amazon.co.uk/gp/product/0978739213?ie=UTF8&amp;tag=ianesbl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=0978739213">Release It! Design and Deploy Production-Ready Software</a></em>.</p>
<p>For the uninitiated, this pattern advocates protecting your system from issues affecting any remote service on which it depends by wrapping your calls to that service with a circuit breaker component. This component notes any failed service invocations, until some threshold is reached, causing the circuit to trip. Subsequent attempted service invocations then “fail fast”, throwing a custom exception rather than passing the method call on to the remote service. This benefits your system, as it prevents you from tying up valuable threads creating expensive remote service calls which may be slow to timeout. And it benefits the remote system as you avoid piling further pressure on a service which is already down or unresponsive.</p>
<p>For more details of this pattern, and some entertaining war stories of situations in which they would have proved useful, I encourage you to read <a href="http://www.amazon.co.uk/gp/product/0978739213?ie=UTF8&amp;tag=ianesbl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=0978739213">Michael Nygard’s book</a>.</p>
<p>Now, I like Davy’s implementation of this pattern a lot, particularly since it is implemented as an interceptor for Castle Windsor, which as mentioned I’m already making heavy use of in my current projects. But my only concern is that it is configured to trip after the number of failed invocations reaches a specific figure, <em>irrespective of how long it takes to reach that threshold</em>. I want an implementation which is able to sense the difference between infrequent exceptions over a prolonged period, and a sudden flurry of exceptions – the latter causing the circuit breaker to trip.</p>
<p>To achieve this I’ve tweaked Davy’s implementation slightly by adding an extra parameter to the constructor specifying the historical period over which to total the number of exceptions. That is, you can configure it such that a certain number of failures <em>within the preceding y minutes</em> causes the circuit breaker to trip.</p>
<p>My forked version can be found on GitHub at <a href="https://github.com/ianfnelson/CircuitBreaker">https://github.com/ianfnelson/CircuitBreaker</a>.</p>
<p>I look forward to seeing what adverts Google sees fit to stick at the bottom of this post… 🙂</p>
]]></content:encoded>
    </item>
    <item>
      <title>Castle Windsor Array Resolution Gotcha</title>
      <link>https://blog.iannelson.uk/castle-windsor-array-resolution-gotcha/</link>
      <pubDate>Mon, 26 Oct 2009 10:10:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/castle-windsor-array-resolution-gotcha/</guid>
      <description>&lt;p&gt;The shiny new system which I’ve recently been developing makes heavy use of the Chain of Responsibility pattern, and as such a number of service classes take an array of objects in the constructor:&lt;/p&gt;



  

&lt;script src=&#34;https://gist.github.com/ianfnelson/cfbe381862b8c7b1e084.js?file=cwarg1.cs&#34;&gt;&lt;/script&gt;
&lt;p&gt;I’m using Castle Windsor for dependency management, so I’ve been fluently registering all instances of ILeadAllocator:&lt;/p&gt;



  

&lt;script src=&#34;https://gist.github.com/ianfnelson/cfbe381862b8c7b1e084.js?file=cwarg2.cs&#34;&gt;&lt;/script&gt;
&lt;p&gt;Easy, right? And yet at runtime Windsor surprised me by throwing this exception in my face:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Castle.MicroKernel.Handlers.HandlerException: Can’t create component &amp;amp;#8216;Marshalls.Leads.ApplicationService.LeadAllocationService’ as it has dependencies to be satisfied.

Marshalls.Leads.ApplicationService.LeadAllocationService is waiting for the following dependencies:

Keys (components with specific keys)

– leadAllocators which was not registered.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Huh?! What gives? Well, a little Googling revealed &lt;a href=&#34;http://hammett.castleproject.org/?p=257&#34;&gt;this post&lt;/a&gt; from Castle founder Hamilton Verissimo explaining that by default the Castle MicroKernel expects me to define what should be included in the array. But he goes on to explain that the behaviour I desire can be achieved by registering a custom subresolver with the microkernel. That subresolver has since been included in the Castle Windsor distro, so in actual fact all I needed to do was add the following line of code when configuring my container:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>The shiny new system which I’ve recently been developing makes heavy use of the Chain of Responsibility pattern, and as such a number of service classes take an array of objects in the constructor:</p>



  

<script src="https://gist.github.com/ianfnelson/cfbe381862b8c7b1e084.js?file=cwarg1.cs"></script>
<p>I’m using Castle Windsor for dependency management, so I’ve been fluently registering all instances of ILeadAllocator:</p>



  

<script src="https://gist.github.com/ianfnelson/cfbe381862b8c7b1e084.js?file=cwarg2.cs"></script>
<p>Easy, right? And yet at runtime Windsor surprised me by throwing this exception in my face:</p>
<pre tabindex="0"><code>Castle.MicroKernel.Handlers.HandlerException: Can’t create component &amp;#8216;Marshalls.Leads.ApplicationService.LeadAllocationService’ as it has dependencies to be satisfied.

Marshalls.Leads.ApplicationService.LeadAllocationService is waiting for the following dependencies:

Keys (components with specific keys)

– leadAllocators which was not registered.
</code></pre><p>Huh?! What gives? Well, a little Googling revealed <a href="http://hammett.castleproject.org/?p=257">this post</a> from Castle founder Hamilton Verissimo explaining that by default the Castle MicroKernel expects me to define what should be included in the array. But he goes on to explain that the behaviour I desire can be achieved by registering a custom subresolver with the microkernel. That subresolver has since been included in the Castle Windsor distro, so in actual fact all I needed to do was add the following line of code when configuring my container:</p>



  

<script src="https://gist.github.com/ianfnelson/cfbe381862b8c7b1e084.js?file=cwarg3.cs"></script>
<p>So now, when new implementations of ILeadAllocator are added to the codebase, they are immediately available to the CofR pattern within the LeadAllocationService, with no additional work required by the developer. Hurrah!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Castle Windsor Lifestyle Gotcha</title>
      <link>https://blog.iannelson.uk/castle-windsor-lifestyle-gotcha/</link>
      <pubDate>Mon, 19 Oct 2009 05:10:00 +0000</pubDate>
      <guid>https://blog.iannelson.uk/castle-windsor-lifestyle-gotcha/</guid>
      <description>&lt;p&gt;I always knew my lifestyle choices would come back to bite me some day…&lt;/p&gt;
&lt;p&gt;I’ve been making heavy use of the &lt;a href=&#34;http://www.castleproject.org/container/index.html&#34;&gt;Castle Windsor&lt;/a&gt; container to handle dependency and configuration management in the shiny new system that I’m currently developing. For the most part it’s been an absolute blast, allowing me to easily create a loosely-coupled system architecture and focus my efforts on what the system should be achieving for the client, rather than worrying about how it all hangs together.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I always knew my lifestyle choices would come back to bite me some day…</p>
<p>I’ve been making heavy use of the <a href="http://www.castleproject.org/container/index.html">Castle Windsor</a> container to handle dependency and configuration management in the shiny new system that I’m currently developing. For the most part it’s been an absolute blast, allowing me to easily create a loosely-coupled system architecture and focus my efforts on what the system should be achieving for the client, rather than worrying about how it all hangs together.</p>
<p>But recently I encountered a bit of a gotcha which made me think that perhaps I should spend some more time understanding exactly what Windsor is doing in the background.</p>
<p>See, it turns out that the default lifestyle for components registered with Windsor is Singleton. So, every time I asked Windsor for an IFooRepository, it supplied me with <em>exactly the same concrete instance of FooRepository</em>. Which would have been fine if it weren’t for the fact that FooRepository happened to indirectly hold a private reference to a thread-afine NHibernate session context. Ouchy.</p>
<p>The system I’m developing is a WCF service, and I’m using a Unit of Work pattern to open an NH session before the operation is invoked, and close it afterwards. To make this work, I simply needed to make sure that FooRepository (and any Castle-fulfilled component which has an IFooRepository dependency) has a transient lifestyle. Indeed, on further reflection, for most of the systems I develop, the transient lifestyles should be my default choice, and I do wonder why the Windsor developers chose to make singleton the default.</p>
<p>Davy Brion has more info on this topic in this blog post – <a href="http://davybrion.com/blog/2008/05/windsor-and-component-instance-lifetimes/">Windsor and Component Instance Lifetimes</a>.</p>
<p>So, moral of the story – understand how your IoC container is fulfilling your requests, and be prepared to specify non-default behaviours if necessary. Convention over configuration is only a benefit if you’re happy with the conventions.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
